/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.edgecloudmodel.eCModel.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.edgecloudmodel.eCModel.Attribute;
import org.xtext.example.edgecloudmodel.eCModel.ECModelPackage;
import org.xtext.example.edgecloudmodel.eCModel.Entity;
import org.xtext.example.edgecloudmodel.eCModel.Invariance;
import org.xtext.example.edgecloudmodel.eCModel.Reference;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Entity</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.edgecloudmodel.eCModel.impl.EntityImpl#isIsCRUD <em>Is CRUD</em>}</li>
 *   <li>{@link org.xtext.example.edgecloudmodel.eCModel.impl.EntityImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.edgecloudmodel.eCModel.impl.EntityImpl#getSuperEntity <em>Super Entity</em>}</li>
 *   <li>{@link org.xtext.example.edgecloudmodel.eCModel.impl.EntityImpl#getDescription <em>Description</em>}</li>
 *   <li>{@link org.xtext.example.edgecloudmodel.eCModel.impl.EntityImpl#getAttributes <em>Attributes</em>}</li>
 *   <li>{@link org.xtext.example.edgecloudmodel.eCModel.impl.EntityImpl#getReference <em>Reference</em>}</li>
 *   <li>{@link org.xtext.example.edgecloudmodel.eCModel.impl.EntityImpl#getInvariance <em>Invariance</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EntityImpl extends MinimalEObjectImpl.Container implements Entity
{
  /**
   * The default value of the '{@link #isIsCRUD() <em>Is CRUD</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsCRUD()
   * @generated
   * @ordered
   */
  protected static final boolean IS_CRUD_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIsCRUD() <em>Is CRUD</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsCRUD()
   * @generated
   * @ordered
   */
  protected boolean isCRUD = IS_CRUD_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getSuperEntity() <em>Super Entity</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSuperEntity()
   * @generated
   * @ordered
   */
  protected Entity superEntity;

  /**
   * The default value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected static final String DESCRIPTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected String description = DESCRIPTION_EDEFAULT;

  /**
   * The cached value of the '{@link #getAttributes() <em>Attributes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttributes()
   * @generated
   * @ordered
   */
  protected EList<Attribute> attributes;

  /**
   * The cached value of the '{@link #getReference() <em>Reference</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReference()
   * @generated
   * @ordered
   */
  protected EList<Reference> reference;

  /**
   * The cached value of the '{@link #getInvariance() <em>Invariance</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInvariance()
   * @generated
   * @ordered
   */
  protected EList<Invariance> invariance;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EntityImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ECModelPackage.Literals.ENTITY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isIsCRUD()
  {
    return isCRUD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIsCRUD(boolean newIsCRUD)
  {
    boolean oldIsCRUD = isCRUD;
    isCRUD = newIsCRUD;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ECModelPackage.ENTITY__IS_CRUD, oldIsCRUD, isCRUD));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ECModelPackage.ENTITY__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entity getSuperEntity()
  {
    if (superEntity != null && superEntity.eIsProxy())
    {
      InternalEObject oldSuperEntity = (InternalEObject)superEntity;
      superEntity = (Entity)eResolveProxy(oldSuperEntity);
      if (superEntity != oldSuperEntity)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ECModelPackage.ENTITY__SUPER_ENTITY, oldSuperEntity, superEntity));
      }
    }
    return superEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Entity basicGetSuperEntity()
  {
    return superEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSuperEntity(Entity newSuperEntity)
  {
    Entity oldSuperEntity = superEntity;
    superEntity = newSuperEntity;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ECModelPackage.ENTITY__SUPER_ENTITY, oldSuperEntity, superEntity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDescription()
  {
    return description;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDescription(String newDescription)
  {
    String oldDescription = description;
    description = newDescription;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ECModelPackage.ENTITY__DESCRIPTION, oldDescription, description));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Attribute> getAttributes()
  {
    if (attributes == null)
    {
      attributes = new EObjectContainmentEList<Attribute>(Attribute.class, this, ECModelPackage.ENTITY__ATTRIBUTES);
    }
    return attributes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Reference> getReference()
  {
    if (reference == null)
    {
      reference = new EObjectContainmentEList<Reference>(Reference.class, this, ECModelPackage.ENTITY__REFERENCE);
    }
    return reference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Invariance> getInvariance()
  {
    if (invariance == null)
    {
      invariance = new EObjectContainmentEList<Invariance>(Invariance.class, this, ECModelPackage.ENTITY__INVARIANCE);
    }
    return invariance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ECModelPackage.ENTITY__ATTRIBUTES:
        return ((InternalEList<?>)getAttributes()).basicRemove(otherEnd, msgs);
      case ECModelPackage.ENTITY__REFERENCE:
        return ((InternalEList<?>)getReference()).basicRemove(otherEnd, msgs);
      case ECModelPackage.ENTITY__INVARIANCE:
        return ((InternalEList<?>)getInvariance()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ECModelPackage.ENTITY__IS_CRUD:
        return isIsCRUD();
      case ECModelPackage.ENTITY__NAME:
        return getName();
      case ECModelPackage.ENTITY__SUPER_ENTITY:
        if (resolve) return getSuperEntity();
        return basicGetSuperEntity();
      case ECModelPackage.ENTITY__DESCRIPTION:
        return getDescription();
      case ECModelPackage.ENTITY__ATTRIBUTES:
        return getAttributes();
      case ECModelPackage.ENTITY__REFERENCE:
        return getReference();
      case ECModelPackage.ENTITY__INVARIANCE:
        return getInvariance();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ECModelPackage.ENTITY__IS_CRUD:
        setIsCRUD((Boolean)newValue);
        return;
      case ECModelPackage.ENTITY__NAME:
        setName((String)newValue);
        return;
      case ECModelPackage.ENTITY__SUPER_ENTITY:
        setSuperEntity((Entity)newValue);
        return;
      case ECModelPackage.ENTITY__DESCRIPTION:
        setDescription((String)newValue);
        return;
      case ECModelPackage.ENTITY__ATTRIBUTES:
        getAttributes().clear();
        getAttributes().addAll((Collection<? extends Attribute>)newValue);
        return;
      case ECModelPackage.ENTITY__REFERENCE:
        getReference().clear();
        getReference().addAll((Collection<? extends Reference>)newValue);
        return;
      case ECModelPackage.ENTITY__INVARIANCE:
        getInvariance().clear();
        getInvariance().addAll((Collection<? extends Invariance>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ECModelPackage.ENTITY__IS_CRUD:
        setIsCRUD(IS_CRUD_EDEFAULT);
        return;
      case ECModelPackage.ENTITY__NAME:
        setName(NAME_EDEFAULT);
        return;
      case ECModelPackage.ENTITY__SUPER_ENTITY:
        setSuperEntity((Entity)null);
        return;
      case ECModelPackage.ENTITY__DESCRIPTION:
        setDescription(DESCRIPTION_EDEFAULT);
        return;
      case ECModelPackage.ENTITY__ATTRIBUTES:
        getAttributes().clear();
        return;
      case ECModelPackage.ENTITY__REFERENCE:
        getReference().clear();
        return;
      case ECModelPackage.ENTITY__INVARIANCE:
        getInvariance().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ECModelPackage.ENTITY__IS_CRUD:
        return isCRUD != IS_CRUD_EDEFAULT;
      case ECModelPackage.ENTITY__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case ECModelPackage.ENTITY__SUPER_ENTITY:
        return superEntity != null;
      case ECModelPackage.ENTITY__DESCRIPTION:
        return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);
      case ECModelPackage.ENTITY__ATTRIBUTES:
        return attributes != null && !attributes.isEmpty();
      case ECModelPackage.ENTITY__REFERENCE:
        return reference != null && !reference.isEmpty();
      case ECModelPackage.ENTITY__INVARIANCE:
        return invariance != null && !invariance.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (isCRUD: ");
    result.append(isCRUD);
    result.append(", name: ");
    result.append(name);
    result.append(", description: ");
    result.append(description);
    result.append(')');
    return result.toString();
  }

} //EntityImpl
