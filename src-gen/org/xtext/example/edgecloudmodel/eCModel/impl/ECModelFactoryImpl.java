/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.edgecloudmodel.eCModel.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.edgecloudmodel.eCModel.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ECModelFactoryImpl extends EFactoryImpl implements ECModelFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ECModelFactory init()
  {
    try
    {
      ECModelFactory theECModelFactory = (ECModelFactory)EPackage.Registry.INSTANCE.getEFactory(ECModelPackage.eNS_URI);
      if (theECModelFactory != null)
      {
        return theECModelFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ECModelFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ECModelFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ECModelPackage.REQUIREMENT_MODEL: return createRequirementModel();
      case ECModelPackage.INTERACTION: return createInteraction();
      case ECModelPackage.MESSAGE: return createMessage();
      case ECModelPackage.CALL_MESSAGE: return createCallMessage();
      case ECModelPackage.RETURN_MESSAGE: return createReturnMessage();
      case ECModelPackage.EXECUTION: return createExecution();
      case ECModelPackage.COMBINED_FRAGMENT: return createCombinedFragment();
      case ECModelPackage.OPERAND: return createOperand();
      case ECModelPackage.ABSTRACT_END: return createAbstractEnd();
      case ECModelPackage.MIX_END: return createMixEnd();
      case ECModelPackage.MIX_OP_AND_CF_END: return createMixOpAndCFEnd();
      case ECModelPackage.MESSAGE_END: return createMessageEnd();
      case ECModelPackage.MULTI_END: return createMultiEnd();
      case ECModelPackage.EXECUTION_END: return createExecutionEnd();
      case ECModelPackage.COMBINED_FRAGMENT_END: return createCombinedFragmentEnd();
      case ECModelPackage.OPERAND_END: return createOperandEnd();
      case ECModelPackage.DOMAIN_MODEL: return createDomainModel();
      case ECModelPackage.USE_CASE_MODEL: return createUseCaseModel();
      case ECModelPackage.ACTOR: return createActor();
      case ECModelPackage.UC: return createUC();
      case ECModelPackage.SERVICE: return createService();
      case ECModelPackage.PARTICIPANT: return createParticipant();
      case ECModelPackage.WORKFLOW: return createWorkflow();
      case ECModelPackage.PARTITION: return createPartition();
      case ECModelPackage.WORKFLOW_EXP: return createWorkflowExp();
      case ECModelPackage.PARTITION_ACTION: return createPartitionAction();
      case ECModelPackage.JOIN_EXP: return createJoinExp();
      case ECModelPackage.ACTIVITY_FINAL: return createActivityFinal();
      case ECModelPackage.INITAL_NODE: return createInitalNode();
      case ECModelPackage.FORK_NODE: return createForkNode();
      case ECModelPackage.JOIN_NODE: return createJoinNode();
      case ECModelPackage.COMPLEX_OPEARTION: return createComplexOpeartion();
      case ECModelPackage.SIMPLE_OPERATION: return createSimpleOperation();
      case ECModelPackage.LOOP_EXP: return createLoopExp();
      case ECModelPackage.SWITCH_EXP: return createSwitchExp();
      case ECModelPackage.SWITCH_CASE: return createSwitchCase();
      case ECModelPackage.SWITCH_DEFAULT: return createSwitchDefault();
      case ECModelPackage.OPERATION: return createOperation();
      case ECModelPackage.PARAMETER: return createParameter();
      case ECModelPackage.ENTITY: return createEntity();
      case ECModelPackage.ATTRIBUTE: return createAttribute();
      case ECModelPackage.REFERENCE: return createReference();
      case ECModelPackage.TYPE_CS: return createTypeCS();
      case ECModelPackage.INVARIANCE: return createInvariance();
      case ECModelPackage.ENTITY_TYPE: return createEntityType();
      case ECModelPackage.ENUM_ENTITY: return createEnumEntity();
      case ECModelPackage.ENUM_ITEM: return createEnumItem();
      case ECModelPackage.CONTRACT: return createContract();
      case ECModelPackage.DEFINITION: return createDefinition();
      case ECModelPackage.PRECONDITION: return createPrecondition();
      case ECModelPackage.POSTCONDITION: return createPostcondition();
      case ECModelPackage.OCL_EXPRESSION_CS: return createOCLExpressionCS();
      case ECModelPackage.NESTED_EXP_CS: return createNestedExpCS();
      case ECModelPackage.LOGIC_FORMULA_EXP_CS: return createLogicFormulaExpCS();
      case ECModelPackage.ATOMIC_EXPRESSION: return createAtomicExpression();
      case ECModelPackage.LEFT_SUB_ATOMIC_EXPRESSION: return createLeftSubAtomicExpression();
      case ECModelPackage.RIGHT_SUB_ATOMIC_EXPRESSION: return createRightSubAtomicExpression();
      case ECModelPackage.CALL_EXP_CS: return createCallExpCS();
      case ECModelPackage.LOOP_EXP_CS: return createLoopExpCS();
      case ECModelPackage.ITERATOR_EXP_CS: return createIteratorExpCS();
      case ECModelPackage.ENTITY_ATTRIBUTE_NAME: return createEntityAttributeName();
      case ECModelPackage.ARGUMENTS_CS: return createArgumentsCS();
      case ECModelPackage.FEATURE_CALL_EXP_CS: return createFeatureCallExpCS();
      case ECModelPackage.STANDARD_NAVIGATION_CALL_EXP_CS: return createStandardNavigationCallExpCS();
      case ECModelPackage.STANDARD_OPERATION_EXP_CS: return createStandardOperationExpCS();
      case ECModelPackage.PREDEFINE_OP: return createPredefineOp();
      case ECModelPackage.STANDARD_NONE_PARAMETER_OPERATION: return createStandardNoneParameterOperation();
      case ECModelPackage.STANDARD_PARAMETER_OPERATION: return createStandardParameterOperation();
      case ECModelPackage.STANDARD_COLLECTION_OPERATION: return createStandardCollectionOperation();
      case ECModelPackage.STANDARD_DATE_OPERATION: return createStandardDateOperation();
      case ECModelPackage.CLASSIFER_CALL_EXP_CS: return createClassiferCallExpCS();
      case ECModelPackage.PROPERTY_CALL_EXP_CS: return createPropertyCallExpCS();
      case ECModelPackage.OPERATION_CALL_EXP_CS: return createOperationCallExpCS();
      case ECModelPackage.OPERATION_PARAMETERS: return createOperationParameters();
      case ECModelPackage.VARIABLE_EXP_CS: return createVariableExpCS();
      case ECModelPackage.IF_EXP_CS: return createIfExpCS();
      case ECModelPackage.LET_EXP_CS: return createLetExpCS();
      case ECModelPackage.VARIABLE_DECLARATION_CS: return createVariableDeclarationCS();
      case ECModelPackage.LITERAL_EXP_CS: return createLiteralExpCS();
      case ECModelPackage.ENUM_LITERAL_EXP_CS: return createEnumLiteralExpCS();
      case ECModelPackage.TUPLE_LITERAL_EXP_CS: return createTupleLiteralExpCS();
      case ECModelPackage.TUPLE_TYPE_CS: return createTupleTypeCS();
      case ECModelPackage.COLLECTION_TYPE_CS: return createCollectionTypeCS();
      case ECModelPackage.COLLECTION_LITERAL_EXP_CS: return createCollectionLiteralExpCS();
      case ECModelPackage.COLLECTION_LITERAL_PART_CS: return createCollectionLiteralPartCS();
      case ECModelPackage.COLLECTION_RANGE_CS: return createCollectionRangeCS();
      case ECModelPackage.COLLECTION_ITEM: return createCollectionItem();
      case ECModelPackage.PRIMITIVE_LITERAL_EXP_CS: return createPrimitiveLiteralExpCS();
      case ECModelPackage.NUMBER_LITERAL_EXP_CS: return createNumberLiteralExpCS();
      case ECModelPackage.BOOLEAN_LITERAL_EXP_CS: return createBooleanLiteralExpCS();
      case ECModelPackage.STRING_LITERAL_EXP_CS: return createStringLiteralExpCS();
      case ECModelPackage.NULL_LITERAL_EXP_CS: return createNullLiteralExpCS();
      case ECModelPackage.INVALID_LITERAL_EXP_CS: return createInvalidLiteralExpCS();
      case ECModelPackage.RESERVED_KEYWORD_CS: return createReservedKeywordCS();
      case ECModelPackage.COLLECTION_TYPE_IDENTIFIER_CS: return createCollectionTypeIdentifierCS();
      case ECModelPackage.PRIMITIVE_TYPE_CS: return createPrimitiveTypeCS();
      case ECModelPackage.OCL_TYPE_CS: return createOclTypeCS();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RequirementModel createRequirementModel()
  {
    RequirementModelImpl requirementModel = new RequirementModelImpl();
    return requirementModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Interaction createInteraction()
  {
    InteractionImpl interaction = new InteractionImpl();
    return interaction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Message createMessage()
  {
    MessageImpl message = new MessageImpl();
    return message;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CallMessage createCallMessage()
  {
    CallMessageImpl callMessage = new CallMessageImpl();
    return callMessage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReturnMessage createReturnMessage()
  {
    ReturnMessageImpl returnMessage = new ReturnMessageImpl();
    return returnMessage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Execution createExecution()
  {
    ExecutionImpl execution = new ExecutionImpl();
    return execution;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CombinedFragment createCombinedFragment()
  {
    CombinedFragmentImpl combinedFragment = new CombinedFragmentImpl();
    return combinedFragment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operand createOperand()
  {
    OperandImpl operand = new OperandImpl();
    return operand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractEnd createAbstractEnd()
  {
    AbstractEndImpl abstractEnd = new AbstractEndImpl();
    return abstractEnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MixEnd createMixEnd()
  {
    MixEndImpl mixEnd = new MixEndImpl();
    return mixEnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MixOpAndCFEnd createMixOpAndCFEnd()
  {
    MixOpAndCFEndImpl mixOpAndCFEnd = new MixOpAndCFEndImpl();
    return mixOpAndCFEnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MessageEnd createMessageEnd()
  {
    MessageEndImpl messageEnd = new MessageEndImpl();
    return messageEnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MultiEnd createMultiEnd()
  {
    MultiEndImpl multiEnd = new MultiEndImpl();
    return multiEnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExecutionEnd createExecutionEnd()
  {
    ExecutionEndImpl executionEnd = new ExecutionEndImpl();
    return executionEnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CombinedFragmentEnd createCombinedFragmentEnd()
  {
    CombinedFragmentEndImpl combinedFragmentEnd = new CombinedFragmentEndImpl();
    return combinedFragmentEnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperandEnd createOperandEnd()
  {
    OperandEndImpl operandEnd = new OperandEndImpl();
    return operandEnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DomainModel createDomainModel()
  {
    DomainModelImpl domainModel = new DomainModelImpl();
    return domainModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UseCaseModel createUseCaseModel()
  {
    UseCaseModelImpl useCaseModel = new UseCaseModelImpl();
    return useCaseModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Actor createActor()
  {
    ActorImpl actor = new ActorImpl();
    return actor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UC createUC()
  {
    UCImpl uc = new UCImpl();
    return uc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Service createService()
  {
    ServiceImpl service = new ServiceImpl();
    return service;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Participant createParticipant()
  {
    ParticipantImpl participant = new ParticipantImpl();
    return participant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Workflow createWorkflow()
  {
    WorkflowImpl workflow = new WorkflowImpl();
    return workflow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Partition createPartition()
  {
    PartitionImpl partition = new PartitionImpl();
    return partition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WorkflowExp createWorkflowExp()
  {
    WorkflowExpImpl workflowExp = new WorkflowExpImpl();
    return workflowExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PartitionAction createPartitionAction()
  {
    PartitionActionImpl partitionAction = new PartitionActionImpl();
    return partitionAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JoinExp createJoinExp()
  {
    JoinExpImpl joinExp = new JoinExpImpl();
    return joinExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActivityFinal createActivityFinal()
  {
    ActivityFinalImpl activityFinal = new ActivityFinalImpl();
    return activityFinal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InitalNode createInitalNode()
  {
    InitalNodeImpl initalNode = new InitalNodeImpl();
    return initalNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ForkNode createForkNode()
  {
    ForkNodeImpl forkNode = new ForkNodeImpl();
    return forkNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JoinNode createJoinNode()
  {
    JoinNodeImpl joinNode = new JoinNodeImpl();
    return joinNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComplexOpeartion createComplexOpeartion()
  {
    ComplexOpeartionImpl complexOpeartion = new ComplexOpeartionImpl();
    return complexOpeartion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleOperation createSimpleOperation()
  {
    SimpleOperationImpl simpleOperation = new SimpleOperationImpl();
    return simpleOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LoopExp createLoopExp()
  {
    LoopExpImpl loopExp = new LoopExpImpl();
    return loopExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SwitchExp createSwitchExp()
  {
    SwitchExpImpl switchExp = new SwitchExpImpl();
    return switchExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SwitchCase createSwitchCase()
  {
    SwitchCaseImpl switchCase = new SwitchCaseImpl();
    return switchCase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SwitchDefault createSwitchDefault()
  {
    SwitchDefaultImpl switchDefault = new SwitchDefaultImpl();
    return switchDefault;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operation createOperation()
  {
    OperationImpl operation = new OperationImpl();
    return operation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entity createEntity()
  {
    EntityImpl entity = new EntityImpl();
    return entity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Reference createReference()
  {
    ReferenceImpl reference = new ReferenceImpl();
    return reference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeCS createTypeCS()
  {
    TypeCSImpl typeCS = new TypeCSImpl();
    return typeCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Invariance createInvariance()
  {
    InvarianceImpl invariance = new InvarianceImpl();
    return invariance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EntityType createEntityType()
  {
    EntityTypeImpl entityType = new EntityTypeImpl();
    return entityType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnumEntity createEnumEntity()
  {
    EnumEntityImpl enumEntity = new EnumEntityImpl();
    return enumEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnumItem createEnumItem()
  {
    EnumItemImpl enumItem = new EnumItemImpl();
    return enumItem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Contract createContract()
  {
    ContractImpl contract = new ContractImpl();
    return contract;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Definition createDefinition()
  {
    DefinitionImpl definition = new DefinitionImpl();
    return definition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Precondition createPrecondition()
  {
    PreconditionImpl precondition = new PreconditionImpl();
    return precondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Postcondition createPostcondition()
  {
    PostconditionImpl postcondition = new PostconditionImpl();
    return postcondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OCLExpressionCS createOCLExpressionCS()
  {
    OCLExpressionCSImpl oclExpressionCS = new OCLExpressionCSImpl();
    return oclExpressionCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NestedExpCS createNestedExpCS()
  {
    NestedExpCSImpl nestedExpCS = new NestedExpCSImpl();
    return nestedExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicFormulaExpCS createLogicFormulaExpCS()
  {
    LogicFormulaExpCSImpl logicFormulaExpCS = new LogicFormulaExpCSImpl();
    return logicFormulaExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AtomicExpression createAtomicExpression()
  {
    AtomicExpressionImpl atomicExpression = new AtomicExpressionImpl();
    return atomicExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LeftSubAtomicExpression createLeftSubAtomicExpression()
  {
    LeftSubAtomicExpressionImpl leftSubAtomicExpression = new LeftSubAtomicExpressionImpl();
    return leftSubAtomicExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RightSubAtomicExpression createRightSubAtomicExpression()
  {
    RightSubAtomicExpressionImpl rightSubAtomicExpression = new RightSubAtomicExpressionImpl();
    return rightSubAtomicExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CallExpCS createCallExpCS()
  {
    CallExpCSImpl callExpCS = new CallExpCSImpl();
    return callExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LoopExpCS createLoopExpCS()
  {
    LoopExpCSImpl loopExpCS = new LoopExpCSImpl();
    return loopExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IteratorExpCS createIteratorExpCS()
  {
    IteratorExpCSImpl iteratorExpCS = new IteratorExpCSImpl();
    return iteratorExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EntityAttributeName createEntityAttributeName()
  {
    EntityAttributeNameImpl entityAttributeName = new EntityAttributeNameImpl();
    return entityAttributeName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArgumentsCS createArgumentsCS()
  {
    ArgumentsCSImpl argumentsCS = new ArgumentsCSImpl();
    return argumentsCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FeatureCallExpCS createFeatureCallExpCS()
  {
    FeatureCallExpCSImpl featureCallExpCS = new FeatureCallExpCSImpl();
    return featureCallExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StandardNavigationCallExpCS createStandardNavigationCallExpCS()
  {
    StandardNavigationCallExpCSImpl standardNavigationCallExpCS = new StandardNavigationCallExpCSImpl();
    return standardNavigationCallExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StandardOperationExpCS createStandardOperationExpCS()
  {
    StandardOperationExpCSImpl standardOperationExpCS = new StandardOperationExpCSImpl();
    return standardOperationExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PredefineOp createPredefineOp()
  {
    PredefineOpImpl predefineOp = new PredefineOpImpl();
    return predefineOp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StandardNoneParameterOperation createStandardNoneParameterOperation()
  {
    StandardNoneParameterOperationImpl standardNoneParameterOperation = new StandardNoneParameterOperationImpl();
    return standardNoneParameterOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StandardParameterOperation createStandardParameterOperation()
  {
    StandardParameterOperationImpl standardParameterOperation = new StandardParameterOperationImpl();
    return standardParameterOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StandardCollectionOperation createStandardCollectionOperation()
  {
    StandardCollectionOperationImpl standardCollectionOperation = new StandardCollectionOperationImpl();
    return standardCollectionOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StandardDateOperation createStandardDateOperation()
  {
    StandardDateOperationImpl standardDateOperation = new StandardDateOperationImpl();
    return standardDateOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClassiferCallExpCS createClassiferCallExpCS()
  {
    ClassiferCallExpCSImpl classiferCallExpCS = new ClassiferCallExpCSImpl();
    return classiferCallExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyCallExpCS createPropertyCallExpCS()
  {
    PropertyCallExpCSImpl propertyCallExpCS = new PropertyCallExpCSImpl();
    return propertyCallExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationCallExpCS createOperationCallExpCS()
  {
    OperationCallExpCSImpl operationCallExpCS = new OperationCallExpCSImpl();
    return operationCallExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationParameters createOperationParameters()
  {
    OperationParametersImpl operationParameters = new OperationParametersImpl();
    return operationParameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableExpCS createVariableExpCS()
  {
    VariableExpCSImpl variableExpCS = new VariableExpCSImpl();
    return variableExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IfExpCS createIfExpCS()
  {
    IfExpCSImpl ifExpCS = new IfExpCSImpl();
    return ifExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LetExpCS createLetExpCS()
  {
    LetExpCSImpl letExpCS = new LetExpCSImpl();
    return letExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDeclarationCS createVariableDeclarationCS()
  {
    VariableDeclarationCSImpl variableDeclarationCS = new VariableDeclarationCSImpl();
    return variableDeclarationCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LiteralExpCS createLiteralExpCS()
  {
    LiteralExpCSImpl literalExpCS = new LiteralExpCSImpl();
    return literalExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnumLiteralExpCS createEnumLiteralExpCS()
  {
    EnumLiteralExpCSImpl enumLiteralExpCS = new EnumLiteralExpCSImpl();
    return enumLiteralExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TupleLiteralExpCS createTupleLiteralExpCS()
  {
    TupleLiteralExpCSImpl tupleLiteralExpCS = new TupleLiteralExpCSImpl();
    return tupleLiteralExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TupleTypeCS createTupleTypeCS()
  {
    TupleTypeCSImpl tupleTypeCS = new TupleTypeCSImpl();
    return tupleTypeCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CollectionTypeCS createCollectionTypeCS()
  {
    CollectionTypeCSImpl collectionTypeCS = new CollectionTypeCSImpl();
    return collectionTypeCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CollectionLiteralExpCS createCollectionLiteralExpCS()
  {
    CollectionLiteralExpCSImpl collectionLiteralExpCS = new CollectionLiteralExpCSImpl();
    return collectionLiteralExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CollectionLiteralPartCS createCollectionLiteralPartCS()
  {
    CollectionLiteralPartCSImpl collectionLiteralPartCS = new CollectionLiteralPartCSImpl();
    return collectionLiteralPartCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CollectionRangeCS createCollectionRangeCS()
  {
    CollectionRangeCSImpl collectionRangeCS = new CollectionRangeCSImpl();
    return collectionRangeCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CollectionItem createCollectionItem()
  {
    CollectionItemImpl collectionItem = new CollectionItemImpl();
    return collectionItem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrimitiveLiteralExpCS createPrimitiveLiteralExpCS()
  {
    PrimitiveLiteralExpCSImpl primitiveLiteralExpCS = new PrimitiveLiteralExpCSImpl();
    return primitiveLiteralExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumberLiteralExpCS createNumberLiteralExpCS()
  {
    NumberLiteralExpCSImpl numberLiteralExpCS = new NumberLiteralExpCSImpl();
    return numberLiteralExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanLiteralExpCS createBooleanLiteralExpCS()
  {
    BooleanLiteralExpCSImpl booleanLiteralExpCS = new BooleanLiteralExpCSImpl();
    return booleanLiteralExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringLiteralExpCS createStringLiteralExpCS()
  {
    StringLiteralExpCSImpl stringLiteralExpCS = new StringLiteralExpCSImpl();
    return stringLiteralExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NullLiteralExpCS createNullLiteralExpCS()
  {
    NullLiteralExpCSImpl nullLiteralExpCS = new NullLiteralExpCSImpl();
    return nullLiteralExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InvalidLiteralExpCS createInvalidLiteralExpCS()
  {
    InvalidLiteralExpCSImpl invalidLiteralExpCS = new InvalidLiteralExpCSImpl();
    return invalidLiteralExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReservedKeywordCS createReservedKeywordCS()
  {
    ReservedKeywordCSImpl reservedKeywordCS = new ReservedKeywordCSImpl();
    return reservedKeywordCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CollectionTypeIdentifierCS createCollectionTypeIdentifierCS()
  {
    CollectionTypeIdentifierCSImpl collectionTypeIdentifierCS = new CollectionTypeIdentifierCSImpl();
    return collectionTypeIdentifierCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrimitiveTypeCS createPrimitiveTypeCS()
  {
    PrimitiveTypeCSImpl primitiveTypeCS = new PrimitiveTypeCSImpl();
    return primitiveTypeCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OclTypeCS createOclTypeCS()
  {
    OclTypeCSImpl oclTypeCS = new OclTypeCSImpl();
    return oclTypeCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ECModelPackage getECModelPackage()
  {
    return (ECModelPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ECModelPackage getPackage()
  {
    return ECModelPackage.eINSTANCE;
  }

} //ECModelFactoryImpl
