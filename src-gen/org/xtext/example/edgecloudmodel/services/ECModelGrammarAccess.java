/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.edgecloudmodel.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ECModelGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class RequirementModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.RequirementModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cRequirementsModelKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameSimpleNameCSParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cDescriptionKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDescriptionDOUBLE_QUOTED_STRINGTerminalRuleCall_1_1_0 = (RuleCall)cDescriptionAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cUseCaseModelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUseCaseModelUseCaseModelParserRuleCall_2_0 = (RuleCall)cUseCaseModelAssignment_2.eContents().get(0);
		private final Assignment cDomainModelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDomainModelDomainModelParserRuleCall_3_0 = (RuleCall)cDomainModelAssignment_3.eContents().get(0);
		
		//RequirementModel returns RequirementModel:
		//    ('RequirementsModel::' name=SimpleNameCS)? ('@Description('description=DOUBLE_QUOTED_STRING')')?
		//    //    name = SimpleNameCS
		//    //    lifeline += Lifeline*
		//        UseCaseModel = UseCaseModel
		//        DomainModel = DomainModel
		////        workflow += Workflow*
		//    //    contract += Contract*
		////        ssd += [uml::Interaction]*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('RequirementsModel::' name=SimpleNameCS)? ('@Description('description=DOUBLE_QUOTED_STRING')')?
		////    name = SimpleNameCS
		////    lifeline += Lifeline*
		//    UseCaseModel = UseCaseModel
		//    DomainModel = DomainModel
		public Group getGroup() { return cGroup; }
		
		//('RequirementsModel::' name=SimpleNameCS)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'RequirementsModel::'
		public Keyword getRequirementsModelKeyword_0_0() { return cRequirementsModelKeyword_0_0; }
		
		//name=SimpleNameCS
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//SimpleNameCS
		public RuleCall getNameSimpleNameCSParserRuleCall_0_1_0() { return cNameSimpleNameCSParserRuleCall_0_1_0; }
		
		//('@Description('description=DOUBLE_QUOTED_STRING')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'@Description('
		public Keyword getDescriptionKeyword_1_0() { return cDescriptionKeyword_1_0; }
		
		//description=DOUBLE_QUOTED_STRING
		public Assignment getDescriptionAssignment_1_1() { return cDescriptionAssignment_1_1; }
		
		//DOUBLE_QUOTED_STRING
		public RuleCall getDescriptionDOUBLE_QUOTED_STRINGTerminalRuleCall_1_1_0() { return cDescriptionDOUBLE_QUOTED_STRINGTerminalRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		////    name = SimpleNameCS
		////    lifeline += Lifeline*
		//    UseCaseModel = UseCaseModel
		public Assignment getUseCaseModelAssignment_2() { return cUseCaseModelAssignment_2; }
		
		//UseCaseModel
		public RuleCall getUseCaseModelUseCaseModelParserRuleCall_2_0() { return cUseCaseModelUseCaseModelParserRuleCall_2_0; }
		
		//DomainModel = DomainModel
		public Assignment getDomainModelAssignment_3() { return cDomainModelAssignment_3; }
		
		//DomainModel
		public RuleCall getDomainModelDomainModelParserRuleCall_3_0() { return cDomainModelDomainModelParserRuleCall_3_0; }
	}
	public class InteractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.Interaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInteractionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSimpleNameCSParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cParticipantsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParticipantsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cParticipantsParticipantCrossReference_4_0 = (CrossReference)cParticipantsAssignment_4.eContents().get(0);
		private final RuleCall cParticipantsParticipantIDTerminalRuleCall_4_0_1 = (RuleCall)cParticipantsParticipantCrossReference_4_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMessagesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMessagesMessageParserRuleCall_6_0 = (RuleCall)cMessagesAssignment_6.eContents().get(0);
		private final Assignment cExecutionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cExecutionsExecutionParserRuleCall_7_0 = (RuleCall)cExecutionsAssignment_7.eContents().get(0);
		private final Assignment cCombinedFragmentsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cCombinedFragmentsCombinedFragmentParserRuleCall_8_0 = (RuleCall)cCombinedFragmentsAssignment_8.eContents().get(0);
		private final Assignment cEndsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cEndsAbstractEndParserRuleCall_9_0 = (RuleCall)cEndsAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		///* ----------------- Sequence Diagram ------------- */
		//Interaction returns Interaction:
		//    'Interaction' name=SimpleNameCS '{'
		//    '[Participants:' participants+=[Participant]* ']'
		//    messages+=Message*
		//    executions+=Execution*
		//    combinedFragments+=CombinedFragment*
		//    ends+=AbstractEnd*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Interaction' name=SimpleNameCS '{'
		//'[Participants:' participants+=[Participant]* ']'
		//messages+=Message*
		//executions+=Execution*
		//combinedFragments+=CombinedFragment*
		//ends+=AbstractEnd*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Interaction'
		public Keyword getInteractionKeyword_0() { return cInteractionKeyword_0; }
		
		//name=SimpleNameCS
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SimpleNameCS
		public RuleCall getNameSimpleNameCSParserRuleCall_1_0() { return cNameSimpleNameCSParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'[Participants:'
		public Keyword getParticipantsKeyword_3() { return cParticipantsKeyword_3; }
		
		//participants+=[Participant]*
		public Assignment getParticipantsAssignment_4() { return cParticipantsAssignment_4; }
		
		//[Participant]
		public CrossReference getParticipantsParticipantCrossReference_4_0() { return cParticipantsParticipantCrossReference_4_0; }
		
		//ID
		public RuleCall getParticipantsParticipantIDTerminalRuleCall_4_0_1() { return cParticipantsParticipantIDTerminalRuleCall_4_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
		
		//messages+=Message*
		public Assignment getMessagesAssignment_6() { return cMessagesAssignment_6; }
		
		//Message
		public RuleCall getMessagesMessageParserRuleCall_6_0() { return cMessagesMessageParserRuleCall_6_0; }
		
		//executions+=Execution*
		public Assignment getExecutionsAssignment_7() { return cExecutionsAssignment_7; }
		
		//Execution
		public RuleCall getExecutionsExecutionParserRuleCall_7_0() { return cExecutionsExecutionParserRuleCall_7_0; }
		
		//combinedFragments+=CombinedFragment*
		public Assignment getCombinedFragmentsAssignment_8() { return cCombinedFragmentsAssignment_8; }
		
		//CombinedFragment
		public RuleCall getCombinedFragmentsCombinedFragmentParserRuleCall_8_0() { return cCombinedFragmentsCombinedFragmentParserRuleCall_8_0; }
		
		//ends+=AbstractEnd*
		public Assignment getEndsAssignment_9() { return cEndsAssignment_9; }
		
		//AbstractEnd
		public RuleCall getEndsAbstractEndParserRuleCall_9_0() { return cEndsAbstractEndParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.Message");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCallMessageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReturnMessageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Message:
		//    CallMessage | ReturnMessage
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//CallMessage | ReturnMessage
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CallMessage
		public RuleCall getCallMessageParserRuleCall_0() { return cCallMessageParserRuleCall_0; }
		
		//ReturnMessage
		public RuleCall getReturnMessageParserRuleCall_1() { return cReturnMessageParserRuleCall_1; }
	}
	public class CallMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.CallMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCallMessageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSimpleNameCSParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cOpOperationCrossReference_3_0 = (CrossReference)cOpAssignment_3.eContents().get(0);
		private final RuleCall cOpOperationIDTerminalRuleCall_3_0_1 = (RuleCall)cOpOperationCrossReference_3_0.eContents().get(1);
		private final Assignment cSendingEndAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSendingEndMixEndCrossReference_4_0 = (CrossReference)cSendingEndAssignment_4.eContents().get(0);
		private final RuleCall cSendingEndMixEndIDTerminalRuleCall_4_0_1 = (RuleCall)cSendingEndMixEndCrossReference_4_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cReceivingEndAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cReceivingEndMixEndCrossReference_6_0 = (CrossReference)cReceivingEndAssignment_6.eContents().get(0);
		private final RuleCall cReceivingEndMixEndIDTerminalRuleCall_6_0_1 = (RuleCall)cReceivingEndMixEndCrossReference_6_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//CallMessage:
		//    'CallMessage::' name=SimpleNameCS '('
		//    op=[Operation]
		//    sendingEnd=[MixEnd] '->'
		//    receivingEnd=[MixEnd]
		//    ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'CallMessage::' name=SimpleNameCS '('
		//op=[Operation]
		//sendingEnd=[MixEnd] '->'
		//receivingEnd=[MixEnd]
		//')'
		public Group getGroup() { return cGroup; }
		
		//'CallMessage::'
		public Keyword getCallMessageKeyword_0() { return cCallMessageKeyword_0; }
		
		//name=SimpleNameCS
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SimpleNameCS
		public RuleCall getNameSimpleNameCSParserRuleCall_1_0() { return cNameSimpleNameCSParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//op=[Operation]
		public Assignment getOpAssignment_3() { return cOpAssignment_3; }
		
		//[Operation]
		public CrossReference getOpOperationCrossReference_3_0() { return cOpOperationCrossReference_3_0; }
		
		//ID
		public RuleCall getOpOperationIDTerminalRuleCall_3_0_1() { return cOpOperationIDTerminalRuleCall_3_0_1; }
		
		//sendingEnd=[MixEnd]
		public Assignment getSendingEndAssignment_4() { return cSendingEndAssignment_4; }
		
		//[MixEnd]
		public CrossReference getSendingEndMixEndCrossReference_4_0() { return cSendingEndMixEndCrossReference_4_0; }
		
		//ID
		public RuleCall getSendingEndMixEndIDTerminalRuleCall_4_0_1() { return cSendingEndMixEndIDTerminalRuleCall_4_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_5() { return cHyphenMinusGreaterThanSignKeyword_5; }
		
		//receivingEnd=[MixEnd]
		public Assignment getReceivingEndAssignment_6() { return cReceivingEndAssignment_6; }
		
		//[MixEnd]
		public CrossReference getReceivingEndMixEndCrossReference_6_0() { return cReceivingEndMixEndCrossReference_6_0; }
		
		//ID
		public RuleCall getReceivingEndMixEndIDTerminalRuleCall_6_0_1() { return cReceivingEndMixEndIDTerminalRuleCall_6_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class ReturnMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.ReturnMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnMessageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSimpleNameCSParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSendingEndAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSendingEndMixEndCrossReference_3_0 = (CrossReference)cSendingEndAssignment_3.eContents().get(0);
		private final RuleCall cSendingEndMixEndIDTerminalRuleCall_3_0_1 = (RuleCall)cSendingEndMixEndCrossReference_3_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cReceivingEndAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cReceivingEndMixEndCrossReference_5_0 = (CrossReference)cReceivingEndAssignment_5.eContents().get(0);
		private final RuleCall cReceivingEndMixEndIDTerminalRuleCall_5_0_1 = (RuleCall)cReceivingEndMixEndCrossReference_5_0.eContents().get(1);
		private final Assignment cInvocationMessageAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cInvocationMessageMessageCrossReference_6_0 = (CrossReference)cInvocationMessageAssignment_6.eContents().get(0);
		private final RuleCall cInvocationMessageMessageIDTerminalRuleCall_6_0_1 = (RuleCall)cInvocationMessageMessageCrossReference_6_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ReturnMessage:
		//    'ReturnMessage::' name=SimpleNameCS '('
		//    sendingEnd=[MixEnd] '->'
		//    receivingEnd=[MixEnd]
		//    invocationMessage=[Message] ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'ReturnMessage::' name=SimpleNameCS '('
		//sendingEnd=[MixEnd] '->'
		//receivingEnd=[MixEnd]
		//invocationMessage=[Message] ')'
		public Group getGroup() { return cGroup; }
		
		//'ReturnMessage::'
		public Keyword getReturnMessageKeyword_0() { return cReturnMessageKeyword_0; }
		
		//name=SimpleNameCS
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SimpleNameCS
		public RuleCall getNameSimpleNameCSParserRuleCall_1_0() { return cNameSimpleNameCSParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//sendingEnd=[MixEnd]
		public Assignment getSendingEndAssignment_3() { return cSendingEndAssignment_3; }
		
		//[MixEnd]
		public CrossReference getSendingEndMixEndCrossReference_3_0() { return cSendingEndMixEndCrossReference_3_0; }
		
		//ID
		public RuleCall getSendingEndMixEndIDTerminalRuleCall_3_0_1() { return cSendingEndMixEndIDTerminalRuleCall_3_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }
		
		//receivingEnd=[MixEnd]
		public Assignment getReceivingEndAssignment_5() { return cReceivingEndAssignment_5; }
		
		//[MixEnd]
		public CrossReference getReceivingEndMixEndCrossReference_5_0() { return cReceivingEndMixEndCrossReference_5_0; }
		
		//ID
		public RuleCall getReceivingEndMixEndIDTerminalRuleCall_5_0_1() { return cReceivingEndMixEndIDTerminalRuleCall_5_0_1; }
		
		//invocationMessage=[Message]
		public Assignment getInvocationMessageAssignment_6() { return cInvocationMessageAssignment_6; }
		
		//[Message]
		public CrossReference getInvocationMessageMessageCrossReference_6_0() { return cInvocationMessageMessageCrossReference_6_0; }
		
		//ID
		public RuleCall getInvocationMessageMessageIDTerminalRuleCall_6_0_1() { return cInvocationMessageMessageIDTerminalRuleCall_6_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class ExecutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.Execution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecutionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSimpleNameCSParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOwnerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cOwnerParticipantCrossReference_3_0 = (CrossReference)cOwnerAssignment_3.eContents().get(0);
		private final RuleCall cOwnerParticipantIDTerminalRuleCall_3_0_1 = (RuleCall)cOwnerParticipantCrossReference_3_0.eContents().get(1);
		private final Assignment cStartAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cStartExecutionEndCrossReference_4_0 = (CrossReference)cStartAssignment_4.eContents().get(0);
		private final RuleCall cStartExecutionEndIDTerminalRuleCall_4_0_1 = (RuleCall)cStartExecutionEndCrossReference_4_0.eContents().get(1);
		private final Assignment cEndAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cEndExecutionEndCrossReference_5_0 = (CrossReference)cEndAssignment_5.eContents().get(0);
		private final RuleCall cEndExecutionEndIDTerminalRuleCall_5_0_1 = (RuleCall)cEndExecutionEndCrossReference_5_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Execution:
		//    'Execution::' name=SimpleNameCS '('
		//    owner=[Participant]
		//    start=[ExecutionEnd]
		//    end=[ExecutionEnd] ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Execution::' name=SimpleNameCS '('
		//owner=[Participant]
		//start=[ExecutionEnd]
		//end=[ExecutionEnd] ')'
		public Group getGroup() { return cGroup; }
		
		//'Execution::'
		public Keyword getExecutionKeyword_0() { return cExecutionKeyword_0; }
		
		//name=SimpleNameCS
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SimpleNameCS
		public RuleCall getNameSimpleNameCSParserRuleCall_1_0() { return cNameSimpleNameCSParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//owner=[Participant]
		public Assignment getOwnerAssignment_3() { return cOwnerAssignment_3; }
		
		//[Participant]
		public CrossReference getOwnerParticipantCrossReference_3_0() { return cOwnerParticipantCrossReference_3_0; }
		
		//ID
		public RuleCall getOwnerParticipantIDTerminalRuleCall_3_0_1() { return cOwnerParticipantIDTerminalRuleCall_3_0_1; }
		
		//start=[ExecutionEnd]
		public Assignment getStartAssignment_4() { return cStartAssignment_4; }
		
		//[ExecutionEnd]
		public CrossReference getStartExecutionEndCrossReference_4_0() { return cStartExecutionEndCrossReference_4_0; }
		
		//ID
		public RuleCall getStartExecutionEndIDTerminalRuleCall_4_0_1() { return cStartExecutionEndIDTerminalRuleCall_4_0_1; }
		
		//end=[ExecutionEnd]
		public Assignment getEndAssignment_5() { return cEndAssignment_5; }
		
		//[ExecutionEnd]
		public CrossReference getEndExecutionEndCrossReference_5_0() { return cEndExecutionEndCrossReference_5_0; }
		
		//ID
		public RuleCall getEndExecutionEndIDTerminalRuleCall_5_0_1() { return cEndExecutionEndIDTerminalRuleCall_5_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class CombinedFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.CombinedFragment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCombinedFragmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSimpleNameCSParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorOperatorParserRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cParticipantsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCoveredParticipantsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cCoveredParticipantsParticipantCrossReference_6_0 = (CrossReference)cCoveredParticipantsAssignment_6.eContents().get(0);
		private final RuleCall cCoveredParticipantsParticipantIDTerminalRuleCall_6_0_1 = (RuleCall)cCoveredParticipantsParticipantCrossReference_6_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cStartAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cStartCombinedFragmentEndCrossReference_8_0 = (CrossReference)cStartAssignment_8.eContents().get(0);
		private final RuleCall cStartCombinedFragmentEndIDTerminalRuleCall_8_0_1 = (RuleCall)cStartCombinedFragmentEndCrossReference_8_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cFinishAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final CrossReference cFinishCombinedFragmentEndCrossReference_10_0 = (CrossReference)cFinishAssignment_10.eContents().get(0);
		private final RuleCall cFinishCombinedFragmentEndIDTerminalRuleCall_10_0_1 = (RuleCall)cFinishCombinedFragmentEndCrossReference_10_0.eContents().get(1);
		private final Assignment cOwnedOperandsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cOwnedOperandsOperandParserRuleCall_11_0 = (RuleCall)cOwnedOperandsAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//CombinedFragment returns CombinedFragment:
		//    'CombinedFragment::' name=SimpleNameCS '->' operator=Operator '{'
		//    '[Participants:' coveredParticipants+=[Participant]* ']'
		//    start=[CombinedFragmentEnd] '->' finish=[CombinedFragmentEnd]
		//    ownedOperands+=Operand*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'CombinedFragment::' name=SimpleNameCS '->' operator=Operator '{'
		//'[Participants:' coveredParticipants+=[Participant]* ']'
		//start=[CombinedFragmentEnd] '->' finish=[CombinedFragmentEnd]
		//ownedOperands+=Operand*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'CombinedFragment::'
		public Keyword getCombinedFragmentKeyword_0() { return cCombinedFragmentKeyword_0; }
		
		//name=SimpleNameCS
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SimpleNameCS
		public RuleCall getNameSimpleNameCSParserRuleCall_1_0() { return cNameSimpleNameCSParserRuleCall_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//operator=Operator
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//Operator
		public RuleCall getOperatorOperatorParserRuleCall_3_0() { return cOperatorOperatorParserRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//'[Participants:'
		public Keyword getParticipantsKeyword_5() { return cParticipantsKeyword_5; }
		
		//coveredParticipants+=[Participant]*
		public Assignment getCoveredParticipantsAssignment_6() { return cCoveredParticipantsAssignment_6; }
		
		//[Participant]
		public CrossReference getCoveredParticipantsParticipantCrossReference_6_0() { return cCoveredParticipantsParticipantCrossReference_6_0; }
		
		//ID
		public RuleCall getCoveredParticipantsParticipantIDTerminalRuleCall_6_0_1() { return cCoveredParticipantsParticipantIDTerminalRuleCall_6_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
		
		//start=[CombinedFragmentEnd]
		public Assignment getStartAssignment_8() { return cStartAssignment_8; }
		
		//[CombinedFragmentEnd]
		public CrossReference getStartCombinedFragmentEndCrossReference_8_0() { return cStartCombinedFragmentEndCrossReference_8_0; }
		
		//ID
		public RuleCall getStartCombinedFragmentEndIDTerminalRuleCall_8_0_1() { return cStartCombinedFragmentEndIDTerminalRuleCall_8_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_9() { return cHyphenMinusGreaterThanSignKeyword_9; }
		
		//finish=[CombinedFragmentEnd]
		public Assignment getFinishAssignment_10() { return cFinishAssignment_10; }
		
		//[CombinedFragmentEnd]
		public CrossReference getFinishCombinedFragmentEndCrossReference_10_0() { return cFinishCombinedFragmentEndCrossReference_10_0; }
		
		//ID
		public RuleCall getFinishCombinedFragmentEndIDTerminalRuleCall_10_0_1() { return cFinishCombinedFragmentEndIDTerminalRuleCall_10_0_1; }
		
		//ownedOperands+=Operand*
		public Assignment getOwnedOperandsAssignment_11() { return cOwnedOperandsAssignment_11; }
		
		//Operand
		public RuleCall getOwnedOperandsOperandParserRuleCall_11_0() { return cOwnedOperandsOperandParserRuleCall_11_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLoopKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAltKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cOptionKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Operator:
		//    'loop' | 'alt' | 'option'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'loop' | 'alt' | 'option'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'loop'
		public Keyword getLoopKeyword_0() { return cLoopKeyword_0; }
		
		//'alt'
		public Keyword getAltKeyword_1() { return cAltKeyword_1; }
		
		//'option'
		public Keyword getOptionKeyword_2() { return cOptionKeyword_2; }
	}
	public class OperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.Operand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperandKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSimpleNameCSParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStartAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cStartOperandEndCrossReference_3_0 = (CrossReference)cStartAssignment_3.eContents().get(0);
		private final RuleCall cStartOperandEndIDTerminalRuleCall_3_0_1 = (RuleCall)cStartOperandEndCrossReference_3_0.eContents().get(1);
		private final Assignment cFinishAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cFinishMixOpAndCFEndCrossReference_4_0 = (CrossReference)cFinishAssignment_4.eContents().get(0);
		private final RuleCall cFinishMixOpAndCFEndIDTerminalRuleCall_4_0_1 = (RuleCall)cFinishMixOpAndCFEndCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Operand:
		//    'Operand::' name=SimpleNameCS '('
		//    start=[OperandEnd] finish=[MixOpAndCFEnd] ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Operand::' name=SimpleNameCS '('
		//start=[OperandEnd] finish=[MixOpAndCFEnd] ')'
		public Group getGroup() { return cGroup; }
		
		//'Operand::'
		public Keyword getOperandKeyword_0() { return cOperandKeyword_0; }
		
		//name=SimpleNameCS
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SimpleNameCS
		public RuleCall getNameSimpleNameCSParserRuleCall_1_0() { return cNameSimpleNameCSParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//start=[OperandEnd]
		public Assignment getStartAssignment_3() { return cStartAssignment_3; }
		
		//[OperandEnd]
		public CrossReference getStartOperandEndCrossReference_3_0() { return cStartOperandEndCrossReference_3_0; }
		
		//ID
		public RuleCall getStartOperandEndIDTerminalRuleCall_3_0_1() { return cStartOperandEndIDTerminalRuleCall_3_0_1; }
		
		//finish=[MixOpAndCFEnd]
		public Assignment getFinishAssignment_4() { return cFinishAssignment_4; }
		
		//[MixOpAndCFEnd]
		public CrossReference getFinishMixOpAndCFEndCrossReference_4_0() { return cFinishMixOpAndCFEndCrossReference_4_0; }
		
		//ID
		public RuleCall getFinishMixOpAndCFEndIDTerminalRuleCall_4_0_1() { return cFinishMixOpAndCFEndIDTerminalRuleCall_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class AbstractEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.AbstractEnd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMixEndParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMixOpAndCFEndParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractEnd:
		//    MixEnd | MixOpAndCFEnd
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MixEnd | MixOpAndCFEnd
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MixEnd
		public RuleCall getMixEndParserRuleCall_0() { return cMixEndParserRuleCall_0; }
		
		//MixOpAndCFEnd
		public RuleCall getMixOpAndCFEndParserRuleCall_1() { return cMixOpAndCFEndParserRuleCall_1; }
	}
	public class MixEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.MixEnd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExecutionEndParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMessageEndParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MixEnd:
		//    ExecutionEnd | MessageEnd
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExecutionEnd | MessageEnd
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExecutionEnd
		public RuleCall getExecutionEndParserRuleCall_0() { return cExecutionEndParserRuleCall_0; }
		
		//MessageEnd
		public RuleCall getMessageEndParserRuleCall_1() { return cMessageEndParserRuleCall_1; }
	}
	public class MixOpAndCFEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.MixOpAndCFEnd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCombinedFragmentEndParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperandEndParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MixOpAndCFEnd:
		//    CombinedFragmentEnd | OperandEnd
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//CombinedFragmentEnd | OperandEnd
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CombinedFragmentEnd
		public RuleCall getCombinedFragmentEndParserRuleCall_0() { return cCombinedFragmentEndParserRuleCall_0; }
		
		//OperandEnd
		public RuleCall getOperandEndParserRuleCall_1() { return cOperandEndParserRuleCall_1; }
	}
	public class MessageEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.MessageEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMessageEndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSimpleNameCSParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cContextMultiEndCrossReference_3_0 = (CrossReference)cContextAssignment_3.eContents().get(0);
		private final RuleCall cContextMultiEndIDTerminalRuleCall_3_0_1 = (RuleCall)cContextMultiEndCrossReference_3_0.eContents().get(1);
		private final Assignment cMessageAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cMessageMessageCrossReference_4_0 = (CrossReference)cMessageAssignment_4.eContents().get(0);
		private final RuleCall cMessageMessageIDTerminalRuleCall_4_0_1 = (RuleCall)cMessageMessageCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MessageEnd:
		//    'MessageEnd::' name=SimpleNameCS '('
		//    context=[MultiEnd]
		//    message=[Message] ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'MessageEnd::' name=SimpleNameCS '('
		//context=[MultiEnd]
		//message=[Message] ')'
		public Group getGroup() { return cGroup; }
		
		//'MessageEnd::'
		public Keyword getMessageEndKeyword_0() { return cMessageEndKeyword_0; }
		
		//name=SimpleNameCS
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SimpleNameCS
		public RuleCall getNameSimpleNameCSParserRuleCall_1_0() { return cNameSimpleNameCSParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//context=[MultiEnd]
		public Assignment getContextAssignment_3() { return cContextAssignment_3; }
		
		//[MultiEnd]
		public CrossReference getContextMultiEndCrossReference_3_0() { return cContextMultiEndCrossReference_3_0; }
		
		//ID
		public RuleCall getContextMultiEndIDTerminalRuleCall_3_0_1() { return cContextMultiEndIDTerminalRuleCall_3_0_1; }
		
		//message=[Message]
		public Assignment getMessageAssignment_4() { return cMessageAssignment_4; }
		
		//[Message]
		public CrossReference getMessageMessageCrossReference_4_0() { return cMessageMessageCrossReference_4_0; }
		
		//ID
		public RuleCall getMessageMessageIDTerminalRuleCall_4_0_1() { return cMessageMessageIDTerminalRuleCall_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class MultiEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.MultiEnd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParticipantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExecutionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MultiEnd :
		//    Participant | Execution
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Participant | Execution
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Participant
		public RuleCall getParticipantParserRuleCall_0() { return cParticipantParserRuleCall_0; }
		
		//Execution
		public RuleCall getExecutionParserRuleCall_1() { return cExecutionParserRuleCall_1; }
	}
	public class ExecutionEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.ExecutionEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecutionEndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSimpleNameCSParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cContextMultiEndCrossReference_3_0 = (CrossReference)cContextAssignment_3.eContents().get(0);
		private final RuleCall cContextMultiEndIDTerminalRuleCall_3_0_1 = (RuleCall)cContextMultiEndCrossReference_3_0.eContents().get(1);
		private final Assignment cExecutionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cExecutionExecutionCrossReference_4_0 = (CrossReference)cExecutionAssignment_4.eContents().get(0);
		private final RuleCall cExecutionExecutionIDTerminalRuleCall_4_0_1 = (RuleCall)cExecutionExecutionCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ExecutionEnd:
		//    'ExecutionEnd::' name=SimpleNameCS '('
		//    context=[MultiEnd]
		//    execution=[Execution] ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'ExecutionEnd::' name=SimpleNameCS '('
		//context=[MultiEnd]
		//execution=[Execution] ')'
		public Group getGroup() { return cGroup; }
		
		//'ExecutionEnd::'
		public Keyword getExecutionEndKeyword_0() { return cExecutionEndKeyword_0; }
		
		//name=SimpleNameCS
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SimpleNameCS
		public RuleCall getNameSimpleNameCSParserRuleCall_1_0() { return cNameSimpleNameCSParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//context=[MultiEnd]
		public Assignment getContextAssignment_3() { return cContextAssignment_3; }
		
		//[MultiEnd]
		public CrossReference getContextMultiEndCrossReference_3_0() { return cContextMultiEndCrossReference_3_0; }
		
		//ID
		public RuleCall getContextMultiEndIDTerminalRuleCall_3_0_1() { return cContextMultiEndIDTerminalRuleCall_3_0_1; }
		
		//execution=[Execution]
		public Assignment getExecutionAssignment_4() { return cExecutionAssignment_4; }
		
		//[Execution]
		public CrossReference getExecutionExecutionCrossReference_4_0() { return cExecutionExecutionCrossReference_4_0; }
		
		//ID
		public RuleCall getExecutionExecutionIDTerminalRuleCall_4_0_1() { return cExecutionExecutionIDTerminalRuleCall_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class CombinedFragmentEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.CombinedFragmentEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCombinedFragmentEndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSimpleNameCSParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOwnerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cOwnerCombinedFragmentCrossReference_3_0 = (CrossReference)cOwnerAssignment_3.eContents().get(0);
		private final RuleCall cOwnerCombinedFragmentIDTerminalRuleCall_3_0_1 = (RuleCall)cOwnerCombinedFragmentCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CombinedFragmentEnd:
		//    'CombinedFragmentEnd::' name=SimpleNameCS '('
		//    owner=[CombinedFragment] ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'CombinedFragmentEnd::' name=SimpleNameCS '('
		//owner=[CombinedFragment] ')'
		public Group getGroup() { return cGroup; }
		
		//'CombinedFragmentEnd::'
		public Keyword getCombinedFragmentEndKeyword_0() { return cCombinedFragmentEndKeyword_0; }
		
		//name=SimpleNameCS
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SimpleNameCS
		public RuleCall getNameSimpleNameCSParserRuleCall_1_0() { return cNameSimpleNameCSParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//owner=[CombinedFragment]
		public Assignment getOwnerAssignment_3() { return cOwnerAssignment_3; }
		
		//[CombinedFragment]
		public CrossReference getOwnerCombinedFragmentCrossReference_3_0() { return cOwnerCombinedFragmentCrossReference_3_0; }
		
		//ID
		public RuleCall getOwnerCombinedFragmentIDTerminalRuleCall_3_0_1() { return cOwnerCombinedFragmentIDTerminalRuleCall_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class OperandEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.OperandEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperandEndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSimpleNameCSParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOwnerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cOwnerOperandCrossReference_3_0 = (CrossReference)cOwnerAssignment_3.eContents().get(0);
		private final RuleCall cOwnerOperandIDTerminalRuleCall_3_0_1 = (RuleCall)cOwnerOperandCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OperandEnd:
		//    'OperandEnd::' name=SimpleNameCS '('
		//    owner=[Operand] ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'OperandEnd::' name=SimpleNameCS '('
		//owner=[Operand] ')'
		public Group getGroup() { return cGroup; }
		
		//'OperandEnd::'
		public Keyword getOperandEndKeyword_0() { return cOperandEndKeyword_0; }
		
		//name=SimpleNameCS
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SimpleNameCS
		public RuleCall getNameSimpleNameCSParserRuleCall_1_0() { return cNameSimpleNameCSParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//owner=[Operand]
		public Assignment getOwnerAssignment_3() { return cOwnerAssignment_3; }
		
		//[Operand]
		public CrossReference getOwnerOperandCrossReference_3_0() { return cOwnerOperandCrossReference_3_0; }
		
		//ID
		public RuleCall getOwnerOperandIDTerminalRuleCall_3_0_1() { return cOwnerOperandIDTerminalRuleCall_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DomainModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.DomainModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDomainModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSimpleNameCSParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLabelAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLabelDOUBLE_QUOTED_STRINGTerminalRuleCall_2_1_0 = (RuleCall)cLabelAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEntityAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEntityEntityParserRuleCall_4_0 = (RuleCall)cEntityAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DomainModel returns DomainModel:
		//    'DomainModel' name=SimpleNameCS ('('label=DOUBLE_QUOTED_STRING')')? '{'
		//        entity += Entity*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'DomainModel' name=SimpleNameCS ('('label=DOUBLE_QUOTED_STRING')')? '{'
		//    entity += Entity*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'DomainModel'
		public Keyword getDomainModelKeyword_0() { return cDomainModelKeyword_0; }
		
		//name=SimpleNameCS
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SimpleNameCS
		public RuleCall getNameSimpleNameCSParserRuleCall_1_0() { return cNameSimpleNameCSParserRuleCall_1_0; }
		
		//('('label=DOUBLE_QUOTED_STRING')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//label=DOUBLE_QUOTED_STRING
		public Assignment getLabelAssignment_2_1() { return cLabelAssignment_2_1; }
		
		//DOUBLE_QUOTED_STRING
		public RuleCall getLabelDOUBLE_QUOTED_STRINGTerminalRuleCall_2_1_0() { return cLabelDOUBLE_QUOTED_STRINGTerminalRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//entity += Entity*
		public Assignment getEntityAssignment_4() { return cEntityAssignment_4; }
		
		//Entity
		public RuleCall getEntityEntityParserRuleCall_4_0() { return cEntityEntityParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class UseCaseModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.UseCaseModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseCaseModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSimpleNameCSParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLabelAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLabelDOUBLE_QUOTED_STRINGTerminalRuleCall_2_1_0 = (RuleCall)cLabelAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUcAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUcUCParserRuleCall_4_0 = (RuleCall)cUcAssignment_4.eContents().get(0);
		private final Assignment cActorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cActorActorParserRuleCall_5_0 = (RuleCall)cActorAssignment_5.eContents().get(0);
		private final Assignment cInteractionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInteractionInteractionParserRuleCall_6_0 = (RuleCall)cInteractionAssignment_6.eContents().get(0);
		private final Assignment cServiceAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cServiceServiceParserRuleCall_7_0 = (RuleCall)cServiceAssignment_7.eContents().get(0);
		private final Assignment cContractAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cContractContractParserRuleCall_8_0 = (RuleCall)cContractAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		///* ----------------- UseCase ----------------- */
		//UseCaseModel returns UseCaseModel:
		//    'UseCaseModel' name=SimpleNameCS ('('label=DOUBLE_QUOTED_STRING')')? '{'
		//        uc += UC*
		//        actor+=Actor*
		//        interaction += Interaction*
		//        service += Service*
		//        contract += Contract*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'UseCaseModel' name=SimpleNameCS ('('label=DOUBLE_QUOTED_STRING')')? '{'
		//    uc += UC*
		//    actor+=Actor*
		//    interaction += Interaction*
		//    service += Service*
		//    contract += Contract*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'UseCaseModel'
		public Keyword getUseCaseModelKeyword_0() { return cUseCaseModelKeyword_0; }
		
		//name=SimpleNameCS
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SimpleNameCS
		public RuleCall getNameSimpleNameCSParserRuleCall_1_0() { return cNameSimpleNameCSParserRuleCall_1_0; }
		
		//('('label=DOUBLE_QUOTED_STRING')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//label=DOUBLE_QUOTED_STRING
		public Assignment getLabelAssignment_2_1() { return cLabelAssignment_2_1; }
		
		//DOUBLE_QUOTED_STRING
		public RuleCall getLabelDOUBLE_QUOTED_STRINGTerminalRuleCall_2_1_0() { return cLabelDOUBLE_QUOTED_STRINGTerminalRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//uc += UC*
		public Assignment getUcAssignment_4() { return cUcAssignment_4; }
		
		//UC
		public RuleCall getUcUCParserRuleCall_4_0() { return cUcUCParserRuleCall_4_0; }
		
		//actor+=Actor*
		public Assignment getActorAssignment_5() { return cActorAssignment_5; }
		
		//Actor
		public RuleCall getActorActorParserRuleCall_5_0() { return cActorActorParserRuleCall_5_0; }
		
		//interaction += Interaction*
		public Assignment getInteractionAssignment_6() { return cInteractionAssignment_6; }
		
		//Interaction
		public RuleCall getInteractionInteractionParserRuleCall_6_0() { return cInteractionInteractionParserRuleCall_6_0; }
		
		//service += Service*
		public Assignment getServiceAssignment_7() { return cServiceAssignment_7; }
		
		//Service
		public RuleCall getServiceServiceParserRuleCall_7_0() { return cServiceServiceParserRuleCall_7_0; }
		
		//contract += Contract*
		public Assignment getContractAssignment_8() { return cContractAssignment_8; }
		
		//Contract
		public RuleCall getContractContractParserRuleCall_8_0() { return cContractContractParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.Actor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSimpleNameCSParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLabelAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLabelDOUBLE_QUOTED_STRINGTerminalRuleCall_2_1_0 = (RuleCall)cLabelAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperActorAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSuperActorActorCrossReference_3_1_0 = (CrossReference)cSuperActorAssignment_3_1.eContents().get(0);
		private final RuleCall cSuperActorActorIDTerminalRuleCall_3_1_0_1 = (RuleCall)cSuperActorActorCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cDescriptionKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDescriptionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDescriptionDOUBLE_QUOTED_STRINGTerminalRuleCall_5_1_0 = (RuleCall)cDescriptionAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cUcAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cUcUCCrossReference_6_0 = (CrossReference)cUcAssignment_6.eContents().get(0);
		private final RuleCall cUcUCIDTerminalRuleCall_6_0_1 = (RuleCall)cUcUCCrossReference_6_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Actor returns Actor:
		////
		//    'Actor' name=SimpleNameCS ('('label=DOUBLE_QUOTED_STRING')')? ('extends' superActor=[Actor])?'{'
		//        ('@Description('description=DOUBLE_QUOTED_STRING')')?
		//        uc+=[UC]*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////
		//    'Actor' name=SimpleNameCS ('('label=DOUBLE_QUOTED_STRING')')? ('extends' superActor=[Actor])?'{'
		//        ('@Description('description=DOUBLE_QUOTED_STRING')')?
		//        uc+=[UC]*
		//    '}'
		public Group getGroup() { return cGroup; }
		
		////
		//    'Actor'
		public Keyword getActorKeyword_0() { return cActorKeyword_0; }
		
		//name=SimpleNameCS
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SimpleNameCS
		public RuleCall getNameSimpleNameCSParserRuleCall_1_0() { return cNameSimpleNameCSParserRuleCall_1_0; }
		
		//('('label=DOUBLE_QUOTED_STRING')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//label=DOUBLE_QUOTED_STRING
		public Assignment getLabelAssignment_2_1() { return cLabelAssignment_2_1; }
		
		//DOUBLE_QUOTED_STRING
		public RuleCall getLabelDOUBLE_QUOTED_STRINGTerminalRuleCall_2_1_0() { return cLabelDOUBLE_QUOTED_STRINGTerminalRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//('extends' superActor=[Actor])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }
		
		//superActor=[Actor]
		public Assignment getSuperActorAssignment_3_1() { return cSuperActorAssignment_3_1; }
		
		//[Actor]
		public CrossReference getSuperActorActorCrossReference_3_1_0() { return cSuperActorActorCrossReference_3_1_0; }
		
		//ID
		public RuleCall getSuperActorActorIDTerminalRuleCall_3_1_0_1() { return cSuperActorActorIDTerminalRuleCall_3_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//('@Description('description=DOUBLE_QUOTED_STRING')')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'@Description('
		public Keyword getDescriptionKeyword_5_0() { return cDescriptionKeyword_5_0; }
		
		//description=DOUBLE_QUOTED_STRING
		public Assignment getDescriptionAssignment_5_1() { return cDescriptionAssignment_5_1; }
		
		//DOUBLE_QUOTED_STRING
		public RuleCall getDescriptionDOUBLE_QUOTED_STRINGTerminalRuleCall_5_1_0() { return cDescriptionDOUBLE_QUOTED_STRINGTerminalRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }
		
		//uc+=[UC]*
		public Assignment getUcAssignment_6() { return cUcAssignment_6; }
		
		//[UC]
		public CrossReference getUcUCCrossReference_6_0() { return cUcUCCrossReference_6_0; }
		
		//ID
		public RuleCall getUcUCIDTerminalRuleCall_6_0_1() { return cUcUCIDTerminalRuleCall_6_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class UCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.UC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUCKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSimpleNameCSParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLabelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLabelDOUBLE_QUOTED_STRINGTerminalRuleCall_4_0 = (RuleCall)cLabelAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cUCRelationAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cUCRelationUSECASE_RELATIONParserRuleCall_6_0_0 = (RuleCall)cUCRelationAssignment_6_0.eContents().get(0);
		private final Assignment cRelateducAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cRelateducUCCrossReference_6_1_0 = (CrossReference)cRelateducAssignment_6_1.eContents().get(0);
		private final RuleCall cRelateducUCIDTerminalRuleCall_6_1_0_1 = (RuleCall)cRelateducUCCrossReference_6_1_0.eContents().get(1);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cRelateducAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final CrossReference cRelateducUCCrossReference_6_2_1_0 = (CrossReference)cRelateducAssignment_6_2_1.eContents().get(0);
		private final RuleCall cRelateducUCIDTerminalRuleCall_6_2_1_0_1 = (RuleCall)cRelateducUCCrossReference_6_2_1_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cDefinedBySSDKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cSsdAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final CrossReference cSsdInteractionCrossReference_7_2_0 = (CrossReference)cSsdAssignment_7_2.eContents().get(0);
		private final RuleCall cSsdInteractionIDTerminalRuleCall_7_2_0_1 = (RuleCall)cSsdInteractionCrossReference_7_2_0.eContents().get(1);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cCommaKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cSsdAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final CrossReference cSsdInteractionCrossReference_7_3_1_0 = (CrossReference)cSsdAssignment_7_3_1.eContents().get(0);
		private final RuleCall cSsdInteractionIDTerminalRuleCall_7_3_1_0_1 = (RuleCall)cSsdInteractionCrossReference_7_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cRelatedServiceKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cServiceAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final CrossReference cServiceServiceCrossReference_8_2_0 = (CrossReference)cServiceAssignment_8_2.eContents().get(0);
		private final RuleCall cServiceServiceIDTerminalRuleCall_8_2_0_1 = (RuleCall)cServiceServiceCrossReference_8_2_0.eContents().get(1);
		private final Group cGroup_8_3 = (Group)cGroup_8.eContents().get(3);
		private final Keyword cCommaKeyword_8_3_0 = (Keyword)cGroup_8_3.eContents().get(0);
		private final Assignment cServiceAssignment_8_3_1 = (Assignment)cGroup_8_3.eContents().get(1);
		private final CrossReference cServiceServiceCrossReference_8_3_1_0 = (CrossReference)cServiceAssignment_8_3_1.eContents().get(0);
		private final RuleCall cServiceServiceIDTerminalRuleCall_8_3_1_0_1 = (RuleCall)cServiceServiceCrossReference_8_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cDescriptionKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cDescriptionAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cDescriptionDOUBLE_QUOTED_STRINGTerminalRuleCall_9_1_0 = (RuleCall)cDescriptionAssignment_9_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		
		////Actor returns Actor:
		////    ('@actor_description:' description=DOUBLE_QUOTED_STRING)?
		////    'Actor' name=SimpleNameCS ('extends' superActor=[Actor])?'{'
		////        uc+=(UC)*
		////    '}'
		////;
		//UC returns UC:
		////     ('@uc_description:' description=DOUBLE_QUOTED_STRING)?
		//     'UC' '::' name=SimpleNameCS ('(')? (label=DOUBLE_QUOTED_STRING)? (')')? (UCRelation=USECASE_RELATION relateduc+=[UC] (',' relateduc+=[UC])*)? ('definedBySSD' '(' ssd+=[Interaction] (',' ssd+=[Interaction])* ')')? ('relatedService' '(' service+=[Service] (',' service+=[Service])* ')')? ('@Description('description=DOUBLE_QUOTED_STRING')')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////     ('@uc_description:' description=DOUBLE_QUOTED_STRING)?
		//     'UC' '::' name=SimpleNameCS ('(')? (label=DOUBLE_QUOTED_STRING)? (')')? (UCRelation=USECASE_RELATION relateduc+=[UC] (',' relateduc+=[UC])*)? ('definedBySSD' '(' ssd+=[Interaction] (',' ssd+=[Interaction])* ')')? ('relatedService' '(' service+=[Service] (',' service+=[Service])* ')')? ('@Description('description=DOUBLE_QUOTED_STRING')')?
		public Group getGroup() { return cGroup; }
		
		////     ('@uc_description:' description=DOUBLE_QUOTED_STRING)?
		//     'UC'
		public Keyword getUCKeyword_0() { return cUCKeyword_0; }
		
		//'::'
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }
		
		//name=SimpleNameCS
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//SimpleNameCS
		public RuleCall getNameSimpleNameCSParserRuleCall_2_0() { return cNameSimpleNameCSParserRuleCall_2_0; }
		
		//('(')?
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(label=DOUBLE_QUOTED_STRING)?
		public Assignment getLabelAssignment_4() { return cLabelAssignment_4; }
		
		//DOUBLE_QUOTED_STRING
		public RuleCall getLabelDOUBLE_QUOTED_STRINGTerminalRuleCall_4_0() { return cLabelDOUBLE_QUOTED_STRINGTerminalRuleCall_4_0; }
		
		//(')')?
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//(UCRelation=USECASE_RELATION relateduc+=[UC] (',' relateduc+=[UC])*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//UCRelation=USECASE_RELATION
		public Assignment getUCRelationAssignment_6_0() { return cUCRelationAssignment_6_0; }
		
		//USECASE_RELATION
		public RuleCall getUCRelationUSECASE_RELATIONParserRuleCall_6_0_0() { return cUCRelationUSECASE_RELATIONParserRuleCall_6_0_0; }
		
		//relateduc+=[UC]
		public Assignment getRelateducAssignment_6_1() { return cRelateducAssignment_6_1; }
		
		//[UC]
		public CrossReference getRelateducUCCrossReference_6_1_0() { return cRelateducUCCrossReference_6_1_0; }
		
		//ID
		public RuleCall getRelateducUCIDTerminalRuleCall_6_1_0_1() { return cRelateducUCIDTerminalRuleCall_6_1_0_1; }
		
		//(',' relateduc+=[UC])*
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//','
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }
		
		//relateduc+=[UC]
		public Assignment getRelateducAssignment_6_2_1() { return cRelateducAssignment_6_2_1; }
		
		//[UC]
		public CrossReference getRelateducUCCrossReference_6_2_1_0() { return cRelateducUCCrossReference_6_2_1_0; }
		
		//ID
		public RuleCall getRelateducUCIDTerminalRuleCall_6_2_1_0_1() { return cRelateducUCIDTerminalRuleCall_6_2_1_0_1; }
		
		//('definedBySSD' '(' ssd+=[Interaction] (',' ssd+=[Interaction])* ')')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'definedBySSD'
		public Keyword getDefinedBySSDKeyword_7_0() { return cDefinedBySSDKeyword_7_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_1() { return cLeftParenthesisKeyword_7_1; }
		
		//ssd+=[Interaction]
		public Assignment getSsdAssignment_7_2() { return cSsdAssignment_7_2; }
		
		//[Interaction]
		public CrossReference getSsdInteractionCrossReference_7_2_0() { return cSsdInteractionCrossReference_7_2_0; }
		
		//ID
		public RuleCall getSsdInteractionIDTerminalRuleCall_7_2_0_1() { return cSsdInteractionIDTerminalRuleCall_7_2_0_1; }
		
		//(',' ssd+=[Interaction])*
		public Group getGroup_7_3() { return cGroup_7_3; }
		
		//','
		public Keyword getCommaKeyword_7_3_0() { return cCommaKeyword_7_3_0; }
		
		//ssd+=[Interaction]
		public Assignment getSsdAssignment_7_3_1() { return cSsdAssignment_7_3_1; }
		
		//[Interaction]
		public CrossReference getSsdInteractionCrossReference_7_3_1_0() { return cSsdInteractionCrossReference_7_3_1_0; }
		
		//ID
		public RuleCall getSsdInteractionIDTerminalRuleCall_7_3_1_0_1() { return cSsdInteractionIDTerminalRuleCall_7_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_4() { return cRightParenthesisKeyword_7_4; }
		
		//('relatedService' '(' service+=[Service] (',' service+=[Service])* ')')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'relatedService'
		public Keyword getRelatedServiceKeyword_8_0() { return cRelatedServiceKeyword_8_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8_1() { return cLeftParenthesisKeyword_8_1; }
		
		//service+=[Service]
		public Assignment getServiceAssignment_8_2() { return cServiceAssignment_8_2; }
		
		//[Service]
		public CrossReference getServiceServiceCrossReference_8_2_0() { return cServiceServiceCrossReference_8_2_0; }
		
		//ID
		public RuleCall getServiceServiceIDTerminalRuleCall_8_2_0_1() { return cServiceServiceIDTerminalRuleCall_8_2_0_1; }
		
		//(',' service+=[Service])*
		public Group getGroup_8_3() { return cGroup_8_3; }
		
		//','
		public Keyword getCommaKeyword_8_3_0() { return cCommaKeyword_8_3_0; }
		
		//service+=[Service]
		public Assignment getServiceAssignment_8_3_1() { return cServiceAssignment_8_3_1; }
		
		//[Service]
		public CrossReference getServiceServiceCrossReference_8_3_1_0() { return cServiceServiceCrossReference_8_3_1_0; }
		
		//ID
		public RuleCall getServiceServiceIDTerminalRuleCall_8_3_1_0_1() { return cServiceServiceIDTerminalRuleCall_8_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8_4() { return cRightParenthesisKeyword_8_4; }
		
		//('@Description('description=DOUBLE_QUOTED_STRING')')?
		public Group getGroup_9() { return cGroup_9; }
		
		//'@Description('
		public Keyword getDescriptionKeyword_9_0() { return cDescriptionKeyword_9_0; }
		
		//description=DOUBLE_QUOTED_STRING
		public Assignment getDescriptionAssignment_9_1() { return cDescriptionAssignment_9_1; }
		
		//DOUBLE_QUOTED_STRING
		public RuleCall getDescriptionDOUBLE_QUOTED_STRINGTerminalRuleCall_9_1_0() { return cDescriptionDOUBLE_QUOTED_STRINGTerminalRuleCall_9_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9_2() { return cRightParenthesisKeyword_9_2; }
	}
	public class ServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.Service");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSimpleNameCSParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDescriptionKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDescriptionDOUBLE_QUOTED_STRINGTerminalRuleCall_3_1_0 = (RuleCall)cDescriptionAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOperationKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOperationAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOperationOperationParserRuleCall_4_1_0 = (RuleCall)cOperationAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cTempPropertyKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTemp_propertyAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTemp_propertyAttributeParserRuleCall_5_1_0 = (RuleCall)cTemp_propertyAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cWorkFlowKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cWorkflowAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cWorkflowWorkflowCrossReference_6_1_0 = (CrossReference)cWorkflowAssignment_6_1.eContents().get(0);
		private final RuleCall cWorkflowWorkflowIDTerminalRuleCall_6_1_0_1 = (RuleCall)cWorkflowWorkflowCrossReference_6_1_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cINVKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cInvarianceAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cInvarianceInvarianceParserRuleCall_7_1_0 = (RuleCall)cInvarianceAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		////UC:
		////     'UC' '::' ucname=Operation (UCRelation=USECASE_RELATION relatedopname=Operation)?
		////;
		///* ---------------- Controller  ------------------- */
		//Service returns Service:
		//    'Service' name=SimpleNameCS '{'
		//    ('@Description('description=DOUBLE_QUOTED_STRING')')?
		//    ('[Operation]' operation += Operation*)?
		//    ('[TempProperty]' temp_property += Attribute*)?
		//    ('[WorkFlow]' workflow += [Workflow]*)?
		//    ('[INV]' invariance+=Invariance*)?
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Service' name=SimpleNameCS '{'
		//('@Description('description=DOUBLE_QUOTED_STRING')')?
		//('[Operation]' operation += Operation*)?
		//('[TempProperty]' temp_property += Attribute*)?
		//('[WorkFlow]' workflow += [Workflow]*)?
		//('[INV]' invariance+=Invariance*)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Service'
		public Keyword getServiceKeyword_0() { return cServiceKeyword_0; }
		
		//name=SimpleNameCS
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SimpleNameCS
		public RuleCall getNameSimpleNameCSParserRuleCall_1_0() { return cNameSimpleNameCSParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('@Description('description=DOUBLE_QUOTED_STRING')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'@Description('
		public Keyword getDescriptionKeyword_3_0() { return cDescriptionKeyword_3_0; }
		
		//description=DOUBLE_QUOTED_STRING
		public Assignment getDescriptionAssignment_3_1() { return cDescriptionAssignment_3_1; }
		
		//DOUBLE_QUOTED_STRING
		public RuleCall getDescriptionDOUBLE_QUOTED_STRINGTerminalRuleCall_3_1_0() { return cDescriptionDOUBLE_QUOTED_STRINGTerminalRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
		
		//('[Operation]' operation += Operation*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'[Operation]'
		public Keyword getOperationKeyword_4_0() { return cOperationKeyword_4_0; }
		
		//operation += Operation*
		public Assignment getOperationAssignment_4_1() { return cOperationAssignment_4_1; }
		
		//Operation
		public RuleCall getOperationOperationParserRuleCall_4_1_0() { return cOperationOperationParserRuleCall_4_1_0; }
		
		//('[TempProperty]' temp_property += Attribute*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'[TempProperty]'
		public Keyword getTempPropertyKeyword_5_0() { return cTempPropertyKeyword_5_0; }
		
		//temp_property += Attribute*
		public Assignment getTemp_propertyAssignment_5_1() { return cTemp_propertyAssignment_5_1; }
		
		//Attribute
		public RuleCall getTemp_propertyAttributeParserRuleCall_5_1_0() { return cTemp_propertyAttributeParserRuleCall_5_1_0; }
		
		//('[WorkFlow]' workflow += [Workflow]*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'[WorkFlow]'
		public Keyword getWorkFlowKeyword_6_0() { return cWorkFlowKeyword_6_0; }
		
		//workflow += [Workflow]*
		public Assignment getWorkflowAssignment_6_1() { return cWorkflowAssignment_6_1; }
		
		//[Workflow]
		public CrossReference getWorkflowWorkflowCrossReference_6_1_0() { return cWorkflowWorkflowCrossReference_6_1_0; }
		
		//ID
		public RuleCall getWorkflowWorkflowIDTerminalRuleCall_6_1_0_1() { return cWorkflowWorkflowIDTerminalRuleCall_6_1_0_1; }
		
		//('[INV]' invariance+=Invariance*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'[INV]'
		public Keyword getINVKeyword_7_0() { return cINVKeyword_7_0; }
		
		//invariance+=Invariance*
		public Assignment getInvarianceAssignment_7_1() { return cInvarianceAssignment_7_1; }
		
		//Invariance
		public RuleCall getInvarianceInvarianceParserRuleCall_7_1_0() { return cInvarianceInvarianceParserRuleCall_7_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ParticipantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.Participant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cServiceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Participant:
		//    Actor | Service
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Actor | Service
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Actor
		public RuleCall getActorParserRuleCall_0() { return cActorParserRuleCall_0; }
		
		//Service
		public RuleCall getServiceParserRuleCall_1() { return cServiceParserRuleCall_1; }
	}
	public class WorkflowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.Workflow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWorkflowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSimpleNameCSParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParticipantsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cParticipantsParticipantCrossReference_4_0 = (CrossReference)cParticipantsAssignment_4.eContents().get(0);
		private final RuleCall cParticipantsParticipantIDTerminalRuleCall_4_0_1 = (RuleCall)cParticipantsParticipantCrossReference_4_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPartitionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPartitionsPartitionParserRuleCall_6_0 = (RuleCall)cPartitionsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		///* ---------------- Workflow ------------------- */
		//Workflow returns Workflow:
		//    'Workflow' name=SimpleNameCS '{'
		//        '[' participants+=[Participant]* ']'
		//        partitions+=Partition*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Workflow' name=SimpleNameCS '{'
		//    '[' participants+=[Participant]* ']'
		//    partitions+=Partition*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Workflow'
		public Keyword getWorkflowKeyword_0() { return cWorkflowKeyword_0; }
		
		//name=SimpleNameCS
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SimpleNameCS
		public RuleCall getNameSimpleNameCSParserRuleCall_1_0() { return cNameSimpleNameCSParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }
		
		//participants+=[Participant]*
		public Assignment getParticipantsAssignment_4() { return cParticipantsAssignment_4; }
		
		//[Participant]
		public CrossReference getParticipantsParticipantCrossReference_4_0() { return cParticipantsParticipantCrossReference_4_0; }
		
		//ID
		public RuleCall getParticipantsParticipantIDTerminalRuleCall_4_0_1() { return cParticipantsParticipantIDTerminalRuleCall_4_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
		
		//partitions+=Partition*
		public Assignment getPartitionsAssignment_6() { return cPartitionsAssignment_6; }
		
		//Partition
		public RuleCall getPartitionsPartitionParserRuleCall_6_0() { return cPartitionsPartitionParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class PartitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.Partition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameParticipantCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameParticipantIDTerminalRuleCall_0_0_1 = (RuleCall)cNameParticipantCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpsWorkflowExpParserRuleCall_2_0 = (RuleCall)cExpsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Partition:
		//    name=[Participant] '{'
		//        exps+=WorkflowExp*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=[Participant] '{'
		//    exps+=WorkflowExp*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//name=[Participant]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//[Participant]
		public CrossReference getNameParticipantCrossReference_0_0() { return cNameParticipantCrossReference_0_0; }
		
		//ID
		public RuleCall getNameParticipantIDTerminalRuleCall_0_0_1() { return cNameParticipantIDTerminalRuleCall_0_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//exps+=WorkflowExp*
		public Assignment getExpsAssignment_2() { return cExpsAssignment_2; }
		
		//WorkflowExp
		public RuleCall getExpsWorkflowExpParserRuleCall_2_0() { return cExpsWorkflowExpParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class WorkflowExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.WorkflowExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComplexOpeartionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInitalNodeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cActivityFinalParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cForkNodeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cJoinNodeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cPartitionActionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//WorkflowExp:
		//    SimpleOperation | ComplexOpeartion | InitalNode | ActivityFinal | ForkNode | JoinNode | PartitionAction
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleOperation | ComplexOpeartion | InitalNode | ActivityFinal | ForkNode | JoinNode | PartitionAction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleOperation
		public RuleCall getSimpleOperationParserRuleCall_0() { return cSimpleOperationParserRuleCall_0; }
		
		//ComplexOpeartion
		public RuleCall getComplexOpeartionParserRuleCall_1() { return cComplexOpeartionParserRuleCall_1; }
		
		//InitalNode
		public RuleCall getInitalNodeParserRuleCall_2() { return cInitalNodeParserRuleCall_2; }
		
		//ActivityFinal
		public RuleCall getActivityFinalParserRuleCall_3() { return cActivityFinalParserRuleCall_3; }
		
		//ForkNode
		public RuleCall getForkNodeParserRuleCall_4() { return cForkNodeParserRuleCall_4; }
		
		//JoinNode
		public RuleCall getJoinNodeParserRuleCall_5() { return cJoinNodeParserRuleCall_5; }
		
		//PartitionAction
		public RuleCall getPartitionActionParserRuleCall_6() { return cPartitionActionParserRuleCall_6; }
	}
	public class PartitionActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.PartitionAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPatitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPatitionParticipantCrossReference_1_0 = (CrossReference)cPatitionAssignment_1.eContents().get(0);
		private final RuleCall cPatitionParticipantIDTerminalRuleCall_1_0_1 = (RuleCall)cPatitionParticipantCrossReference_1_0.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cActionJoinExpCrossReference_3_0 = (CrossReference)cActionAssignment_3.eContents().get(0);
		private final RuleCall cActionJoinExpIDTerminalRuleCall_3_0_1 = (RuleCall)cActionJoinExpCrossReference_3_0.eContents().get(1);
		
		//PartitionAction:
		//    '->' patition=[Participant] ':' action=[JoinExp]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'->' patition=[Participant] ':' action=[JoinExp]
		public Group getGroup() { return cGroup; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0() { return cHyphenMinusGreaterThanSignKeyword_0; }
		
		//patition=[Participant]
		public Assignment getPatitionAssignment_1() { return cPatitionAssignment_1; }
		
		//[Participant]
		public CrossReference getPatitionParticipantCrossReference_1_0() { return cPatitionParticipantCrossReference_1_0; }
		
		//ID
		public RuleCall getPatitionParticipantIDTerminalRuleCall_1_0_1() { return cPatitionParticipantIDTerminalRuleCall_1_0_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//action=[JoinExp]
		public Assignment getActionAssignment_3() { return cActionAssignment_3; }
		
		//[JoinExp]
		public CrossReference getActionJoinExpCrossReference_3_0() { return cActionJoinExpCrossReference_3_0; }
		
		//ID
		public RuleCall getActionJoinExpIDTerminalRuleCall_3_0_1() { return cActionJoinExpIDTerminalRuleCall_3_0_1; }
	}
	public class JoinExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.JoinExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSwitchExpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLoopExpParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//JoinExp returns JoinExp:
		//    Operation | SwitchExp | LoopExp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Operation | SwitchExp | LoopExp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Operation
		public RuleCall getOperationParserRuleCall_0() { return cOperationParserRuleCall_0; }
		
		//SwitchExp
		public RuleCall getSwitchExpParserRuleCall_1() { return cSwitchExpParserRuleCall_1; }
		
		//LoopExp
		public RuleCall getLoopExpParserRuleCall_2() { return cLoopExpParserRuleCall_2; }
	}
	public class ActivityFinalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.ActivityFinal");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameActivityFinalKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//ActivityFinal:
		//    name='ActivityFinal'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name='ActivityFinal'
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//'ActivityFinal'
		public Keyword getNameActivityFinalKeyword_0() { return cNameActivityFinalKeyword_0; }
	}
	public class InitalNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.InitalNode");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameActivityStartKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//InitalNode:
		//    name='ActivityStart'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name='ActivityStart'
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//'ActivityStart'
		public Keyword getNameActivityStartKeyword_0() { return cNameActivityStartKeyword_0; }
	}
	public class ForkNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.ForkNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForkNodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStartlinksAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cStartlinksJoinExpCrossReference_3_0 = (CrossReference)cStartlinksAssignment_3.eContents().get(0);
		private final RuleCall cStartlinksJoinExpIDTerminalRuleCall_3_0_1 = (RuleCall)cStartlinksJoinExpCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ForkNode:
		//    'ForkNode' '->' '(' startlinks+=[JoinExp]+ ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'ForkNode' '->' '(' startlinks+=[JoinExp]+ ')'
		public Group getGroup() { return cGroup; }
		
		//'ForkNode'
		public Keyword getForkNodeKeyword_0() { return cForkNodeKeyword_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//startlinks+=[JoinExp]+
		public Assignment getStartlinksAssignment_3() { return cStartlinksAssignment_3; }
		
		//[JoinExp]
		public CrossReference getStartlinksJoinExpCrossReference_3_0() { return cStartlinksJoinExpCrossReference_3_0; }
		
		//ID
		public RuleCall getStartlinksJoinExpIDTerminalRuleCall_3_0_1() { return cStartlinksJoinExpIDTerminalRuleCall_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class JoinNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.JoinNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEndlinksAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEndlinksJoinExpCrossReference_1_0 = (CrossReference)cEndlinksAssignment_1.eContents().get(0);
		private final RuleCall cEndlinksJoinExpIDTerminalRuleCall_1_0_1 = (RuleCall)cEndlinksJoinExpCrossReference_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cJoinNodeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//JoinNode:
		//    '(' endlinks+=[JoinExp]+ ')' '->' 'JoinNode'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' endlinks+=[JoinExp]+ ')' '->' 'JoinNode'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//endlinks+=[JoinExp]+
		public Assignment getEndlinksAssignment_1() { return cEndlinksAssignment_1; }
		
		//[JoinExp]
		public CrossReference getEndlinksJoinExpCrossReference_1_0() { return cEndlinksJoinExpCrossReference_1_0; }
		
		//ID
		public RuleCall getEndlinksJoinExpIDTerminalRuleCall_1_0_1() { return cEndlinksJoinExpIDTerminalRuleCall_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//'JoinNode'
		public Keyword getJoinNodeKeyword_4() { return cJoinNodeKeyword_4; }
	}
	public class ComplexOpeartionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.ComplexOpeartion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLoopExpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSwitchExpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ComplexOpeartion:
		//    LoopExp | SwitchExp // | ConcurrentExp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LoopExp | SwitchExp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LoopExp
		public RuleCall getLoopExpParserRuleCall_0() { return cLoopExpParserRuleCall_0; }
		
		//SwitchExp
		public RuleCall getSwitchExpParserRuleCall_1() { return cSwitchExpParserRuleCall_1; }
	}
	public class SimpleOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.SimpleOperation");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefOperationCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefOperationIDTerminalRuleCall_0_1 = (RuleCall)cRefOperationCrossReference_0.eContents().get(1);
		
		////ConcurrentExp:
		////    ConcurrentStartRelationExp | ConcurrentEndRelationExp
		////;
		////
		////ConcurrentStartRelationExp:
		////    forknode=[ForkNode] '->' '(' startlinks+=[Operation] (',' startlinks+=[Operation])* ')'
		////;
		////
		////ConcurrentEndRelationExp:
		////    '(' startlinks+=[Operation] (',' startlinks+=[Operation])* ')' '->' joinnode=[JoinNode]
		////;
		//SimpleOperation:
		//    ref=[Operation]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[Operation]
		public Assignment getRefAssignment() { return cRefAssignment; }
		
		//[Operation]
		public CrossReference getRefOperationCrossReference_0() { return cRefOperationCrossReference_0; }
		
		//ID
		public RuleCall getRefOperationIDTerminalRuleCall_0_1() { return cRefOperationIDTerminalRuleCall_0_1; }
	}
	public class LoopExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.LoopExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSimpleNameCSParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpsWorkflowExpParserRuleCall_4_0 = (RuleCall)cExpsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////LoopExp:
		////    'Loop' '->' condition=SimpleNameCS '{'
		////        exps += WorkflowExp*
		////    '}'
		////;
		//LoopExp:
		//    'Loop' '->' name=SimpleNameCS '{'
		//        exps += WorkflowExp*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Loop' '->' name=SimpleNameCS '{'
		//    exps += WorkflowExp*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Loop'
		public Keyword getLoopKeyword_0() { return cLoopKeyword_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//name=SimpleNameCS
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//SimpleNameCS
		public RuleCall getNameSimpleNameCSParserRuleCall_2_0() { return cNameSimpleNameCSParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//exps += WorkflowExp*
		public Assignment getExpsAssignment_4() { return cExpsAssignment_4; }
		
		//WorkflowExp
		public RuleCall getExpsWorkflowExpParserRuleCall_4_0() { return cExpsWorkflowExpParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class SwitchExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.SwitchExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSimpleNameCSParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCasesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCasesSwitchCaseParserRuleCall_4_0 = (RuleCall)cCasesAssignment_4.eContents().get(0);
		private final Assignment cDefaultAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDefaultSwitchDefaultParserRuleCall_5_0 = (RuleCall)cDefaultAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////SwitchExp:
		////
		////    'Switch' '->' caseVarible=SimpleNameCS '{'
		////        cases += SwitchCase*
		////        default = SwitchDefault?
		////    '}'
		////;
		//SwitchExp:
		//    'Switch' '->' name=SimpleNameCS '{'
		//        cases += SwitchCase*
		//        default = SwitchDefault?
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Switch' '->' name=SimpleNameCS '{'
		//    cases += SwitchCase*
		//    default = SwitchDefault?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Switch'
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//name=SimpleNameCS
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//SimpleNameCS
		public RuleCall getNameSimpleNameCSParserRuleCall_2_0() { return cNameSimpleNameCSParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//cases += SwitchCase*
		public Assignment getCasesAssignment_4() { return cCasesAssignment_4; }
		
		//SwitchCase
		public RuleCall getCasesSwitchCaseParserRuleCall_4_0() { return cCasesSwitchCaseParserRuleCall_4_0; }
		
		//default = SwitchDefault?
		public Assignment getDefaultAssignment_5() { return cDefaultAssignment_5; }
		
		//SwitchDefault
		public RuleCall getDefaultSwitchDefaultParserRuleCall_5_0() { return cDefaultSwitchDefaultParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class SwitchCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.SwitchCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCaseValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCaseValueSimpleNameCSParserRuleCall_1_0 = (RuleCall)cCaseValueAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOpSimpleOperationParserRuleCall_3_0 = (RuleCall)cOpAssignment_3.eContents().get(0);
		
		//SwitchCase:
		//    'case:' caseValue=SimpleNameCS '->' op=SimpleOperation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'case:' caseValue=SimpleNameCS '->' op=SimpleOperation
		public Group getGroup() { return cGroup; }
		
		//'case:'
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }
		
		//caseValue=SimpleNameCS
		public Assignment getCaseValueAssignment_1() { return cCaseValueAssignment_1; }
		
		//SimpleNameCS
		public RuleCall getCaseValueSimpleNameCSParserRuleCall_1_0() { return cCaseValueSimpleNameCSParserRuleCall_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//op=SimpleOperation
		public Assignment getOpAssignment_3() { return cOpAssignment_3; }
		
		//SimpleOperation
		public RuleCall getOpSimpleOperationParserRuleCall_3_0() { return cOpSimpleOperationParserRuleCall_3_0; }
	}
	public class SwitchDefaultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.SwitchDefault");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefaultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpSimpleOperationParserRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		
		//SwitchDefault:
		//    'default:' op=SimpleOperation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'default:' op=SimpleOperation
		public Group getGroup() { return cGroup; }
		
		//'default:'
		public Keyword getDefaultKeyword_0() { return cDefaultKeyword_0; }
		
		//op=SimpleOperation
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//SimpleOperation
		public RuleCall getOpSimpleOperationParserRuleCall_1_0() { return cOpSimpleOperationParserRuleCall_1_0; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameOperationNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParameterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParameterParameterParserRuleCall_2_0 = (RuleCall)cParameterAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParameterAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_3_1_0 = (RuleCall)cParameterAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cReturnTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cReturnTypeTypeCSParserRuleCall_5_1_0 = (RuleCall)cReturnTypeAssignment_5_1.eContents().get(0);
		
		//Operation :
		//    name=OperationName '(' parameter+=Parameter? (',' parameter+=Parameter)* ')' (':' returnType=TypeCS)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=OperationName '(' parameter+=Parameter? (',' parameter+=Parameter)* ')' (':' returnType=TypeCS)?
		public Group getGroup() { return cGroup; }
		
		//name=OperationName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//OperationName
		public RuleCall getNameOperationNameParserRuleCall_0_0() { return cNameOperationNameParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//parameter+=Parameter?
		public Assignment getParameterAssignment_2() { return cParameterAssignment_2; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_2_0() { return cParameterParameterParserRuleCall_2_0; }
		
		//(',' parameter+=Parameter)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//parameter+=Parameter
		public Assignment getParameterAssignment_3_1() { return cParameterAssignment_3_1; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_3_1_0() { return cParameterParameterParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//(':' returnType=TypeCS)?
		public Group getGroup_5() { return cGroup_5; }
		
		//':'
		public Keyword getColonKeyword_5_0() { return cColonKeyword_5_0; }
		
		//returnType=TypeCS
		public Assignment getReturnTypeAssignment_5_1() { return cReturnTypeAssignment_5_1; }
		
		//TypeCS
		public RuleCall getReturnTypeTypeCSParserRuleCall_5_1_0() { return cReturnTypeTypeCSParserRuleCall_5_1_0; }
	}
	public class OperationNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.OperationName");
		private final RuleCall cSimpleNameCSParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//OperationName:
		//    SimpleNameCS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleNameCS
		public RuleCall getSimpleNameCSParserRuleCall() { return cSimpleNameCSParserRuleCall; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameParametersNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeTypeCSParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//Parameter:
		//    name=ParametersName (':' type=TypeCS)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ParametersName (':' type=TypeCS)?
		public Group getGroup() { return cGroup; }
		
		//name=ParametersName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ParametersName
		public RuleCall getNameParametersNameParserRuleCall_0_0() { return cNameParametersNameParserRuleCall_0_0; }
		
		//(':' type=TypeCS)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//type=TypeCS
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//TypeCS
		public RuleCall getTypeTypeCSParserRuleCall_1_1_0() { return cTypeTypeCSParserRuleCall_1_1_0; }
	}
	public class ParametersNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.ParametersName");
		private final RuleCall cSimpleNameCSParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ParametersName:
		//    SimpleNameCS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleNameCS
		public RuleCall getSimpleNameCSParserRuleCall() { return cSimpleNameCSParserRuleCall; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsCRUDAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsCRUDAutoCRUDKeyword_0_0 = (Keyword)cIsCRUDAssignment_0.eContents().get(0);
		private final Keyword cEntityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSimpleNameCSParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperEntityAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSuperEntityEntityCrossReference_3_1_0 = (CrossReference)cSuperEntityAssignment_3_1.eContents().get(0);
		private final RuleCall cSuperEntityEntityIDTerminalRuleCall_3_1_0_1 = (RuleCall)cSuperEntityEntityCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cDescriptionKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDescriptionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDescriptionDOUBLE_QUOTED_STRINGTerminalRuleCall_5_1_0 = (RuleCall)cDescriptionAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cAttributesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAttributesAttributeParserRuleCall_6_0 = (RuleCall)cAttributesAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cReferKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cReferenceAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cReferenceReferenceParserRuleCall_7_1_0 = (RuleCall)cReferenceAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cINVKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cInvarianceAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cInvarianceInvarianceParserRuleCall_8_1_0 = (RuleCall)cInvarianceAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		///* --------------- Entity Model --------------- */
		//Entity returns Entity:
		//    (isCRUD?='@AutoCRUD')?
		//    'Entity' name=SimpleNameCS ('extends' superEntity=[Entity])? '{'
		//        ('@Description('description=DOUBLE_QUOTED_STRING')')?
		//        attributes+=Attribute*
		//        ('[Refer]' reference+=Reference*)?
		//        ('[INV]' invariance+=Invariance*)?
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(isCRUD?='@AutoCRUD')?
		//'Entity' name=SimpleNameCS ('extends' superEntity=[Entity])? '{'
		//    ('@Description('description=DOUBLE_QUOTED_STRING')')?
		//    attributes+=Attribute*
		//    ('[Refer]' reference+=Reference*)?
		//    ('[INV]' invariance+=Invariance*)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//(isCRUD?='@AutoCRUD')?
		public Assignment getIsCRUDAssignment_0() { return cIsCRUDAssignment_0; }
		
		//'@AutoCRUD'
		public Keyword getIsCRUDAutoCRUDKeyword_0_0() { return cIsCRUDAutoCRUDKeyword_0_0; }
		
		//'Entity'
		public Keyword getEntityKeyword_1() { return cEntityKeyword_1; }
		
		//name=SimpleNameCS
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//SimpleNameCS
		public RuleCall getNameSimpleNameCSParserRuleCall_2_0() { return cNameSimpleNameCSParserRuleCall_2_0; }
		
		//('extends' superEntity=[Entity])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }
		
		//superEntity=[Entity]
		public Assignment getSuperEntityAssignment_3_1() { return cSuperEntityAssignment_3_1; }
		
		//[Entity]
		public CrossReference getSuperEntityEntityCrossReference_3_1_0() { return cSuperEntityEntityCrossReference_3_1_0; }
		
		//ID
		public RuleCall getSuperEntityEntityIDTerminalRuleCall_3_1_0_1() { return cSuperEntityEntityIDTerminalRuleCall_3_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//('@Description('description=DOUBLE_QUOTED_STRING')')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'@Description('
		public Keyword getDescriptionKeyword_5_0() { return cDescriptionKeyword_5_0; }
		
		//description=DOUBLE_QUOTED_STRING
		public Assignment getDescriptionAssignment_5_1() { return cDescriptionAssignment_5_1; }
		
		//DOUBLE_QUOTED_STRING
		public RuleCall getDescriptionDOUBLE_QUOTED_STRINGTerminalRuleCall_5_1_0() { return cDescriptionDOUBLE_QUOTED_STRINGTerminalRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_6() { return cAttributesAssignment_6; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_6_0() { return cAttributesAttributeParserRuleCall_6_0; }
		
		//('[Refer]' reference+=Reference*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'[Refer]'
		public Keyword getReferKeyword_7_0() { return cReferKeyword_7_0; }
		
		//reference+=Reference*
		public Assignment getReferenceAssignment_7_1() { return cReferenceAssignment_7_1; }
		
		//Reference
		public RuleCall getReferenceReferenceParserRuleCall_7_1_0() { return cReferenceReferenceParserRuleCall_7_1_0; }
		
		//('[INV]' invariance+=Invariance*)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'[INV]'
		public Keyword getINVKeyword_8_0() { return cINVKeyword_8_0; }
		
		//invariance+=Invariance*
		public Assignment getInvarianceAssignment_8_1() { return cInvarianceAssignment_8_1; }
		
		//Invariance
		public RuleCall getInvarianceInvarianceParserRuleCall_8_1_0() { return cInvarianceInvarianceParserRuleCall_8_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSimpleNameCSParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeCSParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cIsmultipleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cIsmultipleAsteriskKeyword_3_0 = (Keyword)cIsmultipleAssignment_3.eContents().get(0);
		
		//Attribute returns Attribute:
		//    name=SimpleNameCS ':' type=TypeCS (ismultiple?='*')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=SimpleNameCS ':' type=TypeCS (ismultiple?='*')?
		public Group getGroup() { return cGroup; }
		
		//name=SimpleNameCS
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//SimpleNameCS
		public RuleCall getNameSimpleNameCSParserRuleCall_0_0() { return cNameSimpleNameCSParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=TypeCS
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//TypeCS
		public RuleCall getTypeTypeCSParserRuleCall_2_0() { return cTypeTypeCSParserRuleCall_2_0; }
		
		//(ismultiple?='*')?
		public Assignment getIsmultipleAssignment_3() { return cIsmultipleAssignment_3; }
		
		//'*'
		public Keyword getIsmultipleAsteriskKeyword_3_0() { return cIsmultipleAsteriskKeyword_3_0; }
	}
	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSimpleNameCSParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEntityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEntityEntityCrossReference_2_0 = (CrossReference)cEntityAssignment_2.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_2_0_1 = (RuleCall)cEntityEntityCrossReference_2_0.eContents().get(1);
		private final Assignment cIsmultipleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cIsmultipleAsteriskKeyword_3_0 = (Keyword)cIsmultipleAssignment_3.eContents().get(0);
		private final Assignment cIsReverseAssoicationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cIsReverseAssoicationExclamationMarkKeyword_4_0 = (Keyword)cIsReverseAssoicationAssignment_4.eContents().get(0);
		private final Assignment cIsAggregationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cIsAggregationCommercialAtHyphenMinusKeyword_5_0 = (Keyword)cIsAggregationAssignment_5.eContents().get(0);
		private final Assignment cIsCompositionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cIsCompositionAsteriskHyphenMinusKeyword_6_0 = (Keyword)cIsCompositionAssignment_6.eContents().get(0);
		private final Assignment cTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTypeAssociationTypeCSParserRuleCall_7_0 = (RuleCall)cTypeAssignment_7.eContents().get(0);
		
		//Reference returns Reference :
		//    name=SimpleNameCS ':' entity=[Entity] (ismultiple?='*')? (isReverseAssoication?='!')? (isAggregation?='@-')? (isComposition?='*-')? type=AssociationTypeCS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=SimpleNameCS ':' entity=[Entity] (ismultiple?='*')? (isReverseAssoication?='!')? (isAggregation?='@-')? (isComposition?='*-')? type=AssociationTypeCS
		public Group getGroup() { return cGroup; }
		
		//name=SimpleNameCS
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//SimpleNameCS
		public RuleCall getNameSimpleNameCSParserRuleCall_0_0() { return cNameSimpleNameCSParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//entity=[Entity]
		public Assignment getEntityAssignment_2() { return cEntityAssignment_2; }
		
		//[Entity]
		public CrossReference getEntityEntityCrossReference_2_0() { return cEntityEntityCrossReference_2_0; }
		
		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_2_0_1() { return cEntityEntityIDTerminalRuleCall_2_0_1; }
		
		//(ismultiple?='*')?
		public Assignment getIsmultipleAssignment_3() { return cIsmultipleAssignment_3; }
		
		//'*'
		public Keyword getIsmultipleAsteriskKeyword_3_0() { return cIsmultipleAsteriskKeyword_3_0; }
		
		//(isReverseAssoication?='!')?
		public Assignment getIsReverseAssoicationAssignment_4() { return cIsReverseAssoicationAssignment_4; }
		
		//'!'
		public Keyword getIsReverseAssoicationExclamationMarkKeyword_4_0() { return cIsReverseAssoicationExclamationMarkKeyword_4_0; }
		
		//(isAggregation?='@-')?
		public Assignment getIsAggregationAssignment_5() { return cIsAggregationAssignment_5; }
		
		//'@-'
		public Keyword getIsAggregationCommercialAtHyphenMinusKeyword_5_0() { return cIsAggregationCommercialAtHyphenMinusKeyword_5_0; }
		
		//(isComposition?='*-')?
		public Assignment getIsCompositionAssignment_6() { return cIsCompositionAssignment_6; }
		
		//'*-'
		public Keyword getIsCompositionAsteriskHyphenMinusKeyword_6_0() { return cIsCompositionAsteriskHyphenMinusKeyword_6_0; }
		
		//type=AssociationTypeCS
		public Assignment getTypeAssignment_7() { return cTypeAssignment_7; }
		
		//AssociationTypeCS
		public RuleCall getTypeAssociationTypeCSParserRuleCall_7_0() { return cTypeAssociationTypeCSParserRuleCall_7_0; }
	}
	public class TypeCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.TypeCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveTypeCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnumEntityParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCollectionTypeCSParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//TypeCS:
		//     EntityType | PrimitiveTypeCS | EnumEntity | CollectionTypeCS // | Collection
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//EntityType | PrimitiveTypeCS | EnumEntity | CollectionTypeCS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EntityType
		public RuleCall getEntityTypeParserRuleCall_0() { return cEntityTypeParserRuleCall_0; }
		
		//PrimitiveTypeCS
		public RuleCall getPrimitiveTypeCSParserRuleCall_1() { return cPrimitiveTypeCSParserRuleCall_1; }
		
		//EnumEntity
		public RuleCall getEnumEntityParserRuleCall_2() { return cEnumEntityParserRuleCall_2; }
		
		//CollectionTypeCS
		public RuleCall getCollectionTypeCSParserRuleCall_3() { return cCollectionTypeCSParserRuleCall_3; }
	}
	public class InvarianceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.Invariance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSimpleNameCSParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cOclAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cOclOCLExpressionCSParserRuleCall_3_0_1_0 = (RuleCall)cOclAssignment_3_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Assignment cOclAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cOclOCLExpressionCSParserRuleCall_3_1_0 = (RuleCall)cOclAssignment_3_1.eContents().get(0);
		private final Assignment cIsForAssociationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cIsForAssociationASSOCINVKeyword_4_0 = (Keyword)cIsForAssociationAssignment_4.eContents().get(0);
		
		////Collection:
		////    collectiontype='List' '(' type=Type ')'
		////;
		//Invariance:
		//    'inv' name=SimpleNameCS ':' ('{' ocl=OCLExpressionCS '}' |  ocl=OCLExpressionCS) (isForAssociation?='ASSOCINV')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'inv' name=SimpleNameCS ':' ('{' ocl=OCLExpressionCS '}' |  ocl=OCLExpressionCS) (isForAssociation?='ASSOCINV')?
		public Group getGroup() { return cGroup; }
		
		//'inv'
		public Keyword getInvKeyword_0() { return cInvKeyword_0; }
		
		//name=SimpleNameCS
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SimpleNameCS
		public RuleCall getNameSimpleNameCSParserRuleCall_1_0() { return cNameSimpleNameCSParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//('{' ocl=OCLExpressionCS '}' |  ocl=OCLExpressionCS)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'{' ocl=OCLExpressionCS '}'
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0_0() { return cLeftCurlyBracketKeyword_3_0_0; }
		
		//ocl=OCLExpressionCS
		public Assignment getOclAssignment_3_0_1() { return cOclAssignment_3_0_1; }
		
		//OCLExpressionCS
		public RuleCall getOclOCLExpressionCSParserRuleCall_3_0_1_0() { return cOclOCLExpressionCSParserRuleCall_3_0_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_0_2() { return cRightCurlyBracketKeyword_3_0_2; }
		
		//ocl=OCLExpressionCS
		public Assignment getOclAssignment_3_1() { return cOclAssignment_3_1; }
		
		//OCLExpressionCS
		public RuleCall getOclOCLExpressionCSParserRuleCall_3_1_0() { return cOclOCLExpressionCSParserRuleCall_3_1_0; }
		
		//(isForAssociation?='ASSOCINV')?
		public Assignment getIsForAssociationAssignment_4() { return cIsForAssociationAssignment_4; }
		
		//'ASSOCINV'
		public Keyword getIsForAssociationASSOCINVKeyword_4_0() { return cIsForAssociationASSOCINVKeyword_4_0; }
	}
	public class EntityTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.EntityType");
		private final Assignment cEntityAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cEntityEntityCrossReference_0 = (CrossReference)cEntityAssignment.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_0_1 = (RuleCall)cEntityEntityCrossReference_0.eContents().get(1);
		
		//EntityType:
		//    entity=[Entity]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//entity=[Entity]
		public Assignment getEntityAssignment() { return cEntityAssignment; }
		
		//[Entity]
		public CrossReference getEntityEntityCrossReference_0() { return cEntityEntityCrossReference_0; }
		
		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_0_1() { return cEntityEntityIDTerminalRuleCall_0_1; }
	}
	public class EnumEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.EnumEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSimpleNameCSParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementEnumItemParserRuleCall_2_0 = (RuleCall)cElementAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cVerticalLineKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElementAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElementEnumItemParserRuleCall_3_1_0 = (RuleCall)cElementAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EnumEntity:
		//    name=SimpleNameCS '[' element+=EnumItem ('|' element+=EnumItem)* ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=SimpleNameCS '[' element+=EnumItem ('|' element+=EnumItem)* ']'
		public Group getGroup() { return cGroup; }
		
		//name=SimpleNameCS
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//SimpleNameCS
		public RuleCall getNameSimpleNameCSParserRuleCall_0_0() { return cNameSimpleNameCSParserRuleCall_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//element+=EnumItem
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }
		
		//EnumItem
		public RuleCall getElementEnumItemParserRuleCall_2_0() { return cElementEnumItemParserRuleCall_2_0; }
		
		//('|' element+=EnumItem)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'|'
		public Keyword getVerticalLineKeyword_3_0() { return cVerticalLineKeyword_3_0; }
		
		//element+=EnumItem
		public Assignment getElementAssignment_3_1() { return cElementAssignment_3_1; }
		
		//EnumItem
		public RuleCall getElementEnumItemParserRuleCall_3_1_0() { return cElementEnumItemParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class EnumItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.EnumItem");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EnumItem:
		////    name=ENUM
		//    name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////    name=ENUM
		//    name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class USECASE_RELATIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.USECASE_RELATION");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExtendKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//USECASE_RELATION :
		//    'include' | 'extend'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'include' | 'extend'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'include'
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }
		
		//'extend'
		public Keyword getExtendKeyword_1() { return cExtendKeyword_1; }
	}
	public class ContractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.Contract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContractKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cServiceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cServiceServiceCrossReference_1_0 = (CrossReference)cServiceAssignment_1.eContents().get(0);
		private final RuleCall cServiceServiceIDTerminalRuleCall_1_0_1 = (RuleCall)cServiceServiceCrossReference_1_0.eContents().get(1);
		private final Keyword cColonColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOpOperationParserRuleCall_3_0 = (RuleCall)cOpAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDefAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDefDefinitionParserRuleCall_5_0 = (RuleCall)cDefAssignment_5.eContents().get(0);
		private final Assignment cPreAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPrePreconditionParserRuleCall_6_0 = (RuleCall)cPreAssignment_6.eContents().get(0);
		private final Assignment cPostAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPostPostconditionParserRuleCall_7_0 = (RuleCall)cPostAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		///* ----------------- Contract ------------------- */
		//Contract returns Contract:
		//    'Contract' service=[Service]'::'op=Operation '{'
		//        def=Definition?
		//        pre=Precondition
		//        post=Postcondition
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Contract' service=[Service]'::'op=Operation '{'
		//    def=Definition?
		//    pre=Precondition
		//    post=Postcondition
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Contract'
		public Keyword getContractKeyword_0() { return cContractKeyword_0; }
		
		//service=[Service]
		public Assignment getServiceAssignment_1() { return cServiceAssignment_1; }
		
		//[Service]
		public CrossReference getServiceServiceCrossReference_1_0() { return cServiceServiceCrossReference_1_0; }
		
		//ID
		public RuleCall getServiceServiceIDTerminalRuleCall_1_0_1() { return cServiceServiceIDTerminalRuleCall_1_0_1; }
		
		//'::'
		public Keyword getColonColonKeyword_2() { return cColonColonKeyword_2; }
		
		//op=Operation
		public Assignment getOpAssignment_3() { return cOpAssignment_3; }
		
		//Operation
		public RuleCall getOpOperationParserRuleCall_3_0() { return cOpOperationParserRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//def=Definition?
		public Assignment getDefAssignment_5() { return cDefAssignment_5; }
		
		//Definition
		public RuleCall getDefDefinitionParserRuleCall_5_0() { return cDefDefinitionParserRuleCall_5_0; }
		
		//pre=Precondition
		public Assignment getPreAssignment_6() { return cPreAssignment_6; }
		
		//Precondition
		public RuleCall getPrePreconditionParserRuleCall_6_0() { return cPrePreconditionParserRuleCall_6_0; }
		
		//post=Postcondition
		public Assignment getPostAssignment_7() { return cPostAssignment_7; }
		
		//Postcondition
		public RuleCall getPostPostconditionParserRuleCall_7_0() { return cPostPostconditionParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefinitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVariableDeclarationCSParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVariableAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVariableVariableDeclarationCSParserRuleCall_3_1_0 = (RuleCall)cVariableAssignment_3_1.eContents().get(0);
		
		//Definition:
		//    'definition' ':' variable+=VariableDeclarationCS (',' variable+=VariableDeclarationCS)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'definition' ':' variable+=VariableDeclarationCS (',' variable+=VariableDeclarationCS)*
		public Group getGroup() { return cGroup; }
		
		//'definition'
		public Keyword getDefinitionKeyword_0() { return cDefinitionKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//variable+=VariableDeclarationCS
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }
		
		//VariableDeclarationCS
		public RuleCall getVariableVariableDeclarationCSParserRuleCall_2_0() { return cVariableVariableDeclarationCSParserRuleCall_2_0; }
		
		//(',' variable+=VariableDeclarationCS)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//variable+=VariableDeclarationCS
		public Assignment getVariableAssignment_3_1() { return cVariableAssignment_3_1; }
		
		//VariableDeclarationCS
		public RuleCall getVariableVariableDeclarationCSParserRuleCall_3_1_0() { return cVariableVariableDeclarationCSParserRuleCall_3_1_0; }
	}
	public class PreconditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.Precondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPreconditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cOclexpAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cOclexpOCLExpressionCSParserRuleCall_2_0_0 = (RuleCall)cOclexpAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cOclexpAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cOclexpOCLExpressionCSParserRuleCall_2_1_1_0 = (RuleCall)cOclexpAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//Precondition:
		//    'precondition' ':' (oclexp=OCLExpressionCS | '{' oclexp=OCLExpressionCS '}')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'precondition' ':' (oclexp=OCLExpressionCS | '{' oclexp=OCLExpressionCS '}')
		public Group getGroup() { return cGroup; }
		
		//'precondition'
		public Keyword getPreconditionKeyword_0() { return cPreconditionKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(oclexp=OCLExpressionCS | '{' oclexp=OCLExpressionCS '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//oclexp=OCLExpressionCS
		public Assignment getOclexpAssignment_2_0() { return cOclexpAssignment_2_0; }
		
		//OCLExpressionCS
		public RuleCall getOclexpOCLExpressionCSParserRuleCall_2_0_0() { return cOclexpOCLExpressionCSParserRuleCall_2_0_0; }
		
		//'{' oclexp=OCLExpressionCS '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//oclexp=OCLExpressionCS
		public Assignment getOclexpAssignment_2_1_1() { return cOclexpAssignment_2_1_1; }
		
		//OCLExpressionCS
		public RuleCall getOclexpOCLExpressionCSParserRuleCall_2_1_1_0() { return cOclexpOCLExpressionCSParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class PostconditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.Postcondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPostconditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cOclexpAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cOclexpOCLExpressionCSParserRuleCall_2_0_0 = (RuleCall)cOclexpAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cOclexpAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cOclexpOCLExpressionCSParserRuleCall_2_1_1_0 = (RuleCall)cOclexpAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//Postcondition:
		//    'postcondition' ':' (oclexp=OCLExpressionCS | '{' oclexp=OCLExpressionCS '}')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'postcondition' ':' (oclexp=OCLExpressionCS | '{' oclexp=OCLExpressionCS '}')
		public Group getGroup() { return cGroup; }
		
		//'postcondition'
		public Keyword getPostconditionKeyword_0() { return cPostconditionKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(oclexp=OCLExpressionCS | '{' oclexp=OCLExpressionCS '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//oclexp=OCLExpressionCS
		public Assignment getOclexpAssignment_2_0() { return cOclexpAssignment_2_0; }
		
		//OCLExpressionCS
		public RuleCall getOclexpOCLExpressionCSParserRuleCall_2_0_0() { return cOclexpOCLExpressionCSParserRuleCall_2_0_0; }
		
		//'{' oclexp=OCLExpressionCS '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//oclexp=OCLExpressionCS
		public Assignment getOclexpAssignment_2_1_1() { return cOclexpAssignment_2_1_1; }
		
		//OCLExpressionCS
		public RuleCall getOclexpOCLExpressionCSParserRuleCall_2_1_1_0() { return cOclexpOCLExpressionCSParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class OCLExpressionCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.OCLExpressionCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralExpCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLetExpCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIfExpCSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLogicFormulaExpCSParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNestedExpCSParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		///* ------------------ OCLExpressionCS -------------- */
		//OCLExpressionCS returns OCLExpressionCS:
		//      LiteralExpCS | LetExpCS | IfExpCS | LogicFormulaExpCS | NestedExpCS // | -> CallExpCS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralExpCS | LetExpCS | IfExpCS | LogicFormulaExpCS | NestedExpCS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LiteralExpCS
		public RuleCall getLiteralExpCSParserRuleCall_0() { return cLiteralExpCSParserRuleCall_0; }
		
		//LetExpCS
		public RuleCall getLetExpCSParserRuleCall_1() { return cLetExpCSParserRuleCall_1; }
		
		//IfExpCS
		public RuleCall getIfExpCSParserRuleCall_2() { return cIfExpCSParserRuleCall_2; }
		
		//LogicFormulaExpCS
		public RuleCall getLogicFormulaExpCSParserRuleCall_3() { return cLogicFormulaExpCSParserRuleCall_3; }
		
		//NestedExpCS
		public RuleCall getNestedExpCSParserRuleCall_4() { return cNestedExpCSParserRuleCall_4; }
	}
	public class NestedExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.NestedExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNestedExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNestedExpressionOCLExpressionCSParserRuleCall_1_0 = (RuleCall)cNestedExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//NestedExpCS returns NestedExpCS:
		//    '(' nestedExpression=OCLExpressionCS ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' nestedExpression=OCLExpressionCS ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//nestedExpression=OCLExpressionCS
		public Assignment getNestedExpressionAssignment_1() { return cNestedExpressionAssignment_1; }
		
		//OCLExpressionCS
		public RuleCall getNestedExpressionOCLExpressionCSParserRuleCall_1_0() { return cNestedExpressionOCLExpressionCSParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class LogicFormulaExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.LogicFormulaExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAtomicexpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAtomicexpAtomicExpressionParserRuleCall_0_0 = (RuleCall)cAtomicexpAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cConnectorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cConnectorAlternatives_1_0_0 = (Alternatives)cConnectorAssignment_1_0.eContents().get(0);
		private final Keyword cConnectorAndKeyword_1_0_0_0 = (Keyword)cConnectorAlternatives_1_0_0.eContents().get(0);
		private final Keyword cConnectorOrKeyword_1_0_0_1 = (Keyword)cConnectorAlternatives_1_0_0.eContents().get(1);
		private final Assignment cAtomicexpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cAtomicexpAlternatives_1_1_0 = (Alternatives)cAtomicexpAssignment_1_1.eContents().get(0);
		private final RuleCall cAtomicexpAtomicExpressionParserRuleCall_1_1_0_0 = (RuleCall)cAtomicexpAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cAtomicexpIfExpCSParserRuleCall_1_1_0_1 = (RuleCall)cAtomicexpAlternatives_1_1_0.eContents().get(1);
		private final RuleCall cAtomicexpNestedExpCSParserRuleCall_1_1_0_2 = (RuleCall)cAtomicexpAlternatives_1_1_0.eContents().get(2);
		
		//LogicFormulaExpCS returns LogicFormulaExpCS:
		//     atomicexp+=(AtomicExpression) (-> connector+=('and' | 'or')  atomicexp+=(AtomicExpression | IfExpCS | NestedExpCS))*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//atomicexp+=(AtomicExpression) (-> connector+=('and' | 'or')  atomicexp+=(AtomicExpression | IfExpCS | NestedExpCS))*
		public Group getGroup() { return cGroup; }
		
		//atomicexp+=(AtomicExpression)
		public Assignment getAtomicexpAssignment_0() { return cAtomicexpAssignment_0; }
		
		//(AtomicExpression)
		public RuleCall getAtomicexpAtomicExpressionParserRuleCall_0_0() { return cAtomicexpAtomicExpressionParserRuleCall_0_0; }
		
		//(-> connector+=('and' | 'or')  atomicexp+=(AtomicExpression | IfExpCS | NestedExpCS))*
		public Group getGroup_1() { return cGroup_1; }
		
		//-> connector+=('and' | 'or')
		public Assignment getConnectorAssignment_1_0() { return cConnectorAssignment_1_0; }
		
		//('and' | 'or')
		public Alternatives getConnectorAlternatives_1_0_0() { return cConnectorAlternatives_1_0_0; }
		
		//'and'
		public Keyword getConnectorAndKeyword_1_0_0_0() { return cConnectorAndKeyword_1_0_0_0; }
		
		//'or'
		public Keyword getConnectorOrKeyword_1_0_0_1() { return cConnectorOrKeyword_1_0_0_1; }
		
		//atomicexp+=(AtomicExpression | IfExpCS | NestedExpCS)
		public Assignment getAtomicexpAssignment_1_1() { return cAtomicexpAssignment_1_1; }
		
		//(AtomicExpression | IfExpCS | NestedExpCS)
		public Alternatives getAtomicexpAlternatives_1_1_0() { return cAtomicexpAlternatives_1_1_0; }
		
		//AtomicExpression
		public RuleCall getAtomicexpAtomicExpressionParserRuleCall_1_1_0_0() { return cAtomicexpAtomicExpressionParserRuleCall_1_1_0_0; }
		
		//IfExpCS
		public RuleCall getAtomicexpIfExpCSParserRuleCall_1_1_0_1() { return cAtomicexpIfExpCSParserRuleCall_1_1_0_1; }
		
		//NestedExpCS
		public RuleCall getAtomicexpNestedExpCSParserRuleCall_1_1_0_2() { return cAtomicexpNestedExpCSParserRuleCall_1_1_0_2; }
	}
	public class AtomicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.AtomicExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftsideAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftsideLeftSubAtomicExpressionParserRuleCall_0_0 = (RuleCall)cLeftsideAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cInfixopAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cInfixopInfixCompareOperatorNameParserRuleCall_1_0_0 = (RuleCall)cInfixopAssignment_1_0.eContents().get(0);
		private final Assignment cRightsideAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightsideRightSubAtomicExpressionParserRuleCall_1_1_0 = (RuleCall)cRightsideAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cOpAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cOpInfixOperatorNameParserRuleCall_1_2_0_0 = (RuleCall)cOpAssignment_1_2_0.eContents().get(0);
		private final Alternatives cAlternatives_1_2_1 = (Alternatives)cGroup_1_2.eContents().get(1);
		private final Assignment cNumAssignment_1_2_1_0 = (Assignment)cAlternatives_1_2_1.eContents().get(0);
		private final RuleCall cNumPrimitiveLiteralExpCSParserRuleCall_1_2_1_0_0 = (RuleCall)cNumAssignment_1_2_1_0.eContents().get(0);
		private final Assignment cExpAssignment_1_2_1_1 = (Assignment)cAlternatives_1_2_1.eContents().get(1);
		private final RuleCall cExpAtomicExpressionParserRuleCall_1_2_1_1_0 = (RuleCall)cExpAssignment_1_2_1_1.eContents().get(0);
		
		//AtomicExpression returns AtomicExpression:
		//        leftside=(LeftSubAtomicExpression) (infixop=InfixCompareOperatorName rightside=(RightSubAtomicExpression) (op=InfixOperatorName (num=PrimitiveLiteralExpCS | exp=AtomicExpression) )?)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//leftside=(LeftSubAtomicExpression) (infixop=InfixCompareOperatorName rightside=(RightSubAtomicExpression) (op=InfixOperatorName (num=PrimitiveLiteralExpCS | exp=AtomicExpression) )?)?
		public Group getGroup() { return cGroup; }
		
		//leftside=(LeftSubAtomicExpression)
		public Assignment getLeftsideAssignment_0() { return cLeftsideAssignment_0; }
		
		//(LeftSubAtomicExpression)
		public RuleCall getLeftsideLeftSubAtomicExpressionParserRuleCall_0_0() { return cLeftsideLeftSubAtomicExpressionParserRuleCall_0_0; }
		
		//(infixop=InfixCompareOperatorName rightside=(RightSubAtomicExpression) (op=InfixOperatorName (num=PrimitiveLiteralExpCS | exp=AtomicExpression) )?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//infixop=InfixCompareOperatorName
		public Assignment getInfixopAssignment_1_0() { return cInfixopAssignment_1_0; }
		
		//InfixCompareOperatorName
		public RuleCall getInfixopInfixCompareOperatorNameParserRuleCall_1_0_0() { return cInfixopInfixCompareOperatorNameParserRuleCall_1_0_0; }
		
		//rightside=(RightSubAtomicExpression)
		public Assignment getRightsideAssignment_1_1() { return cRightsideAssignment_1_1; }
		
		//(RightSubAtomicExpression)
		public RuleCall getRightsideRightSubAtomicExpressionParserRuleCall_1_1_0() { return cRightsideRightSubAtomicExpressionParserRuleCall_1_1_0; }
		
		//(op=InfixOperatorName (num=PrimitiveLiteralExpCS | exp=AtomicExpression) )?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//op=InfixOperatorName
		public Assignment getOpAssignment_1_2_0() { return cOpAssignment_1_2_0; }
		
		//InfixOperatorName
		public RuleCall getOpInfixOperatorNameParserRuleCall_1_2_0_0() { return cOpInfixOperatorNameParserRuleCall_1_2_0_0; }
		
		//(num=PrimitiveLiteralExpCS | exp=AtomicExpression)
		public Alternatives getAlternatives_1_2_1() { return cAlternatives_1_2_1; }
		
		//num=PrimitiveLiteralExpCS
		public Assignment getNumAssignment_1_2_1_0() { return cNumAssignment_1_2_1_0; }
		
		//PrimitiveLiteralExpCS
		public RuleCall getNumPrimitiveLiteralExpCSParserRuleCall_1_2_1_0_0() { return cNumPrimitiveLiteralExpCSParserRuleCall_1_2_1_0_0; }
		
		//exp=AtomicExpression
		public Assignment getExpAssignment_1_2_1_1() { return cExpAssignment_1_2_1_1; }
		
		//AtomicExpression
		public RuleCall getExpAtomicExpressionParserRuleCall_1_2_1_1_0() { return cExpAtomicExpressionParserRuleCall_1_2_1_1_0; }
	}
	public class LeftSubAtomicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.LeftSubAtomicExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableExpCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCallExpCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////AtomicExpression returns AtomicExpression:
		////        leftside=(VariableExpCS | CallExpCS) (infixop=InfixCompareOperatorName rightside=(LiteralExpCS | VariableExpCS | CallExpCS) (op=InfixOperatorName (num=OCLExpressionCS) )?)?
		////;
		//LeftSubAtomicExpression :
		//    VariableExpCS |  CallExpCS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableExpCS |  CallExpCS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VariableExpCS
		public RuleCall getVariableExpCSParserRuleCall_0() { return cVariableExpCSParserRuleCall_0; }
		
		//CallExpCS
		public RuleCall getCallExpCSParserRuleCall_1() { return cCallExpCSParserRuleCall_1; }
	}
	public class RightSubAtomicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.RightSubAtomicExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralExpCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableExpCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCallExpCSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//RightSubAtomicExpression :
		//    LiteralExpCS | VariableExpCS | CallExpCS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralExpCS | VariableExpCS | CallExpCS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LiteralExpCS
		public RuleCall getLiteralExpCSParserRuleCall_0() { return cLiteralExpCSParserRuleCall_0; }
		
		//VariableExpCS
		public RuleCall getVariableExpCSParserRuleCall_1() { return cVariableExpCSParserRuleCall_1; }
		
		//CallExpCS
		public RuleCall getCallExpCSParserRuleCall_2() { return cCallExpCSParserRuleCall_2; }
	}
	public class InfixCompareOperatorNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.InfixCompareOperatorName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignGreaterThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		////RightExpression:
		////    LiteralExpCS | VariableExpCS | CallExpCS
		////;
		//InfixCompareOperatorName:
		//     '>' | '<' | '>=' | '<=' | '=' | '<>'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'>' | '<' | '>=' | '<=' | '=' | '<>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_2() { return cGreaterThanSignEqualsSignKeyword_2; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword_5() { return cLessThanSignGreaterThanSignKeyword_5; }
	}
	public class InfixOperatorNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.InfixOperatorName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//InfixOperatorName:
		//    '*' | '/' | '+' | '-'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | '/' | '+' | '-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_3() { return cHyphenMinusKeyword_3; }
	}
	public class InfixlogicConjunctionOperatorNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.InfixlogicConjunctionOperatorName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cXorKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cImpliesKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//InfixlogicConjunctionOperatorName:
		//    'and' | 'or' | 'xor' | 'implies'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'and' | 'or' | 'xor' | 'implies'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'and'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//'or'
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
		
		//'xor'
		public Keyword getXorKeyword_2() { return cXorKeyword_2; }
		
		//'implies'
		public Keyword getImpliesKeyword_3() { return cImpliesKeyword_3; }
	}
	public class EssentialOCLNavigationOperatorNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.EssentialOCLNavigationOperatorName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cQuestionMarkFullStopKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cQuestionMarkHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//EssentialOCLNavigationOperatorName:
		//    '.' | '->' | '?.' | '?->';
		@Override public ParserRule getRule() { return rule; }
		
		//'.' | '->' | '?.' | '?->'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//'?.'
		public Keyword getQuestionMarkFullStopKeyword_2() { return cQuestionMarkFullStopKeyword_2; }
		
		//'?->'
		public Keyword getQuestionMarkHyphenMinusGreaterThanSignKeyword_3() { return cQuestionMarkHyphenMinusGreaterThanSignKeyword_3; }
	}
	public class CallExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.CallExpCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFeatureCallExpCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLoopExpCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///* ------------------ CallExpCS ---------------- */
		//CallExpCS:
		//    FeatureCallExpCS |
		//    LoopExpCS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FeatureCallExpCS |
		//LoopExpCS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FeatureCallExpCS
		public RuleCall getFeatureCallExpCSParserRuleCall_0() { return cFeatureCallExpCSParserRuleCall_0; }
		
		//LoopExpCS
		public RuleCall getLoopExpCSParserRuleCall_1() { return cLoopExpCSParserRuleCall_1; }
	}
	public class LoopExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.LoopExpCS");
		private final RuleCall cIteratorExpCSParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//LoopExpCS:
		//    IteratorExpCS //| IterateExpCS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//IteratorExpCS
		public RuleCall getIteratorExpCSParserRuleCall() { return cIteratorExpCSParserRuleCall; }
	}
	public class IteratorExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.IteratorExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cObjectCallAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Alternatives cObjectCallAlternatives_0_0_0 = (Alternatives)cObjectCallAssignment_0_0.eContents().get(0);
		private final RuleCall cObjectCallClassiferCallExpCSParserRuleCall_0_0_0_0 = (RuleCall)cObjectCallAlternatives_0_0_0.eContents().get(0);
		private final RuleCall cObjectCallPropertyCallExpCSParserRuleCall_0_0_0_1 = (RuleCall)cObjectCallAlternatives_0_0_0.eContents().get(1);
		private final Assignment cSimpleCallAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cSimpleCallSimpleNameCSParserRuleCall_0_1_0 = (RuleCall)cSimpleCallAssignment_0_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIteratorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIteratorIteratorIdentifierParserRuleCall_2_0 = (RuleCall)cIteratorAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cVariblesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cVariblesVariableDeclarationCSParserRuleCall_4_0_0 = (RuleCall)cVariblesAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cVariblesAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cVariblesVariableDeclarationCSParserRuleCall_4_1_1_0 = (RuleCall)cVariblesAssignment_4_1_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cExpAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cExpAlternatives_5_0 = (Alternatives)cExpAssignment_5.eContents().get(0);
		private final RuleCall cExpLogicFormulaExpCSParserRuleCall_5_0_0 = (RuleCall)cExpAlternatives_5_0.eContents().get(0);
		private final RuleCall cExpIfExpCSParserRuleCall_5_0_1 = (RuleCall)cExpAlternatives_5_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////IterateExpCS:
		////    SimpleNameCS '->' 'iterate'
		////    '('
		////        (first=VariableDeclarationCS ';')? next=VariableDeclarationCS '|' exp=OCLExpressionCS
		////    ')'
		////;
		////IteratorExpCS:
		////    (objectCall=FeatureCallExpCS | simpleCall=SimpleNameCS) '->' iterator=IteratorIdentifier '(' (varibles+=VariableDeclarationCS (',' varibles+=VariableDeclarationCS)? '|')? -> exp=(LogicFormulaExpCS | IfExpCS) ')'
		////;
		//IteratorExpCS:
		//    (objectCall=(ClassiferCallExpCS | PropertyCallExpCS) | simpleCall=SimpleNameCS) '->' iterator=IteratorIdentifier '(' (varibles+=VariableDeclarationCS (',' varibles+=VariableDeclarationCS)* '|')?  -> exp=(LogicFormulaExpCS | IfExpCS ) ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(objectCall=(ClassiferCallExpCS | PropertyCallExpCS) | simpleCall=SimpleNameCS) '->' iterator=IteratorIdentifier '(' (varibles+=VariableDeclarationCS (',' varibles+=VariableDeclarationCS)* '|')?  -> exp=(LogicFormulaExpCS | IfExpCS ) ')'
		public Group getGroup() { return cGroup; }
		
		//(objectCall=(ClassiferCallExpCS | PropertyCallExpCS) | simpleCall=SimpleNameCS)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//objectCall=(ClassiferCallExpCS | PropertyCallExpCS)
		public Assignment getObjectCallAssignment_0_0() { return cObjectCallAssignment_0_0; }
		
		//(ClassiferCallExpCS | PropertyCallExpCS)
		public Alternatives getObjectCallAlternatives_0_0_0() { return cObjectCallAlternatives_0_0_0; }
		
		//ClassiferCallExpCS
		public RuleCall getObjectCallClassiferCallExpCSParserRuleCall_0_0_0_0() { return cObjectCallClassiferCallExpCSParserRuleCall_0_0_0_0; }
		
		//PropertyCallExpCS
		public RuleCall getObjectCallPropertyCallExpCSParserRuleCall_0_0_0_1() { return cObjectCallPropertyCallExpCSParserRuleCall_0_0_0_1; }
		
		//simpleCall=SimpleNameCS
		public Assignment getSimpleCallAssignment_0_1() { return cSimpleCallAssignment_0_1; }
		
		//SimpleNameCS
		public RuleCall getSimpleCallSimpleNameCSParserRuleCall_0_1_0() { return cSimpleCallSimpleNameCSParserRuleCall_0_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//iterator=IteratorIdentifier
		public Assignment getIteratorAssignment_2() { return cIteratorAssignment_2; }
		
		//IteratorIdentifier
		public RuleCall getIteratorIteratorIdentifierParserRuleCall_2_0() { return cIteratorIteratorIdentifierParserRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(varibles+=VariableDeclarationCS (',' varibles+=VariableDeclarationCS)* '|')?
		public Group getGroup_4() { return cGroup_4; }
		
		//varibles+=VariableDeclarationCS
		public Assignment getVariblesAssignment_4_0() { return cVariblesAssignment_4_0; }
		
		//VariableDeclarationCS
		public RuleCall getVariblesVariableDeclarationCSParserRuleCall_4_0_0() { return cVariblesVariableDeclarationCSParserRuleCall_4_0_0; }
		
		//(',' varibles+=VariableDeclarationCS)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//varibles+=VariableDeclarationCS
		public Assignment getVariblesAssignment_4_1_1() { return cVariblesAssignment_4_1_1; }
		
		//VariableDeclarationCS
		public RuleCall getVariblesVariableDeclarationCSParserRuleCall_4_1_1_0() { return cVariblesVariableDeclarationCSParserRuleCall_4_1_1_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_4_2() { return cVerticalLineKeyword_4_2; }
		
		//-> exp=(LogicFormulaExpCS | IfExpCS )
		public Assignment getExpAssignment_5() { return cExpAssignment_5; }
		
		//(LogicFormulaExpCS | IfExpCS )
		public Alternatives getExpAlternatives_5_0() { return cExpAlternatives_5_0; }
		
		//LogicFormulaExpCS
		public RuleCall getExpLogicFormulaExpCSParserRuleCall_5_0_0() { return cExpLogicFormulaExpCSParserRuleCall_5_0_0; }
		
		//IfExpCS
		public RuleCall getExpIfExpCSParserRuleCall_5_0_1() { return cExpIfExpCSParserRuleCall_5_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class EntityAttributeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.EntityAttributeName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSimpleNameCSParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EntityAttributeName:
		//    name=SimpleNameCS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=SimpleNameCS
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//SimpleNameCS
		public RuleCall getNameSimpleNameCSParserRuleCall_0() { return cNameSimpleNameCSParserRuleCall_0; }
	}
	public class IteratorIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.IteratorIdentifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cOneKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExistsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSelectKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAnyKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cForAllKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cCollectKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cIsUniqueKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//IteratorIdentifier:
		//    'one' | 'exists' | 'select' | 'any' | 'forAll' | 'collect' | 'isUnique'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'one' | 'exists' | 'select' | 'any' | 'forAll' | 'collect' | 'isUnique'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'one'
		public Keyword getOneKeyword_0() { return cOneKeyword_0; }
		
		//'exists'
		public Keyword getExistsKeyword_1() { return cExistsKeyword_1; }
		
		//'select'
		public Keyword getSelectKeyword_2() { return cSelectKeyword_2; }
		
		//'any'
		public Keyword getAnyKeyword_3() { return cAnyKeyword_3; }
		
		//'forAll'
		public Keyword getForAllKeyword_4() { return cForAllKeyword_4; }
		
		//'collect'
		public Keyword getCollectKeyword_5() { return cCollectKeyword_5; }
		
		//'isUnique'
		public Keyword getIsUniqueKeyword_6() { return cIsUniqueKeyword_6; }
	}
	public class ArgumentsCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.ArgumentsCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstOCLExpressionCSParserRuleCall_0_0 = (RuleCall)cFirstAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNextAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNextArgumentsCSParserRuleCall_1_1_0 = (RuleCall)cNextAssignment_1_1.eContents().get(0);
		
		//ArgumentsCS:
		//    first=OCLExpressionCS (',' next=ArgumentsCS)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//first=OCLExpressionCS (',' next=ArgumentsCS)?
		public Group getGroup() { return cGroup; }
		
		//first=OCLExpressionCS
		public Assignment getFirstAssignment_0() { return cFirstAssignment_0; }
		
		//OCLExpressionCS
		public RuleCall getFirstOCLExpressionCSParserRuleCall_0_0() { return cFirstOCLExpressionCSParserRuleCall_0_0; }
		
		//(',' next=ArgumentsCS)?
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//next=ArgumentsCS
		public Assignment getNextAssignment_1_1() { return cNextAssignment_1_1; }
		
		//ArgumentsCS
		public RuleCall getNextArgumentsCSParserRuleCall_1_1_0() { return cNextArgumentsCSParserRuleCall_1_1_0; }
	}
	public class FeatureCallExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.FeatureCallExpCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPropertyCallExpCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassiferCallExpCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStandardOperationExpCSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStandardNavigationCallExpCSParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cOperationCallExpCSParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//FeatureCallExpCS:
		//    PropertyCallExpCS |
		//    ClassiferCallExpCS |
		//    StandardOperationExpCS |
		//    StandardNavigationCallExpCS |
		//    OperationCallExpCS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PropertyCallExpCS |
		//ClassiferCallExpCS |
		//StandardOperationExpCS |
		//StandardNavigationCallExpCS |
		//OperationCallExpCS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PropertyCallExpCS
		public RuleCall getPropertyCallExpCSParserRuleCall_0() { return cPropertyCallExpCSParserRuleCall_0; }
		
		//ClassiferCallExpCS
		public RuleCall getClassiferCallExpCSParserRuleCall_1() { return cClassiferCallExpCSParserRuleCall_1; }
		
		//StandardOperationExpCS
		public RuleCall getStandardOperationExpCSParserRuleCall_2() { return cStandardOperationExpCSParserRuleCall_2; }
		
		//StandardNavigationCallExpCS
		public RuleCall getStandardNavigationCallExpCSParserRuleCall_3() { return cStandardNavigationCallExpCSParserRuleCall_3; }
		
		//OperationCallExpCS
		public RuleCall getOperationCallExpCSParserRuleCall_4() { return cOperationCallExpCSParserRuleCall_4; }
	}
	public class StandardNavigationCallExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.StandardNavigationCallExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cClassifercallAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cClassifercallClassiferCallExpCSParserRuleCall_0_0_0 = (RuleCall)cClassifercallAssignment_0_0.eContents().get(0);
		private final Assignment cPropertycallAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cPropertycallPropertyCallExpCSParserRuleCall_0_1_0 = (RuleCall)cPropertycallAssignment_0_1.eContents().get(0);
		private final Assignment cObjectAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cObjectSimpleNameCSParserRuleCall_0_2_0 = (RuleCall)cObjectAssignment_0_2.eContents().get(0);
		private final Assignment cNavopAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNavopHyphenMinusGreaterThanSignKeyword_1_0 = (Keyword)cNavopAssignment_1.eContents().get(0);
		private final Assignment cStandardOPAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStandardOPStandardCollectionOperationParserRuleCall_2_0 = (RuleCall)cStandardOPAssignment_2.eContents().get(0);
		
		//StandardNavigationCallExpCS:
		//    (classifercall=ClassiferCallExpCS | propertycall=PropertyCallExpCS | object=SimpleNameCS) navop='->' standardOP=StandardCollectionOperation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(classifercall=ClassiferCallExpCS | propertycall=PropertyCallExpCS | object=SimpleNameCS) navop='->' standardOP=StandardCollectionOperation
		public Group getGroup() { return cGroup; }
		
		//(classifercall=ClassiferCallExpCS | propertycall=PropertyCallExpCS | object=SimpleNameCS)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//classifercall=ClassiferCallExpCS
		public Assignment getClassifercallAssignment_0_0() { return cClassifercallAssignment_0_0; }
		
		//ClassiferCallExpCS
		public RuleCall getClassifercallClassiferCallExpCSParserRuleCall_0_0_0() { return cClassifercallClassiferCallExpCSParserRuleCall_0_0_0; }
		
		//propertycall=PropertyCallExpCS
		public Assignment getPropertycallAssignment_0_1() { return cPropertycallAssignment_0_1; }
		
		//PropertyCallExpCS
		public RuleCall getPropertycallPropertyCallExpCSParserRuleCall_0_1_0() { return cPropertycallPropertyCallExpCSParserRuleCall_0_1_0; }
		
		//object=SimpleNameCS
		public Assignment getObjectAssignment_0_2() { return cObjectAssignment_0_2; }
		
		//SimpleNameCS
		public RuleCall getObjectSimpleNameCSParserRuleCall_0_2_0() { return cObjectSimpleNameCSParserRuleCall_0_2_0; }
		
		//navop='->'
		public Assignment getNavopAssignment_1() { return cNavopAssignment_1; }
		
		//'->'
		public Keyword getNavopHyphenMinusGreaterThanSignKeyword_1_0() { return cNavopHyphenMinusGreaterThanSignKeyword_1_0; }
		
		//standardOP=StandardCollectionOperation
		public Assignment getStandardOPAssignment_2() { return cStandardOPAssignment_2; }
		
		//StandardCollectionOperation
		public RuleCall getStandardOPStandardCollectionOperationParserRuleCall_2_0() { return cStandardOPStandardCollectionOperationParserRuleCall_2_0; }
	}
	public class StandardOperationExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.StandardOperationExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cObjectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cObjectVariableExpCSParserRuleCall_0_0 = (RuleCall)cObjectAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cPropertyAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cPropertyVariableExpCSParserRuleCall_2_0_0 = (RuleCall)cPropertyAssignment_2_0.eContents().get(0);
		private final Assignment cPremarkAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPremarkIsMarkedPreCSParserRuleCall_2_1_0 = (RuleCall)cPremarkAssignment_2_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cPredefinedopAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredefinedopPredefineOpParserRuleCall_3_0 = (RuleCall)cPredefinedopAssignment_3.eContents().get(0);
		
		//StandardOperationExpCS:
		//    object=VariableExpCS '.' (property=VariableExpCS premark=IsMarkedPreCS? '.')? predefinedop=(PredefineOp)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//object=VariableExpCS '.' (property=VariableExpCS premark=IsMarkedPreCS? '.')? predefinedop=(PredefineOp)
		public Group getGroup() { return cGroup; }
		
		//object=VariableExpCS
		public Assignment getObjectAssignment_0() { return cObjectAssignment_0; }
		
		//VariableExpCS
		public RuleCall getObjectVariableExpCSParserRuleCall_0_0() { return cObjectVariableExpCSParserRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//(property=VariableExpCS premark=IsMarkedPreCS? '.')?
		public Group getGroup_2() { return cGroup_2; }
		
		//property=VariableExpCS
		public Assignment getPropertyAssignment_2_0() { return cPropertyAssignment_2_0; }
		
		//VariableExpCS
		public RuleCall getPropertyVariableExpCSParserRuleCall_2_0_0() { return cPropertyVariableExpCSParserRuleCall_2_0_0; }
		
		//premark=IsMarkedPreCS?
		public Assignment getPremarkAssignment_2_1() { return cPremarkAssignment_2_1; }
		
		//IsMarkedPreCS
		public RuleCall getPremarkIsMarkedPreCSParserRuleCall_2_1_0() { return cPremarkIsMarkedPreCSParserRuleCall_2_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2_2() { return cFullStopKeyword_2_2; }
		
		//predefinedop=(PredefineOp)
		public Assignment getPredefinedopAssignment_3() { return cPredefinedopAssignment_3; }
		
		//(PredefineOp)
		public RuleCall getPredefinedopPredefineOpParserRuleCall_3_0() { return cPredefinedopPredefineOpParserRuleCall_3_0; }
	}
	public class PredefineOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.PredefineOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStandardNoneParameterOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStandardParameterOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStandardDateOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//PredefineOp:
		//    StandardNoneParameterOperation |  StandardParameterOperation  | StandardDateOperation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//StandardNoneParameterOperation |  StandardParameterOperation  | StandardDateOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StandardNoneParameterOperation
		public RuleCall getStandardNoneParameterOperationParserRuleCall_0() { return cStandardNoneParameterOperationParserRuleCall_0; }
		
		//StandardParameterOperation
		public RuleCall getStandardParameterOperationParserRuleCall_1() { return cStandardParameterOperationParserRuleCall_1; }
		
		//StandardDateOperation
		public RuleCall getStandardDateOperationParserRuleCall_2() { return cStandardDateOperationParserRuleCall_2; }
	}
	public class StandardNoneParameterOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.StandardNoneParameterOperation");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameOclIsNewKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameOclIsUndefinedKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		private final Keyword cNameIsEmptyKeyword_0_2 = (Keyword)cNameAlternatives_0.eContents().get(2);
		private final Keyword cNameNotEmptyKeyword_0_3 = (Keyword)cNameAlternatives_0.eContents().get(3);
		private final Keyword cNameOclIsInvaildKeyword_0_4 = (Keyword)cNameAlternatives_0.eContents().get(4);
		private final Keyword cNameSizeKeyword_0_5 = (Keyword)cNameAlternatives_0.eContents().get(5);
		private final Keyword cNameSumKeyword_0_6 = (Keyword)cNameAlternatives_0.eContents().get(6);
		
		//StandardNoneParameterOperation:
		//    name=('oclIsNew()' | 'oclIsUndefined()' | 'isEmpty()' | 'notEmpty()' | 'oclIsInvaild()' | 'size()' | 'sum()')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=('oclIsNew()' | 'oclIsUndefined()' | 'isEmpty()' | 'notEmpty()' | 'oclIsInvaild()' | 'size()' | 'sum()')
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//('oclIsNew()' | 'oclIsUndefined()' | 'isEmpty()' | 'notEmpty()' | 'oclIsInvaild()' | 'size()' | 'sum()')
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//'oclIsNew()'
		public Keyword getNameOclIsNewKeyword_0_0() { return cNameOclIsNewKeyword_0_0; }
		
		//'oclIsUndefined()'
		public Keyword getNameOclIsUndefinedKeyword_0_1() { return cNameOclIsUndefinedKeyword_0_1; }
		
		//'isEmpty()'
		public Keyword getNameIsEmptyKeyword_0_2() { return cNameIsEmptyKeyword_0_2; }
		
		//'notEmpty()'
		public Keyword getNameNotEmptyKeyword_0_3() { return cNameNotEmptyKeyword_0_3; }
		
		//'oclIsInvaild()'
		public Keyword getNameOclIsInvaildKeyword_0_4() { return cNameOclIsInvaildKeyword_0_4; }
		
		//'size()'
		public Keyword getNameSizeKeyword_0_5() { return cNameSizeKeyword_0_5; }
		
		//'sum()'
		public Keyword getNameSumKeyword_0_6() { return cNameSumKeyword_0_6; }
	}
	public class StandardParameterOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.StandardParameterOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameOclIsTypeOfKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cTypeAlternatives_2_0 = (Alternatives)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypePrimitiveTypeCSParserRuleCall_2_0_0 = (RuleCall)cTypeAlternatives_2_0.eContents().get(0);
		private final RuleCall cTypeEntityTypeParserRuleCall_2_0_1 = (RuleCall)cTypeAlternatives_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StandardParameterOperation:
		//    name='oclIsTypeOf' '(' type=(PrimitiveTypeCS | EntityType ) ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name='oclIsTypeOf' '(' type=(PrimitiveTypeCS | EntityType ) ')'
		public Group getGroup() { return cGroup; }
		
		//name='oclIsTypeOf'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'oclIsTypeOf'
		public Keyword getNameOclIsTypeOfKeyword_0_0() { return cNameOclIsTypeOfKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//type=(PrimitiveTypeCS | EntityType )
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//(PrimitiveTypeCS | EntityType )
		public Alternatives getTypeAlternatives_2_0() { return cTypeAlternatives_2_0; }
		
		//PrimitiveTypeCS
		public RuleCall getTypePrimitiveTypeCSParserRuleCall_2_0_0() { return cTypePrimitiveTypeCSParserRuleCall_2_0_0; }
		
		//EntityType
		public RuleCall getTypeEntityTypeParserRuleCall_2_0_1() { return cTypeEntityTypeParserRuleCall_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class StandardCollectionOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.StandardCollectionOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final Keyword cNameIncludesKeyword_0_0_0 = (Keyword)cNameAlternatives_0_0.eContents().get(0);
		private final Keyword cNameExcludesKeyword_0_0_1 = (Keyword)cNameAlternatives_0_0.eContents().get(1);
		private final Keyword cNameIncludesAllKeyword_0_0_2 = (Keyword)cNameAlternatives_0_0.eContents().get(2);
		private final Keyword cNameExcludesAllKeyword_0_0_3 = (Keyword)cNameAlternatives_0_0.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cObjectAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObjectSimpleNameCSParserRuleCall_2_0 = (RuleCall)cObjectAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StandardCollectionOperation:
		//    name=("includes" | "excludes" | "includesAll" | "excludesAll") '(' object=SimpleNameCS ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=("includes" | "excludes" | "includesAll" | "excludesAll") '(' object=SimpleNameCS ')'
		public Group getGroup() { return cGroup; }
		
		//name=("includes" | "excludes" | "includesAll" | "excludesAll")
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//("includes" | "excludes" | "includesAll" | "excludesAll")
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }
		
		//"includes"
		public Keyword getNameIncludesKeyword_0_0_0() { return cNameIncludesKeyword_0_0_0; }
		
		//"excludes"
		public Keyword getNameExcludesKeyword_0_0_1() { return cNameExcludesKeyword_0_0_1; }
		
		//"includesAll"
		public Keyword getNameIncludesAllKeyword_0_0_2() { return cNameIncludesAllKeyword_0_0_2; }
		
		//"excludesAll"
		public Keyword getNameExcludesAllKeyword_0_0_3() { return cNameExcludesAllKeyword_0_0_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//object=SimpleNameCS
		public Assignment getObjectAssignment_2() { return cObjectAssignment_2; }
		
		//SimpleNameCS
		public RuleCall getObjectSimpleNameCSParserRuleCall_2_0() { return cObjectSimpleNameCSParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class StandardDateOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.StandardDateOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final Keyword cNameAfterKeyword_0_0_0 = (Keyword)cNameAlternatives_0_0.eContents().get(0);
		private final Keyword cNameBeforeKeyword_0_0_1 = (Keyword)cNameAlternatives_0_0.eContents().get(1);
		private final Keyword cNameIsAfterKeyword_0_0_2 = (Keyword)cNameAlternatives_0_0.eContents().get(2);
		private final Keyword cNameIsBeforeKeyword_0_0_3 = (Keyword)cNameAlternatives_0_0.eContents().get(3);
		private final Keyword cNameIsEqualKeyword_0_0_4 = (Keyword)cNameAlternatives_0_0.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cObjectAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cObjectSimpleNameCSParserRuleCall_2_0_0 = (RuleCall)cObjectAssignment_2_0.eContents().get(0);
		private final Assignment cDatenumAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cDatenumNumberLiteralExpCSParserRuleCall_2_1_0 = (RuleCall)cDatenumAssignment_2_1.eContents().get(0);
		private final Assignment cProcallAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cProcallPropertyCallExpCSParserRuleCall_2_2_0 = (RuleCall)cProcallAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFullStopKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNestedAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNestedStandardDateOperationParserRuleCall_4_1_0 = (RuleCall)cNestedAssignment_4_1.eContents().get(0);
		
		//StandardDateOperation:
		//    name=("After" | "Before" | "isAfter" | "isBefore" | "isEqual" ) '(' (object=SimpleNameCS | datenum=NumberLiteralExpCS | procall=PropertyCallExpCS) ')' ('.' nested=StandardDateOperation)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=("After" | "Before" | "isAfter" | "isBefore" | "isEqual" ) '(' (object=SimpleNameCS | datenum=NumberLiteralExpCS | procall=PropertyCallExpCS) ')' ('.' nested=StandardDateOperation)?
		public Group getGroup() { return cGroup; }
		
		//name=("After" | "Before" | "isAfter" | "isBefore" | "isEqual" )
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//("After" | "Before" | "isAfter" | "isBefore" | "isEqual" )
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }
		
		//"After"
		public Keyword getNameAfterKeyword_0_0_0() { return cNameAfterKeyword_0_0_0; }
		
		//"Before"
		public Keyword getNameBeforeKeyword_0_0_1() { return cNameBeforeKeyword_0_0_1; }
		
		//"isAfter"
		public Keyword getNameIsAfterKeyword_0_0_2() { return cNameIsAfterKeyword_0_0_2; }
		
		//"isBefore"
		public Keyword getNameIsBeforeKeyword_0_0_3() { return cNameIsBeforeKeyword_0_0_3; }
		
		//"isEqual"
		public Keyword getNameIsEqualKeyword_0_0_4() { return cNameIsEqualKeyword_0_0_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(object=SimpleNameCS | datenum=NumberLiteralExpCS | procall=PropertyCallExpCS)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//object=SimpleNameCS
		public Assignment getObjectAssignment_2_0() { return cObjectAssignment_2_0; }
		
		//SimpleNameCS
		public RuleCall getObjectSimpleNameCSParserRuleCall_2_0_0() { return cObjectSimpleNameCSParserRuleCall_2_0_0; }
		
		//datenum=NumberLiteralExpCS
		public Assignment getDatenumAssignment_2_1() { return cDatenumAssignment_2_1; }
		
		//NumberLiteralExpCS
		public RuleCall getDatenumNumberLiteralExpCSParserRuleCall_2_1_0() { return cDatenumNumberLiteralExpCSParserRuleCall_2_1_0; }
		
		//procall=PropertyCallExpCS
		public Assignment getProcallAssignment_2_2() { return cProcallAssignment_2_2; }
		
		//PropertyCallExpCS
		public RuleCall getProcallPropertyCallExpCSParserRuleCall_2_2_0() { return cProcallPropertyCallExpCSParserRuleCall_2_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//('.' nested=StandardDateOperation)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'.'
		public Keyword getFullStopKeyword_4_0() { return cFullStopKeyword_4_0; }
		
		//nested=StandardDateOperation
		public Assignment getNestedAssignment_4_1() { return cNestedAssignment_4_1; }
		
		//StandardDateOperation
		public RuleCall getNestedStandardDateOperationParserRuleCall_4_1_0() { return cNestedStandardDateOperationParserRuleCall_4_1_0; }
	}
	public class ClassiferCallExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.ClassiferCallExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEntitySimpleNameCSParserRuleCall_0_0 = (RuleCall)cEntityAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOpAllInstanceKeyword_2_0 = (Keyword)cOpAssignment_2.eContents().get(0);
		
		//ClassiferCallExpCS:
		//    entity=SimpleNameCS '.' op='allInstance()'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//entity=SimpleNameCS '.' op='allInstance()'
		public Group getGroup() { return cGroup; }
		
		//entity=SimpleNameCS
		public Assignment getEntityAssignment_0() { return cEntityAssignment_0; }
		
		//SimpleNameCS
		public RuleCall getEntitySimpleNameCSParserRuleCall_0_0() { return cEntitySimpleNameCSParserRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//op='allInstance()'
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }
		
		//'allInstance()'
		public Keyword getOpAllInstanceKeyword_2_0() { return cOpAllInstanceKeyword_2_0; }
	}
	public class PropertyCallExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.PropertyCallExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameVariableExpCSParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cSelfpropertyAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cSelfpropertyVariableExpCSParserRuleCall_2_0_0 = (RuleCall)cSelfpropertyAssignment_2_0.eContents().get(0);
		private final Keyword cFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cAttributeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributeSimpleNameCSParserRuleCall_3_0 = (RuleCall)cAttributeAssignment_3.eContents().get(0);
		private final Assignment cPremarkAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPremarkIsMarkedPreCSParserRuleCall_4_0 = (RuleCall)cPremarkAssignment_4.eContents().get(0);
		
		//PropertyCallExpCS:
		//    name=VariableExpCS '.' (selfproperty=VariableExpCS '.')?  attribute=SimpleNameCS (premark=IsMarkedPreCS)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=VariableExpCS '.' (selfproperty=VariableExpCS '.')?  attribute=SimpleNameCS (premark=IsMarkedPreCS)?
		public Group getGroup() { return cGroup; }
		
		//name=VariableExpCS
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//VariableExpCS
		public RuleCall getNameVariableExpCSParserRuleCall_0_0() { return cNameVariableExpCSParserRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//(selfproperty=VariableExpCS '.')?
		public Group getGroup_2() { return cGroup_2; }
		
		//selfproperty=VariableExpCS
		public Assignment getSelfpropertyAssignment_2_0() { return cSelfpropertyAssignment_2_0; }
		
		//VariableExpCS
		public RuleCall getSelfpropertyVariableExpCSParserRuleCall_2_0_0() { return cSelfpropertyVariableExpCSParserRuleCall_2_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2_1() { return cFullStopKeyword_2_1; }
		
		//attribute=SimpleNameCS
		public Assignment getAttributeAssignment_3() { return cAttributeAssignment_3; }
		
		//SimpleNameCS
		public RuleCall getAttributeSimpleNameCSParserRuleCall_3_0() { return cAttributeSimpleNameCSParserRuleCall_3_0; }
		
		//(premark=IsMarkedPreCS)?
		public Assignment getPremarkAssignment_4() { return cPremarkAssignment_4; }
		
		//IsMarkedPreCS
		public RuleCall getPremarkIsMarkedPreCSParserRuleCall_4_0() { return cPremarkIsMarkedPreCSParserRuleCall_4_0; }
	}
	public class OperationCallExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.OperationCallExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSimpleNameCSParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersOperationParametersParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParametersOperationParametersParserRuleCall_3_1_0 = (RuleCall)cParametersAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OperationCallExpCS:
		//    name=SimpleNameCS '(' parameters+=OperationParameters? (',' parameters+=OperationParameters)* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=SimpleNameCS '(' parameters+=OperationParameters? (',' parameters+=OperationParameters)* ')'
		public Group getGroup() { return cGroup; }
		
		//name=SimpleNameCS
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//SimpleNameCS
		public RuleCall getNameSimpleNameCSParserRuleCall_0_0() { return cNameSimpleNameCSParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//parameters+=OperationParameters?
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//OperationParameters
		public RuleCall getParametersOperationParametersParserRuleCall_2_0() { return cParametersOperationParametersParserRuleCall_2_0; }
		
		//(',' parameters+=OperationParameters)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//parameters+=OperationParameters
		public Assignment getParametersAssignment_3_1() { return cParametersAssignment_3_1; }
		
		//OperationParameters
		public RuleCall getParametersOperationParametersParserRuleCall_3_1_0() { return cParametersOperationParametersParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class OperationParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.OperationParameters");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cObjectAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cObjectSimpleNameCSParserRuleCall_0_0 = (RuleCall)cObjectAssignment_0.eContents().get(0);
		private final Assignment cObjectpropertyAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cObjectpropertyPropertyCallExpCSParserRuleCall_1_0 = (RuleCall)cObjectpropertyAssignment_1.eContents().get(0);
		private final Assignment cStringAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Alternatives cStringAlternatives_2_0 = (Alternatives)cStringAssignment_2.eContents().get(0);
		private final RuleCall cStringSINGLE_QUOTED_STRINGTerminalRuleCall_2_0_0 = (RuleCall)cStringAlternatives_2_0.eContents().get(0);
		private final RuleCall cStringDOUBLE_QUOTED_STRINGTerminalRuleCall_2_0_1 = (RuleCall)cStringAlternatives_2_0.eContents().get(1);
		
		//OperationParameters:
		//    object=SimpleNameCS | objectproperty=PropertyCallExpCS | string=(SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//object=SimpleNameCS | objectproperty=PropertyCallExpCS | string=(SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//object=SimpleNameCS
		public Assignment getObjectAssignment_0() { return cObjectAssignment_0; }
		
		//SimpleNameCS
		public RuleCall getObjectSimpleNameCSParserRuleCall_0_0() { return cObjectSimpleNameCSParserRuleCall_0_0; }
		
		//objectproperty=PropertyCallExpCS
		public Assignment getObjectpropertyAssignment_1() { return cObjectpropertyAssignment_1; }
		
		//PropertyCallExpCS
		public RuleCall getObjectpropertyPropertyCallExpCSParserRuleCall_1_0() { return cObjectpropertyPropertyCallExpCSParserRuleCall_1_0; }
		
		//string=(SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING)
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }
		
		//(SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING)
		public Alternatives getStringAlternatives_2_0() { return cStringAlternatives_2_0; }
		
		//SINGLE_QUOTED_STRING
		public RuleCall getStringSINGLE_QUOTED_STRINGTerminalRuleCall_2_0_0() { return cStringSINGLE_QUOTED_STRINGTerminalRuleCall_2_0_0; }
		
		//DOUBLE_QUOTED_STRING
		public RuleCall getStringDOUBLE_QUOTED_STRINGTerminalRuleCall_2_0_1() { return cStringDOUBLE_QUOTED_STRINGTerminalRuleCall_2_0_1; }
	}
	public class IsMarkedPreCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.IsMarkedPreCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPreKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IsMarkedPreCS:
		//    '@' 'pre'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'@' 'pre'
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//'pre'
		public Keyword getPreKeyword_1() { return cPreKeyword_1; }
	}
	public class VariableExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.VariableExpCS");
		private final Assignment cSymbolAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cSymbolAlternatives_0 = (Alternatives)cSymbolAssignment.eContents().get(0);
		private final Keyword cSymbolSelfKeyword_0_0 = (Keyword)cSymbolAlternatives_0.eContents().get(0);
		private final Keyword cSymbolResultKeyword_0_1 = (Keyword)cSymbolAlternatives_0.eContents().get(1);
		private final RuleCall cSymbolSimpleNameCSParserRuleCall_0_2 = (RuleCall)cSymbolAlternatives_0.eContents().get(2);
		
		///* ------------------ VariableExpCS -------------- */
		//VariableExpCS:
		//    symbol=('self' | 'result'| SimpleNameCS)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//symbol=('self' | 'result'| SimpleNameCS)
		public Assignment getSymbolAssignment() { return cSymbolAssignment; }
		
		//('self' | 'result'| SimpleNameCS)
		public Alternatives getSymbolAlternatives_0() { return cSymbolAlternatives_0; }
		
		//'self'
		public Keyword getSymbolSelfKeyword_0_0() { return cSymbolSelfKeyword_0_0; }
		
		//'result'
		public Keyword getSymbolResultKeyword_0_1() { return cSymbolResultKeyword_0_1; }
		
		//SimpleNameCS
		public RuleCall getSymbolSimpleNameCSParserRuleCall_0_2() { return cSymbolSimpleNameCSParserRuleCall_0_2; }
	}
	public class SimpleNameCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.SimpleNameCS");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SimpleNameCS:
		//    ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class IfExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.IfExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionOCLExpressionCSParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenExpressionOCLExpressionCSParserRuleCall_3_0 = (RuleCall)cThenExpressionAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElseExpressionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cElseExpressionOCLExpressionCSParserRuleCall_4_1_0 = (RuleCall)cElseExpressionAssignment_4_1.eContents().get(0);
		private final Keyword cEndifKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///* ------------------ IfExpCS -------------- */
		//IfExpCS:
		//    'if' condition=OCLExpressionCS
		//    'then' thenExpression=OCLExpressionCS
		//    ('else' elseExpression=OCLExpressionCS)?
		//    'endif'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' condition=OCLExpressionCS
		//'then' thenExpression=OCLExpressionCS
		//('else' elseExpression=OCLExpressionCS)?
		//'endif'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//condition=OCLExpressionCS
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//OCLExpressionCS
		public RuleCall getConditionOCLExpressionCSParserRuleCall_1_0() { return cConditionOCLExpressionCSParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//thenExpression=OCLExpressionCS
		public Assignment getThenExpressionAssignment_3() { return cThenExpressionAssignment_3; }
		
		//OCLExpressionCS
		public RuleCall getThenExpressionOCLExpressionCSParserRuleCall_3_0() { return cThenExpressionOCLExpressionCSParserRuleCall_3_0; }
		
		//('else' elseExpression=OCLExpressionCS)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'else'
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }
		
		//elseExpression=OCLExpressionCS
		public Assignment getElseExpressionAssignment_4_1() { return cElseExpressionAssignment_4_1; }
		
		//OCLExpressionCS
		public RuleCall getElseExpressionOCLExpressionCSParserRuleCall_4_1_0() { return cElseExpressionOCLExpressionCSParserRuleCall_4_1_0; }
		
		//'endif'
		public Keyword getEndifKeyword_5() { return cEndifKeyword_5; }
	}
	public class LetExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.LetExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVariableDeclarationCSParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariableAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariableVariableDeclarationCSParserRuleCall_2_1_0 = (RuleCall)cVariableAssignment_2_1.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInExpressionOCLExpressionCSParserRuleCall_4_0 = (RuleCall)cInExpressionAssignment_4.eContents().get(0);
		
		///* ------------------ LetExpCS -------------- */
		//LetExpCS:
		//    'let' variable+=VariableDeclarationCS (',' variable+=VariableDeclarationCS)*
		//    'in' inExpression=OCLExpressionCS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'let' variable+=VariableDeclarationCS (',' variable+=VariableDeclarationCS)*
		//'in' inExpression=OCLExpressionCS
		public Group getGroup() { return cGroup; }
		
		//'let'
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }
		
		//variable+=VariableDeclarationCS
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//VariableDeclarationCS
		public RuleCall getVariableVariableDeclarationCSParserRuleCall_1_0() { return cVariableVariableDeclarationCSParserRuleCall_1_0; }
		
		//(',' variable+=VariableDeclarationCS)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//variable+=VariableDeclarationCS
		public Assignment getVariableAssignment_2_1() { return cVariableAssignment_2_1; }
		
		//VariableDeclarationCS
		public RuleCall getVariableVariableDeclarationCSParserRuleCall_2_1_0() { return cVariableVariableDeclarationCSParserRuleCall_2_1_0; }
		
		//'in'
		public Keyword getInKeyword_3() { return cInKeyword_3; }
		
		//inExpression=OCLExpressionCS
		public Assignment getInExpressionAssignment_4() { return cInExpressionAssignment_4; }
		
		//OCLExpressionCS
		public RuleCall getInExpressionOCLExpressionCSParserRuleCall_4_0() { return cInExpressionOCLExpressionCSParserRuleCall_4_0; }
	}
	public class VariableDeclarationCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.VariableDeclarationCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSimpleNameCSParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeTypeCSParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInitExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInitExpressionOCLExpressionCSParserRuleCall_2_1_0 = (RuleCall)cInitExpressionAssignment_2_1.eContents().get(0);
		
		//VariableDeclarationCS:
		//    name=SimpleNameCS (':' type=TypeCS)? ('=' initExpression=OCLExpressionCS)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=SimpleNameCS (':' type=TypeCS)? ('=' initExpression=OCLExpressionCS)?
		public Group getGroup() { return cGroup; }
		
		//name=SimpleNameCS
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//SimpleNameCS
		public RuleCall getNameSimpleNameCSParserRuleCall_0_0() { return cNameSimpleNameCSParserRuleCall_0_0; }
		
		//(':' type=TypeCS)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//type=TypeCS
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//TypeCS
		public RuleCall getTypeTypeCSParserRuleCall_1_1_0() { return cTypeTypeCSParserRuleCall_1_1_0; }
		
		//('=' initExpression=OCLExpressionCS)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//initExpression=OCLExpressionCS
		public Assignment getInitExpressionAssignment_2_1() { return cInitExpressionAssignment_2_1; }
		
		//OCLExpressionCS
		public RuleCall getInitExpressionOCLExpressionCSParserRuleCall_2_1_0() { return cInitExpressionOCLExpressionCSParserRuleCall_2_1_0; }
	}
	public class LiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.LiteralExpCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCollectionLiteralExpCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTupleLiteralExpCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPrimitiveLiteralExpCSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEnumLiteralExpCSParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		///* ------------------ LiteralExpCS -------------- */
		//LiteralExpCS:
		//    CollectionLiteralExpCS | TupleLiteralExpCS | PrimitiveLiteralExpCS | EnumLiteralExpCS //| TypeCS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//CollectionLiteralExpCS | TupleLiteralExpCS | PrimitiveLiteralExpCS | EnumLiteralExpCS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CollectionLiteralExpCS
		public RuleCall getCollectionLiteralExpCSParserRuleCall_0() { return cCollectionLiteralExpCSParserRuleCall_0; }
		
		//TupleLiteralExpCS
		public RuleCall getTupleLiteralExpCSParserRuleCall_1() { return cTupleLiteralExpCSParserRuleCall_1; }
		
		//PrimitiveLiteralExpCS
		public RuleCall getPrimitiveLiteralExpCSParserRuleCall_2() { return cPrimitiveLiteralExpCSParserRuleCall_2; }
		
		//EnumLiteralExpCS
		public RuleCall getEnumLiteralExpCSParserRuleCall_3() { return cEnumLiteralExpCSParserRuleCall_3; }
	}
	public class EnumLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.EnumLiteralExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEnumnameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEnumnameSimpleNameCSParserRuleCall_0_0 = (RuleCall)cEnumnameAssignment_0.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEunmitemAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEunmitemIDTerminalRuleCall_2_0 = (RuleCall)cEunmitemAssignment_2.eContents().get(0);
		
		////-----------EnumLiteralExpCS
		//EnumLiteralExpCS:
		////    enumname=SimpleNameCS '::' eunmitem=ENUM
		//    enumname=SimpleNameCS '::' eunmitem=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////    enumname=SimpleNameCS '::' eunmitem=ENUM
		//    enumname=SimpleNameCS '::' eunmitem=ID
		public Group getGroup() { return cGroup; }
		
		////    enumname=SimpleNameCS '::' eunmitem=ENUM
		//    enumname=SimpleNameCS
		public Assignment getEnumnameAssignment_0() { return cEnumnameAssignment_0; }
		
		//SimpleNameCS
		public RuleCall getEnumnameSimpleNameCSParserRuleCall_0_0() { return cEnumnameSimpleNameCSParserRuleCall_0_0; }
		
		//'::'
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }
		
		//eunmitem=ID
		public Assignment getEunmitemAssignment_2() { return cEunmitemAssignment_2; }
		
		//ID
		public RuleCall getEunmitemIDTerminalRuleCall_2_0() { return cEunmitemIDTerminalRuleCall_2_0; }
	}
	public class TupleLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.TupleLiteralExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTupleKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariablesVariableDeclarationCSParserRuleCall_2_0 = (RuleCall)cVariablesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVariablesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVariablesVariableDeclarationCSParserRuleCall_3_1_0 = (RuleCall)cVariablesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////-----------TupleLiteralExpCS
		//TupleLiteralExpCS:
		//    name='Tuple' '{' variables+=VariableDeclarationCS? (',' variables+=VariableDeclarationCS)* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name='Tuple' '{' variables+=VariableDeclarationCS? (',' variables+=VariableDeclarationCS)* '}'
		public Group getGroup() { return cGroup; }
		
		//name='Tuple'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'Tuple'
		public Keyword getNameTupleKeyword_0_0() { return cNameTupleKeyword_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//variables+=VariableDeclarationCS?
		public Assignment getVariablesAssignment_2() { return cVariablesAssignment_2; }
		
		//VariableDeclarationCS
		public RuleCall getVariablesVariableDeclarationCSParserRuleCall_2_0() { return cVariablesVariableDeclarationCSParserRuleCall_2_0; }
		
		//(',' variables+=VariableDeclarationCS)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//variables+=VariableDeclarationCS
		public Assignment getVariablesAssignment_3_1() { return cVariablesAssignment_3_1; }
		
		//VariableDeclarationCS
		public RuleCall getVariablesVariableDeclarationCSParserRuleCall_3_1_0() { return cVariablesVariableDeclarationCSParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TupleTypeCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.TupleTypeCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTupleKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariablesVariableDeclarationCSParserRuleCall_2_0 = (RuleCall)cVariablesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVariablesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVariablesVariableDeclarationCSParserRuleCall_3_1_0 = (RuleCall)cVariablesAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////TypeCS:
		////       Type // | CollectionTypeCS// | PathNameCS  CollectionTypeCS | TupleTypeCS | OclTypeCS  |
		////;
		//TupleTypeCS:
		//    name='Tuple' '(' variables+=VariableDeclarationCS? (',' variables+=VariableDeclarationCS)* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name='Tuple' '(' variables+=VariableDeclarationCS? (',' variables+=VariableDeclarationCS)* ')'
		public Group getGroup() { return cGroup; }
		
		//name='Tuple'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'Tuple'
		public Keyword getNameTupleKeyword_0_0() { return cNameTupleKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//variables+=VariableDeclarationCS?
		public Assignment getVariablesAssignment_2() { return cVariablesAssignment_2; }
		
		//VariableDeclarationCS
		public RuleCall getVariablesVariableDeclarationCSParserRuleCall_2_0() { return cVariablesVariableDeclarationCSParserRuleCall_2_0; }
		
		//(',' variables+=VariableDeclarationCS)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//variables+=VariableDeclarationCS
		public Assignment getVariablesAssignment_3_1() { return cVariablesAssignment_3_1; }
		
		//VariableDeclarationCS
		public RuleCall getVariablesVariableDeclarationCSParserRuleCall_3_1_0() { return cVariablesVariableDeclarationCSParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class CollectionTypeCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.CollectionTypeCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameCollectionTypeIdentifierCSParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeCSParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CollectionTypeCS:
		//    name=CollectionTypeIdentifierCS '(' type=TypeCS ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=CollectionTypeIdentifierCS '(' type=TypeCS ')'
		public Group getGroup() { return cGroup; }
		
		//name=CollectionTypeIdentifierCS
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//CollectionTypeIdentifierCS
		public RuleCall getNameCollectionTypeIdentifierCSParserRuleCall_0_0() { return cNameCollectionTypeIdentifierCSParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//type=TypeCS
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//TypeCS
		public RuleCall getTypeTypeCSParserRuleCall_2_0() { return cTypeTypeCSParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class CollectionLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.CollectionLiteralExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKindAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKindCollectionTypeIdentifierCSParserRuleCall_0_0 = (RuleCall)cKindAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPartCollectionLiteralPartCSParserRuleCall_2_0 = (RuleCall)cPartAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPartAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPartCollectionLiteralPartCSParserRuleCall_3_1_0 = (RuleCall)cPartAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////-----------CollectionLiteralExpCS
		//CollectionLiteralExpCS:
		//    kind=CollectionTypeIdentifierCS '{' part+=CollectionLiteralPartCS? (-> ',' part+=CollectionLiteralPartCS)* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//kind=CollectionTypeIdentifierCS '{' part+=CollectionLiteralPartCS? (-> ',' part+=CollectionLiteralPartCS)* '}'
		public Group getGroup() { return cGroup; }
		
		//kind=CollectionTypeIdentifierCS
		public Assignment getKindAssignment_0() { return cKindAssignment_0; }
		
		//CollectionTypeIdentifierCS
		public RuleCall getKindCollectionTypeIdentifierCSParserRuleCall_0_0() { return cKindCollectionTypeIdentifierCSParserRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//part+=CollectionLiteralPartCS?
		public Assignment getPartAssignment_2() { return cPartAssignment_2; }
		
		//CollectionLiteralPartCS
		public RuleCall getPartCollectionLiteralPartCSParserRuleCall_2_0() { return cPartCollectionLiteralPartCSParserRuleCall_2_0; }
		
		//(-> ',' part+=CollectionLiteralPartCS)*
		public Group getGroup_3() { return cGroup_3; }
		
		//-> ','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//part+=CollectionLiteralPartCS
		public Assignment getPartAssignment_3_1() { return cPartAssignment_3_1; }
		
		//CollectionLiteralPartCS
		public RuleCall getPartCollectionLiteralPartCSParserRuleCall_3_1_0() { return cPartCollectionLiteralPartCSParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CollectionLiteralPartCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.CollectionLiteralPartCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCollectionRangeCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCollectionItemParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CollectionLiteralPartCS:
		//    CollectionRangeCS | -> CollectionItem
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//CollectionRangeCS | -> CollectionItem
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CollectionRangeCS
		public RuleCall getCollectionRangeCSParserRuleCall_0() { return cCollectionRangeCSParserRuleCall_0; }
		
		//-> CollectionItem
		public RuleCall getCollectionItemParserRuleCall_1() { return cCollectionItemParserRuleCall_1; }
	}
	public class CollectionRangeCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.CollectionRangeCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstOCLExpressionCSParserRuleCall_0_0 = (RuleCall)cFirstAssignment_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLastAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLastOCLExpressionCSParserRuleCall_2_0 = (RuleCall)cLastAssignment_2.eContents().get(0);
		
		//CollectionRangeCS:
		//    -> first=OCLExpressionCS '..' last=OCLExpressionCS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//-> first=OCLExpressionCS '..' last=OCLExpressionCS
		public Group getGroup() { return cGroup; }
		
		//-> first=OCLExpressionCS
		public Assignment getFirstAssignment_0() { return cFirstAssignment_0; }
		
		//OCLExpressionCS
		public RuleCall getFirstOCLExpressionCSParserRuleCall_0_0() { return cFirstOCLExpressionCSParserRuleCall_0_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }
		
		//last=OCLExpressionCS
		public Assignment getLastAssignment_2() { return cLastAssignment_2; }
		
		//OCLExpressionCS
		public RuleCall getLastOCLExpressionCSParserRuleCall_2_0() { return cLastOCLExpressionCSParserRuleCall_2_0; }
	}
	public class CollectionItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.CollectionItem");
		private final Assignment cItemAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cItemOCLExpressionCSParserRuleCall_0 = (RuleCall)cItemAssignment.eContents().get(0);
		
		//CollectionItem:
		//    item=OCLExpressionCS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//item=OCLExpressionCS
		public Assignment getItemAssignment() { return cItemAssignment; }
		
		//OCLExpressionCS
		public RuleCall getItemOCLExpressionCSParserRuleCall_0() { return cItemOCLExpressionCSParserRuleCall_0; }
	}
	public class PrimitiveLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.PrimitiveLiteralExpCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberLiteralExpCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringLiteralExpCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanLiteralExpCSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInvalidLiteralExpCSParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNullLiteralExpCSParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		////-----------PrimitiveLiteralExpCS
		//PrimitiveLiteralExpCS:
		//      NumberLiteralExpCS
		//    | StringLiteralExpCS
		//    | BooleanLiteralExpCS
		//    | InvalidLiteralExpCS
		//    | NullLiteralExpCS;
		@Override public ParserRule getRule() { return rule; }
		
		//  NumberLiteralExpCS
		//| StringLiteralExpCS
		//| BooleanLiteralExpCS
		//| InvalidLiteralExpCS
		//| NullLiteralExpCS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NumberLiteralExpCS
		public RuleCall getNumberLiteralExpCSParserRuleCall_0() { return cNumberLiteralExpCSParserRuleCall_0; }
		
		//StringLiteralExpCS
		public RuleCall getStringLiteralExpCSParserRuleCall_1() { return cStringLiteralExpCSParserRuleCall_1; }
		
		//BooleanLiteralExpCS
		public RuleCall getBooleanLiteralExpCSParserRuleCall_2() { return cBooleanLiteralExpCSParserRuleCall_2; }
		
		//InvalidLiteralExpCS
		public RuleCall getInvalidLiteralExpCSParserRuleCall_3() { return cInvalidLiteralExpCSParserRuleCall_3; }
		
		//NullLiteralExpCS
		public RuleCall getNullLiteralExpCSParserRuleCall_4() { return cNullLiteralExpCSParserRuleCall_4; }
	}
	public class NumberLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.NumberLiteralExpCS");
		private final Assignment cSymbolAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cSymbolAlternatives_0 = (Alternatives)cSymbolAssignment.eContents().get(0);
		private final RuleCall cSymbolIntegerLiteralExpCSParserRuleCall_0_0 = (RuleCall)cSymbolAlternatives_0.eContents().get(0);
		private final RuleCall cSymbolRealLiteralExpCSParserRuleCall_0_1 = (RuleCall)cSymbolAlternatives_0.eContents().get(1);
		private final RuleCall cSymbolUnlimitedNaturalLiteralExpCSParserRuleCall_0_2 = (RuleCall)cSymbolAlternatives_0.eContents().get(2);
		
		//NumberLiteralExpCS returns NumberLiteralExpCS:
		//    symbol=(IntegerLiteralExpCS | RealLiteralExpCS | UnlimitedNaturalLiteralExpCS)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//symbol=(IntegerLiteralExpCS | RealLiteralExpCS | UnlimitedNaturalLiteralExpCS)
		public Assignment getSymbolAssignment() { return cSymbolAssignment; }
		
		//(IntegerLiteralExpCS | RealLiteralExpCS | UnlimitedNaturalLiteralExpCS)
		public Alternatives getSymbolAlternatives_0() { return cSymbolAlternatives_0; }
		
		//IntegerLiteralExpCS
		public RuleCall getSymbolIntegerLiteralExpCSParserRuleCall_0_0() { return cSymbolIntegerLiteralExpCSParserRuleCall_0_0; }
		
		//RealLiteralExpCS
		public RuleCall getSymbolRealLiteralExpCSParserRuleCall_0_1() { return cSymbolRealLiteralExpCSParserRuleCall_0_1; }
		
		//UnlimitedNaturalLiteralExpCS
		public RuleCall getSymbolUnlimitedNaturalLiteralExpCSParserRuleCall_0_2() { return cSymbolUnlimitedNaturalLiteralExpCSParserRuleCall_0_2; }
	}
	public class IntegerLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.IntegerLiteralExpCS");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//IntegerLiteralExpCS :
		//    INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class RealLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.RealLiteralExpCS");
		private final RuleCall cFloatParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//RealLiteralExpCS:
		//    Float
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Float
		public RuleCall getFloatParserRuleCall() { return cFloatParserRuleCall; }
	}
	public class UnlimitedNaturalLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.UnlimitedNaturalLiteralExpCS");
		private final Keyword cAsteriskKeyword = (Keyword)rule.eContents().get(1);
		
		//UnlimitedNaturalLiteralExpCS:
		//    '*'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'*'
		public Keyword getAsteriskKeyword() { return cAsteriskKeyword; }
	}
	public class BooleanLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.BooleanLiteralExpCS");
		private final Assignment cSymbolAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cSymbolAlternatives_0 = (Alternatives)cSymbolAssignment.eContents().get(0);
		private final Keyword cSymbolTrueKeyword_0_0 = (Keyword)cSymbolAlternatives_0.eContents().get(0);
		private final Keyword cSymbolFalseKeyword_0_1 = (Keyword)cSymbolAlternatives_0.eContents().get(1);
		
		//BooleanLiteralExpCS:
		//    symbol=('true' | 'false')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//symbol=('true' | 'false')
		public Assignment getSymbolAssignment() { return cSymbolAssignment; }
		
		//('true' | 'false')
		public Alternatives getSymbolAlternatives_0() { return cSymbolAlternatives_0; }
		
		//'true'
		public Keyword getSymbolTrueKeyword_0_0() { return cSymbolTrueKeyword_0_0; }
		
		//'false'
		public Keyword getSymbolFalseKeyword_0_1() { return cSymbolFalseKeyword_0_1; }
	}
	public class StringLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.StringLiteralExpCS");
		private final Assignment cSymbolAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cSymbolAlternatives_0 = (Alternatives)cSymbolAssignment.eContents().get(0);
		private final RuleCall cSymbolSINGLE_QUOTED_STRINGTerminalRuleCall_0_0 = (RuleCall)cSymbolAlternatives_0.eContents().get(0);
		private final RuleCall cSymbolDOUBLE_QUOTED_STRINGTerminalRuleCall_0_1 = (RuleCall)cSymbolAlternatives_0.eContents().get(1);
		
		//StringLiteralExpCS:
		//    symbol= (SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//symbol= (SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING)
		public Assignment getSymbolAssignment() { return cSymbolAssignment; }
		
		//(SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING)
		public Alternatives getSymbolAlternatives_0() { return cSymbolAlternatives_0; }
		
		//SINGLE_QUOTED_STRING
		public RuleCall getSymbolSINGLE_QUOTED_STRINGTerminalRuleCall_0_0() { return cSymbolSINGLE_QUOTED_STRINGTerminalRuleCall_0_0; }
		
		//DOUBLE_QUOTED_STRING
		public RuleCall getSymbolDOUBLE_QUOTED_STRINGTerminalRuleCall_0_1() { return cSymbolDOUBLE_QUOTED_STRINGTerminalRuleCall_0_1; }
	}
	public class NullLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.NullLiteralExpCS");
		private final Assignment cSymbolAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cSymbolNullKeyword_0 = (Keyword)cSymbolAssignment.eContents().get(0);
		
		//NullLiteralExpCS:
		//    symbol='null'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//symbol='null'
		public Assignment getSymbolAssignment() { return cSymbolAssignment; }
		
		//'null'
		public Keyword getSymbolNullKeyword_0() { return cSymbolNullKeyword_0; }
	}
	public class InvalidLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.InvalidLiteralExpCS");
		private final Assignment cSymbolAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cSymbolInvalidKeyword_0 = (Keyword)cSymbolAssignment.eContents().get(0);
		
		//InvalidLiteralExpCS:
		//    symbol='invalid'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//symbol='invalid'
		public Assignment getSymbolAssignment() { return cSymbolAssignment; }
		
		//'invalid'
		public Keyword getSymbolInvalidKeyword_0() { return cSymbolInvalidKeyword_0; }
	}
	public class FloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.Float");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Float:
		//    INT '.' INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class ReservedKeywordCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.ReservedKeywordCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCollectionTypeIdentifierCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveTypeCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOclTypeCSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Keyword cTupleKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		////terminal ENUM :
		////    ('A'..'Z')+
		////;
		//ReservedKeywordCS:
		//    CollectionTypeIdentifierCS | PrimitiveTypeCS | OclTypeCS | 'Tuple'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//CollectionTypeIdentifierCS | PrimitiveTypeCS | OclTypeCS | 'Tuple'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CollectionTypeIdentifierCS
		public RuleCall getCollectionTypeIdentifierCSParserRuleCall_0() { return cCollectionTypeIdentifierCSParserRuleCall_0; }
		
		//PrimitiveTypeCS
		public RuleCall getPrimitiveTypeCSParserRuleCall_1() { return cPrimitiveTypeCSParserRuleCall_1; }
		
		//OclTypeCS
		public RuleCall getOclTypeCSParserRuleCall_2() { return cOclTypeCSParserRuleCall_2; }
		
		//'Tuple'
		public Keyword getTupleKeyword_3() { return cTupleKeyword_3; }
	}
	public class CollectionTypeIdentifierCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.CollectionTypeIdentifierCS");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameSetKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameBagKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		private final Keyword cNameSequenceKeyword_0_2 = (Keyword)cNameAlternatives_0.eContents().get(2);
		private final Keyword cNameCollectionKeyword_0_3 = (Keyword)cNameAlternatives_0.eContents().get(3);
		private final Keyword cNameOrderedSetKeyword_0_4 = (Keyword)cNameAlternatives_0.eContents().get(4);
		
		//CollectionTypeIdentifierCS:
		//name=('Set' |
		//    'Bag' |
		//    'Sequence' |
		//    'Collection' |
		//    'OrderedSet')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=('Set' |
		//    'Bag' |
		//    'Sequence' |
		//    'Collection' |
		//    'OrderedSet')
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//('Set' |
		//    'Bag' |
		//    'Sequence' |
		//    'Collection' |
		//    'OrderedSet')
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//'Set'
		public Keyword getNameSetKeyword_0_0() { return cNameSetKeyword_0_0; }
		
		//'Bag'
		public Keyword getNameBagKeyword_0_1() { return cNameBagKeyword_0_1; }
		
		//'Sequence'
		public Keyword getNameSequenceKeyword_0_2() { return cNameSequenceKeyword_0_2; }
		
		//'Collection'
		public Keyword getNameCollectionKeyword_0_3() { return cNameCollectionKeyword_0_3; }
		
		//'OrderedSet'
		public Keyword getNameOrderedSetKeyword_0_4() { return cNameOrderedSetKeyword_0_4; }
	}
	public class PrimitiveTypeCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.PrimitiveTypeCS");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameBooleanKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameIntegerKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		private final Keyword cNameRealKeyword_0_2 = (Keyword)cNameAlternatives_0.eContents().get(2);
		private final Keyword cNameStringKeyword_0_3 = (Keyword)cNameAlternatives_0.eContents().get(3);
		private final Keyword cNameUnlimitedNaturalKeyword_0_4 = (Keyword)cNameAlternatives_0.eContents().get(4);
		private final Keyword cNameDateKeyword_0_5 = (Keyword)cNameAlternatives_0.eContents().get(5);
		
		//PrimitiveTypeCS:
		//name=('Boolean'
		//    | 'Integer'
		//    | 'Real'
		//    | 'String'
		//    | 'UnlimitedNatural'
		//    | 'Date')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=('Boolean'
		//    | 'Integer'
		//    | 'Real'
		//    | 'String'
		//    | 'UnlimitedNatural'
		//    | 'Date')
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//('Boolean'
		//    | 'Integer'
		//    | 'Real'
		//    | 'String'
		//    | 'UnlimitedNatural'
		//    | 'Date')
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//'Boolean'
		public Keyword getNameBooleanKeyword_0_0() { return cNameBooleanKeyword_0_0; }
		
		//'Integer'
		public Keyword getNameIntegerKeyword_0_1() { return cNameIntegerKeyword_0_1; }
		
		//'Real'
		public Keyword getNameRealKeyword_0_2() { return cNameRealKeyword_0_2; }
		
		//'String'
		public Keyword getNameStringKeyword_0_3() { return cNameStringKeyword_0_3; }
		
		//'UnlimitedNatural'
		public Keyword getNameUnlimitedNaturalKeyword_0_4() { return cNameUnlimitedNaturalKeyword_0_4; }
		
		//'Date'
		public Keyword getNameDateKeyword_0_5() { return cNameDateKeyword_0_5; }
	}
	public class OclTypeCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.OclTypeCS");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameOclAnyKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameOclInvalidKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		private final Keyword cNameOclVoidKeyword_0_2 = (Keyword)cNameAlternatives_0.eContents().get(2);
		
		//OclTypeCS:
		//name=('OclAny'
		//    | 'OclInvalid'
		//    | 'OclVoid')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=('OclAny'
		//    | 'OclInvalid'
		//    | 'OclVoid')
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//('OclAny'
		//    | 'OclInvalid'
		//    | 'OclVoid')
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//'OclAny'
		public Keyword getNameOclAnyKeyword_0_0() { return cNameOclAnyKeyword_0_0; }
		
		//'OclInvalid'
		public Keyword getNameOclInvalidKeyword_0_1() { return cNameOclInvalidKeyword_0_1; }
		
		//'OclVoid'
		public Keyword getNameOclVoidKeyword_0_2() { return cNameOclVoidKeyword_0_2; }
	}
	public class AssociationTypeCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.AssociationTypeCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAssociationKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAggregationKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCompositionKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//AssociationTypeCS:
		//      'Association'
		//    | 'Aggregation'
		//    | 'Composition'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  'Association'
		//| 'Aggregation'
		//| 'Composition'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Association'
		public Keyword getAssociationKeyword_0() { return cAssociationKeyword_0; }
		
		//'Aggregation'
		public Keyword getAggregationKeyword_1() { return cAggregationKeyword_1; }
		
		//'Composition'
		public Keyword getCompositionKeyword_2() { return cCompositionKeyword_2; }
	}
	
	
	private final RequirementModelElements pRequirementModel;
	private final InteractionElements pInteraction;
	private final MessageElements pMessage;
	private final CallMessageElements pCallMessage;
	private final ReturnMessageElements pReturnMessage;
	private final ExecutionElements pExecution;
	private final CombinedFragmentElements pCombinedFragment;
	private final OperatorElements pOperator;
	private final OperandElements pOperand;
	private final AbstractEndElements pAbstractEnd;
	private final MixEndElements pMixEnd;
	private final MixOpAndCFEndElements pMixOpAndCFEnd;
	private final MessageEndElements pMessageEnd;
	private final MultiEndElements pMultiEnd;
	private final ExecutionEndElements pExecutionEnd;
	private final CombinedFragmentEndElements pCombinedFragmentEnd;
	private final OperandEndElements pOperandEnd;
	private final DomainModelElements pDomainModel;
	private final UseCaseModelElements pUseCaseModel;
	private final ActorElements pActor;
	private final UCElements pUC;
	private final ServiceElements pService;
	private final ParticipantElements pParticipant;
	private final WorkflowElements pWorkflow;
	private final PartitionElements pPartition;
	private final WorkflowExpElements pWorkflowExp;
	private final PartitionActionElements pPartitionAction;
	private final JoinExpElements pJoinExp;
	private final ActivityFinalElements pActivityFinal;
	private final InitalNodeElements pInitalNode;
	private final ForkNodeElements pForkNode;
	private final JoinNodeElements pJoinNode;
	private final ComplexOpeartionElements pComplexOpeartion;
	private final SimpleOperationElements pSimpleOperation;
	private final LoopExpElements pLoopExp;
	private final SwitchExpElements pSwitchExp;
	private final SwitchCaseElements pSwitchCase;
	private final SwitchDefaultElements pSwitchDefault;
	private final OperationElements pOperation;
	private final OperationNameElements pOperationName;
	private final ParameterElements pParameter;
	private final ParametersNameElements pParametersName;
	private final EntityElements pEntity;
	private final AttributeElements pAttribute;
	private final ReferenceElements pReference;
	private final TypeCSElements pTypeCS;
	private final InvarianceElements pInvariance;
	private final EntityTypeElements pEntityType;
	private final EnumEntityElements pEnumEntity;
	private final EnumItemElements pEnumItem;
	private final USECASE_RELATIONElements pUSECASE_RELATION;
	private final ContractElements pContract;
	private final DefinitionElements pDefinition;
	private final PreconditionElements pPrecondition;
	private final PostconditionElements pPostcondition;
	private final OCLExpressionCSElements pOCLExpressionCS;
	private final NestedExpCSElements pNestedExpCS;
	private final LogicFormulaExpCSElements pLogicFormulaExpCS;
	private final AtomicExpressionElements pAtomicExpression;
	private final LeftSubAtomicExpressionElements pLeftSubAtomicExpression;
	private final RightSubAtomicExpressionElements pRightSubAtomicExpression;
	private final InfixCompareOperatorNameElements pInfixCompareOperatorName;
	private final InfixOperatorNameElements pInfixOperatorName;
	private final InfixlogicConjunctionOperatorNameElements pInfixlogicConjunctionOperatorName;
	private final EssentialOCLNavigationOperatorNameElements pEssentialOCLNavigationOperatorName;
	private final CallExpCSElements pCallExpCS;
	private final LoopExpCSElements pLoopExpCS;
	private final IteratorExpCSElements pIteratorExpCS;
	private final EntityAttributeNameElements pEntityAttributeName;
	private final IteratorIdentifierElements pIteratorIdentifier;
	private final ArgumentsCSElements pArgumentsCS;
	private final FeatureCallExpCSElements pFeatureCallExpCS;
	private final StandardNavigationCallExpCSElements pStandardNavigationCallExpCS;
	private final StandardOperationExpCSElements pStandardOperationExpCS;
	private final PredefineOpElements pPredefineOp;
	private final StandardNoneParameterOperationElements pStandardNoneParameterOperation;
	private final StandardParameterOperationElements pStandardParameterOperation;
	private final StandardCollectionOperationElements pStandardCollectionOperation;
	private final StandardDateOperationElements pStandardDateOperation;
	private final ClassiferCallExpCSElements pClassiferCallExpCS;
	private final PropertyCallExpCSElements pPropertyCallExpCS;
	private final OperationCallExpCSElements pOperationCallExpCS;
	private final OperationParametersElements pOperationParameters;
	private final IsMarkedPreCSElements pIsMarkedPreCS;
	private final VariableExpCSElements pVariableExpCS;
	private final SimpleNameCSElements pSimpleNameCS;
	private final IfExpCSElements pIfExpCS;
	private final LetExpCSElements pLetExpCS;
	private final VariableDeclarationCSElements pVariableDeclarationCS;
	private final LiteralExpCSElements pLiteralExpCS;
	private final EnumLiteralExpCSElements pEnumLiteralExpCS;
	private final TupleLiteralExpCSElements pTupleLiteralExpCS;
	private final TupleTypeCSElements pTupleTypeCS;
	private final CollectionTypeCSElements pCollectionTypeCS;
	private final CollectionLiteralExpCSElements pCollectionLiteralExpCS;
	private final CollectionLiteralPartCSElements pCollectionLiteralPartCS;
	private final CollectionRangeCSElements pCollectionRangeCS;
	private final CollectionItemElements pCollectionItem;
	private final PrimitiveLiteralExpCSElements pPrimitiveLiteralExpCS;
	private final NumberLiteralExpCSElements pNumberLiteralExpCS;
	private final IntegerLiteralExpCSElements pIntegerLiteralExpCS;
	private final RealLiteralExpCSElements pRealLiteralExpCS;
	private final UnlimitedNaturalLiteralExpCSElements pUnlimitedNaturalLiteralExpCS;
	private final BooleanLiteralExpCSElements pBooleanLiteralExpCS;
	private final StringLiteralExpCSElements pStringLiteralExpCS;
	private final NullLiteralExpCSElements pNullLiteralExpCS;
	private final InvalidLiteralExpCSElements pInvalidLiteralExpCS;
	private final FloatElements pFloat;
	private final TerminalRule tDOUBLE_QUOTED_STRING;
	private final TerminalRule tSINGLE_QUOTED_STRING;
	private final TerminalRule tESCAPED_CHARACTER;
	private final TerminalRule tID;
	private final TerminalRule tINT;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final ReservedKeywordCSElements pReservedKeywordCS;
	private final CollectionTypeIdentifierCSElements pCollectionTypeIdentifierCS;
	private final PrimitiveTypeCSElements pPrimitiveTypeCS;
	private final OclTypeCSElements pOclTypeCS;
	private final AssociationTypeCSElements pAssociationTypeCS;
	
	private final Grammar grammar;

	@Inject
	public ECModelGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pRequirementModel = new RequirementModelElements();
		this.pInteraction = new InteractionElements();
		this.pMessage = new MessageElements();
		this.pCallMessage = new CallMessageElements();
		this.pReturnMessage = new ReturnMessageElements();
		this.pExecution = new ExecutionElements();
		this.pCombinedFragment = new CombinedFragmentElements();
		this.pOperator = new OperatorElements();
		this.pOperand = new OperandElements();
		this.pAbstractEnd = new AbstractEndElements();
		this.pMixEnd = new MixEndElements();
		this.pMixOpAndCFEnd = new MixOpAndCFEndElements();
		this.pMessageEnd = new MessageEndElements();
		this.pMultiEnd = new MultiEndElements();
		this.pExecutionEnd = new ExecutionEndElements();
		this.pCombinedFragmentEnd = new CombinedFragmentEndElements();
		this.pOperandEnd = new OperandEndElements();
		this.pDomainModel = new DomainModelElements();
		this.pUseCaseModel = new UseCaseModelElements();
		this.pActor = new ActorElements();
		this.pUC = new UCElements();
		this.pService = new ServiceElements();
		this.pParticipant = new ParticipantElements();
		this.pWorkflow = new WorkflowElements();
		this.pPartition = new PartitionElements();
		this.pWorkflowExp = new WorkflowExpElements();
		this.pPartitionAction = new PartitionActionElements();
		this.pJoinExp = new JoinExpElements();
		this.pActivityFinal = new ActivityFinalElements();
		this.pInitalNode = new InitalNodeElements();
		this.pForkNode = new ForkNodeElements();
		this.pJoinNode = new JoinNodeElements();
		this.pComplexOpeartion = new ComplexOpeartionElements();
		this.pSimpleOperation = new SimpleOperationElements();
		this.pLoopExp = new LoopExpElements();
		this.pSwitchExp = new SwitchExpElements();
		this.pSwitchCase = new SwitchCaseElements();
		this.pSwitchDefault = new SwitchDefaultElements();
		this.pOperation = new OperationElements();
		this.pOperationName = new OperationNameElements();
		this.pParameter = new ParameterElements();
		this.pParametersName = new ParametersNameElements();
		this.pEntity = new EntityElements();
		this.pAttribute = new AttributeElements();
		this.pReference = new ReferenceElements();
		this.pTypeCS = new TypeCSElements();
		this.pInvariance = new InvarianceElements();
		this.pEntityType = new EntityTypeElements();
		this.pEnumEntity = new EnumEntityElements();
		this.pEnumItem = new EnumItemElements();
		this.pUSECASE_RELATION = new USECASE_RELATIONElements();
		this.pContract = new ContractElements();
		this.pDefinition = new DefinitionElements();
		this.pPrecondition = new PreconditionElements();
		this.pPostcondition = new PostconditionElements();
		this.pOCLExpressionCS = new OCLExpressionCSElements();
		this.pNestedExpCS = new NestedExpCSElements();
		this.pLogicFormulaExpCS = new LogicFormulaExpCSElements();
		this.pAtomicExpression = new AtomicExpressionElements();
		this.pLeftSubAtomicExpression = new LeftSubAtomicExpressionElements();
		this.pRightSubAtomicExpression = new RightSubAtomicExpressionElements();
		this.pInfixCompareOperatorName = new InfixCompareOperatorNameElements();
		this.pInfixOperatorName = new InfixOperatorNameElements();
		this.pInfixlogicConjunctionOperatorName = new InfixlogicConjunctionOperatorNameElements();
		this.pEssentialOCLNavigationOperatorName = new EssentialOCLNavigationOperatorNameElements();
		this.pCallExpCS = new CallExpCSElements();
		this.pLoopExpCS = new LoopExpCSElements();
		this.pIteratorExpCS = new IteratorExpCSElements();
		this.pEntityAttributeName = new EntityAttributeNameElements();
		this.pIteratorIdentifier = new IteratorIdentifierElements();
		this.pArgumentsCS = new ArgumentsCSElements();
		this.pFeatureCallExpCS = new FeatureCallExpCSElements();
		this.pStandardNavigationCallExpCS = new StandardNavigationCallExpCSElements();
		this.pStandardOperationExpCS = new StandardOperationExpCSElements();
		this.pPredefineOp = new PredefineOpElements();
		this.pStandardNoneParameterOperation = new StandardNoneParameterOperationElements();
		this.pStandardParameterOperation = new StandardParameterOperationElements();
		this.pStandardCollectionOperation = new StandardCollectionOperationElements();
		this.pStandardDateOperation = new StandardDateOperationElements();
		this.pClassiferCallExpCS = new ClassiferCallExpCSElements();
		this.pPropertyCallExpCS = new PropertyCallExpCSElements();
		this.pOperationCallExpCS = new OperationCallExpCSElements();
		this.pOperationParameters = new OperationParametersElements();
		this.pIsMarkedPreCS = new IsMarkedPreCSElements();
		this.pVariableExpCS = new VariableExpCSElements();
		this.pSimpleNameCS = new SimpleNameCSElements();
		this.pIfExpCS = new IfExpCSElements();
		this.pLetExpCS = new LetExpCSElements();
		this.pVariableDeclarationCS = new VariableDeclarationCSElements();
		this.pLiteralExpCS = new LiteralExpCSElements();
		this.pEnumLiteralExpCS = new EnumLiteralExpCSElements();
		this.pTupleLiteralExpCS = new TupleLiteralExpCSElements();
		this.pTupleTypeCS = new TupleTypeCSElements();
		this.pCollectionTypeCS = new CollectionTypeCSElements();
		this.pCollectionLiteralExpCS = new CollectionLiteralExpCSElements();
		this.pCollectionLiteralPartCS = new CollectionLiteralPartCSElements();
		this.pCollectionRangeCS = new CollectionRangeCSElements();
		this.pCollectionItem = new CollectionItemElements();
		this.pPrimitiveLiteralExpCS = new PrimitiveLiteralExpCSElements();
		this.pNumberLiteralExpCS = new NumberLiteralExpCSElements();
		this.pIntegerLiteralExpCS = new IntegerLiteralExpCSElements();
		this.pRealLiteralExpCS = new RealLiteralExpCSElements();
		this.pUnlimitedNaturalLiteralExpCS = new UnlimitedNaturalLiteralExpCSElements();
		this.pBooleanLiteralExpCS = new BooleanLiteralExpCSElements();
		this.pStringLiteralExpCS = new StringLiteralExpCSElements();
		this.pNullLiteralExpCS = new NullLiteralExpCSElements();
		this.pInvalidLiteralExpCS = new InvalidLiteralExpCSElements();
		this.pFloat = new FloatElements();
		this.tDOUBLE_QUOTED_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.DOUBLE_QUOTED_STRING");
		this.tSINGLE_QUOTED_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.SINGLE_QUOTED_STRING");
		this.tESCAPED_CHARACTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.ESCAPED_CHARACTER");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.ID");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.INT");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.edgecloudmodel.ECModel.WS");
		this.pReservedKeywordCS = new ReservedKeywordCSElements();
		this.pCollectionTypeIdentifierCS = new CollectionTypeIdentifierCSElements();
		this.pPrimitiveTypeCS = new PrimitiveTypeCSElements();
		this.pOclTypeCS = new OclTypeCSElements();
		this.pAssociationTypeCS = new AssociationTypeCSElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.edgecloudmodel.ECModel".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//RequirementModel returns RequirementModel:
	//    ('RequirementsModel::' name=SimpleNameCS)? ('@Description('description=DOUBLE_QUOTED_STRING')')?
	//    //    name = SimpleNameCS
	//    //    lifeline += Lifeline*
	//        UseCaseModel = UseCaseModel
	//        DomainModel = DomainModel
	////        workflow += Workflow*
	//    //    contract += Contract*
	////        ssd += [uml::Interaction]*
	//;
	public RequirementModelElements getRequirementModelAccess() {
		return pRequirementModel;
	}
	
	public ParserRule getRequirementModelRule() {
		return getRequirementModelAccess().getRule();
	}
	
	///* ----------------- Sequence Diagram ------------- */
	//Interaction returns Interaction:
	//    'Interaction' name=SimpleNameCS '{'
	//    '[Participants:' participants+=[Participant]* ']'
	//    messages+=Message*
	//    executions+=Execution*
	//    combinedFragments+=CombinedFragment*
	//    ends+=AbstractEnd*
	//    '}'
	//;
	public InteractionElements getInteractionAccess() {
		return pInteraction;
	}
	
	public ParserRule getInteractionRule() {
		return getInteractionAccess().getRule();
	}
	
	//Message:
	//    CallMessage | ReturnMessage
	//;
	public MessageElements getMessageAccess() {
		return pMessage;
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}
	
	//CallMessage:
	//    'CallMessage::' name=SimpleNameCS '('
	//    op=[Operation]
	//    sendingEnd=[MixEnd] '->'
	//    receivingEnd=[MixEnd]
	//    ')'
	//;
	public CallMessageElements getCallMessageAccess() {
		return pCallMessage;
	}
	
	public ParserRule getCallMessageRule() {
		return getCallMessageAccess().getRule();
	}
	
	//ReturnMessage:
	//    'ReturnMessage::' name=SimpleNameCS '('
	//    sendingEnd=[MixEnd] '->'
	//    receivingEnd=[MixEnd]
	//    invocationMessage=[Message] ')'
	//;
	public ReturnMessageElements getReturnMessageAccess() {
		return pReturnMessage;
	}
	
	public ParserRule getReturnMessageRule() {
		return getReturnMessageAccess().getRule();
	}
	
	//Execution:
	//    'Execution::' name=SimpleNameCS '('
	//    owner=[Participant]
	//    start=[ExecutionEnd]
	//    end=[ExecutionEnd] ')'
	//;
	public ExecutionElements getExecutionAccess() {
		return pExecution;
	}
	
	public ParserRule getExecutionRule() {
		return getExecutionAccess().getRule();
	}
	
	//CombinedFragment returns CombinedFragment:
	//    'CombinedFragment::' name=SimpleNameCS '->' operator=Operator '{'
	//    '[Participants:' coveredParticipants+=[Participant]* ']'
	//    start=[CombinedFragmentEnd] '->' finish=[CombinedFragmentEnd]
	//    ownedOperands+=Operand*
	//    '}'
	//;
	public CombinedFragmentElements getCombinedFragmentAccess() {
		return pCombinedFragment;
	}
	
	public ParserRule getCombinedFragmentRule() {
		return getCombinedFragmentAccess().getRule();
	}
	
	//Operator:
	//    'loop' | 'alt' | 'option'
	//;
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//Operand:
	//    'Operand::' name=SimpleNameCS '('
	//    start=[OperandEnd] finish=[MixOpAndCFEnd] ')'
	//;
	public OperandElements getOperandAccess() {
		return pOperand;
	}
	
	public ParserRule getOperandRule() {
		return getOperandAccess().getRule();
	}
	
	//AbstractEnd:
	//    MixEnd | MixOpAndCFEnd
	//;
	public AbstractEndElements getAbstractEndAccess() {
		return pAbstractEnd;
	}
	
	public ParserRule getAbstractEndRule() {
		return getAbstractEndAccess().getRule();
	}
	
	//MixEnd:
	//    ExecutionEnd | MessageEnd
	//;
	public MixEndElements getMixEndAccess() {
		return pMixEnd;
	}
	
	public ParserRule getMixEndRule() {
		return getMixEndAccess().getRule();
	}
	
	//MixOpAndCFEnd:
	//    CombinedFragmentEnd | OperandEnd
	//;
	public MixOpAndCFEndElements getMixOpAndCFEndAccess() {
		return pMixOpAndCFEnd;
	}
	
	public ParserRule getMixOpAndCFEndRule() {
		return getMixOpAndCFEndAccess().getRule();
	}
	
	//MessageEnd:
	//    'MessageEnd::' name=SimpleNameCS '('
	//    context=[MultiEnd]
	//    message=[Message] ')'
	//;
	public MessageEndElements getMessageEndAccess() {
		return pMessageEnd;
	}
	
	public ParserRule getMessageEndRule() {
		return getMessageEndAccess().getRule();
	}
	
	//MultiEnd :
	//    Participant | Execution
	//;
	public MultiEndElements getMultiEndAccess() {
		return pMultiEnd;
	}
	
	public ParserRule getMultiEndRule() {
		return getMultiEndAccess().getRule();
	}
	
	//ExecutionEnd:
	//    'ExecutionEnd::' name=SimpleNameCS '('
	//    context=[MultiEnd]
	//    execution=[Execution] ')'
	//;
	public ExecutionEndElements getExecutionEndAccess() {
		return pExecutionEnd;
	}
	
	public ParserRule getExecutionEndRule() {
		return getExecutionEndAccess().getRule();
	}
	
	//CombinedFragmentEnd:
	//    'CombinedFragmentEnd::' name=SimpleNameCS '('
	//    owner=[CombinedFragment] ')'
	//;
	public CombinedFragmentEndElements getCombinedFragmentEndAccess() {
		return pCombinedFragmentEnd;
	}
	
	public ParserRule getCombinedFragmentEndRule() {
		return getCombinedFragmentEndAccess().getRule();
	}
	
	//OperandEnd:
	//    'OperandEnd::' name=SimpleNameCS '('
	//    owner=[Operand] ')'
	//;
	public OperandEndElements getOperandEndAccess() {
		return pOperandEnd;
	}
	
	public ParserRule getOperandEndRule() {
		return getOperandEndAccess().getRule();
	}
	
	//DomainModel returns DomainModel:
	//    'DomainModel' name=SimpleNameCS ('('label=DOUBLE_QUOTED_STRING')')? '{'
	//        entity += Entity*
	//    '}'
	//;
	public DomainModelElements getDomainModelAccess() {
		return pDomainModel;
	}
	
	public ParserRule getDomainModelRule() {
		return getDomainModelAccess().getRule();
	}
	
	///* ----------------- UseCase ----------------- */
	//UseCaseModel returns UseCaseModel:
	//    'UseCaseModel' name=SimpleNameCS ('('label=DOUBLE_QUOTED_STRING')')? '{'
	//        uc += UC*
	//        actor+=Actor*
	//        interaction += Interaction*
	//        service += Service*
	//        contract += Contract*
	//    '}'
	//;
	public UseCaseModelElements getUseCaseModelAccess() {
		return pUseCaseModel;
	}
	
	public ParserRule getUseCaseModelRule() {
		return getUseCaseModelAccess().getRule();
	}
	
	//Actor returns Actor:
	////
	//    'Actor' name=SimpleNameCS ('('label=DOUBLE_QUOTED_STRING')')? ('extends' superActor=[Actor])?'{'
	//        ('@Description('description=DOUBLE_QUOTED_STRING')')?
	//        uc+=[UC]*
	//    '}'
	//;
	public ActorElements getActorAccess() {
		return pActor;
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}
	
	////Actor returns Actor:
	////    ('@actor_description:' description=DOUBLE_QUOTED_STRING)?
	////    'Actor' name=SimpleNameCS ('extends' superActor=[Actor])?'{'
	////        uc+=(UC)*
	////    '}'
	////;
	//UC returns UC:
	////     ('@uc_description:' description=DOUBLE_QUOTED_STRING)?
	//     'UC' '::' name=SimpleNameCS ('(')? (label=DOUBLE_QUOTED_STRING)? (')')? (UCRelation=USECASE_RELATION relateduc+=[UC] (',' relateduc+=[UC])*)? ('definedBySSD' '(' ssd+=[Interaction] (',' ssd+=[Interaction])* ')')? ('relatedService' '(' service+=[Service] (',' service+=[Service])* ')')? ('@Description('description=DOUBLE_QUOTED_STRING')')?
	//;
	public UCElements getUCAccess() {
		return pUC;
	}
	
	public ParserRule getUCRule() {
		return getUCAccess().getRule();
	}
	
	////UC:
	////     'UC' '::' ucname=Operation (UCRelation=USECASE_RELATION relatedopname=Operation)?
	////;
	///* ---------------- Controller  ------------------- */
	//Service returns Service:
	//    'Service' name=SimpleNameCS '{'
	//    ('@Description('description=DOUBLE_QUOTED_STRING')')?
	//    ('[Operation]' operation += Operation*)?
	//    ('[TempProperty]' temp_property += Attribute*)?
	//    ('[WorkFlow]' workflow += [Workflow]*)?
	//    ('[INV]' invariance+=Invariance*)?
	//    '}'
	//;
	public ServiceElements getServiceAccess() {
		return pService;
	}
	
	public ParserRule getServiceRule() {
		return getServiceAccess().getRule();
	}
	
	//Participant:
	//    Actor | Service
	//;
	public ParticipantElements getParticipantAccess() {
		return pParticipant;
	}
	
	public ParserRule getParticipantRule() {
		return getParticipantAccess().getRule();
	}
	
	///* ---------------- Workflow ------------------- */
	//Workflow returns Workflow:
	//    'Workflow' name=SimpleNameCS '{'
	//        '[' participants+=[Participant]* ']'
	//        partitions+=Partition*
	//    '}'
	//;
	public WorkflowElements getWorkflowAccess() {
		return pWorkflow;
	}
	
	public ParserRule getWorkflowRule() {
		return getWorkflowAccess().getRule();
	}
	
	//Partition:
	//    name=[Participant] '{'
	//        exps+=WorkflowExp*
	//    '}'
	//;
	public PartitionElements getPartitionAccess() {
		return pPartition;
	}
	
	public ParserRule getPartitionRule() {
		return getPartitionAccess().getRule();
	}
	
	//WorkflowExp:
	//    SimpleOperation | ComplexOpeartion | InitalNode | ActivityFinal | ForkNode | JoinNode | PartitionAction
	//;
	public WorkflowExpElements getWorkflowExpAccess() {
		return pWorkflowExp;
	}
	
	public ParserRule getWorkflowExpRule() {
		return getWorkflowExpAccess().getRule();
	}
	
	//PartitionAction:
	//    '->' patition=[Participant] ':' action=[JoinExp]
	//;
	public PartitionActionElements getPartitionActionAccess() {
		return pPartitionAction;
	}
	
	public ParserRule getPartitionActionRule() {
		return getPartitionActionAccess().getRule();
	}
	
	//JoinExp returns JoinExp:
	//    Operation | SwitchExp | LoopExp
	//;
	public JoinExpElements getJoinExpAccess() {
		return pJoinExp;
	}
	
	public ParserRule getJoinExpRule() {
		return getJoinExpAccess().getRule();
	}
	
	//ActivityFinal:
	//    name='ActivityFinal'
	//;
	public ActivityFinalElements getActivityFinalAccess() {
		return pActivityFinal;
	}
	
	public ParserRule getActivityFinalRule() {
		return getActivityFinalAccess().getRule();
	}
	
	//InitalNode:
	//    name='ActivityStart'
	//;
	public InitalNodeElements getInitalNodeAccess() {
		return pInitalNode;
	}
	
	public ParserRule getInitalNodeRule() {
		return getInitalNodeAccess().getRule();
	}
	
	//ForkNode:
	//    'ForkNode' '->' '(' startlinks+=[JoinExp]+ ')'
	//;
	public ForkNodeElements getForkNodeAccess() {
		return pForkNode;
	}
	
	public ParserRule getForkNodeRule() {
		return getForkNodeAccess().getRule();
	}
	
	//JoinNode:
	//    '(' endlinks+=[JoinExp]+ ')' '->' 'JoinNode'
	//;
	public JoinNodeElements getJoinNodeAccess() {
		return pJoinNode;
	}
	
	public ParserRule getJoinNodeRule() {
		return getJoinNodeAccess().getRule();
	}
	
	//ComplexOpeartion:
	//    LoopExp | SwitchExp // | ConcurrentExp
	//;
	public ComplexOpeartionElements getComplexOpeartionAccess() {
		return pComplexOpeartion;
	}
	
	public ParserRule getComplexOpeartionRule() {
		return getComplexOpeartionAccess().getRule();
	}
	
	////ConcurrentExp:
	////    ConcurrentStartRelationExp | ConcurrentEndRelationExp
	////;
	////
	////ConcurrentStartRelationExp:
	////    forknode=[ForkNode] '->' '(' startlinks+=[Operation] (',' startlinks+=[Operation])* ')'
	////;
	////
	////ConcurrentEndRelationExp:
	////    '(' startlinks+=[Operation] (',' startlinks+=[Operation])* ')' '->' joinnode=[JoinNode]
	////;
	//SimpleOperation:
	//    ref=[Operation]
	//;
	public SimpleOperationElements getSimpleOperationAccess() {
		return pSimpleOperation;
	}
	
	public ParserRule getSimpleOperationRule() {
		return getSimpleOperationAccess().getRule();
	}
	
	////LoopExp:
	////    'Loop' '->' condition=SimpleNameCS '{'
	////        exps += WorkflowExp*
	////    '}'
	////;
	//LoopExp:
	//    'Loop' '->' name=SimpleNameCS '{'
	//        exps += WorkflowExp*
	//    '}'
	//;
	public LoopExpElements getLoopExpAccess() {
		return pLoopExp;
	}
	
	public ParserRule getLoopExpRule() {
		return getLoopExpAccess().getRule();
	}
	
	////SwitchExp:
	////
	////    'Switch' '->' caseVarible=SimpleNameCS '{'
	////        cases += SwitchCase*
	////        default = SwitchDefault?
	////    '}'
	////;
	//SwitchExp:
	//    'Switch' '->' name=SimpleNameCS '{'
	//        cases += SwitchCase*
	//        default = SwitchDefault?
	//    '}'
	//;
	public SwitchExpElements getSwitchExpAccess() {
		return pSwitchExp;
	}
	
	public ParserRule getSwitchExpRule() {
		return getSwitchExpAccess().getRule();
	}
	
	//SwitchCase:
	//    'case:' caseValue=SimpleNameCS '->' op=SimpleOperation
	//;
	public SwitchCaseElements getSwitchCaseAccess() {
		return pSwitchCase;
	}
	
	public ParserRule getSwitchCaseRule() {
		return getSwitchCaseAccess().getRule();
	}
	
	//SwitchDefault:
	//    'default:' op=SimpleOperation
	//;
	public SwitchDefaultElements getSwitchDefaultAccess() {
		return pSwitchDefault;
	}
	
	public ParserRule getSwitchDefaultRule() {
		return getSwitchDefaultAccess().getRule();
	}
	
	//Operation :
	//    name=OperationName '(' parameter+=Parameter? (',' parameter+=Parameter)* ')' (':' returnType=TypeCS)?
	//;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//OperationName:
	//    SimpleNameCS
	//;
	public OperationNameElements getOperationNameAccess() {
		return pOperationName;
	}
	
	public ParserRule getOperationNameRule() {
		return getOperationNameAccess().getRule();
	}
	
	//Parameter:
	//    name=ParametersName (':' type=TypeCS)?
	//;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//ParametersName:
	//    SimpleNameCS
	//;
	public ParametersNameElements getParametersNameAccess() {
		return pParametersName;
	}
	
	public ParserRule getParametersNameRule() {
		return getParametersNameAccess().getRule();
	}
	
	///* --------------- Entity Model --------------- */
	//Entity returns Entity:
	//    (isCRUD?='@AutoCRUD')?
	//    'Entity' name=SimpleNameCS ('extends' superEntity=[Entity])? '{'
	//        ('@Description('description=DOUBLE_QUOTED_STRING')')?
	//        attributes+=Attribute*
	//        ('[Refer]' reference+=Reference*)?
	//        ('[INV]' invariance+=Invariance*)?
	//    '}'
	//;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Attribute returns Attribute:
	//    name=SimpleNameCS ':' type=TypeCS (ismultiple?='*')?
	//;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Reference returns Reference :
	//    name=SimpleNameCS ':' entity=[Entity] (ismultiple?='*')? (isReverseAssoication?='!')? (isAggregation?='@-')? (isComposition?='*-')? type=AssociationTypeCS
	//;
	public ReferenceElements getReferenceAccess() {
		return pReference;
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}
	
	//TypeCS:
	//     EntityType | PrimitiveTypeCS | EnumEntity | CollectionTypeCS // | Collection
	//;
	public TypeCSElements getTypeCSAccess() {
		return pTypeCS;
	}
	
	public ParserRule getTypeCSRule() {
		return getTypeCSAccess().getRule();
	}
	
	////Collection:
	////    collectiontype='List' '(' type=Type ')'
	////;
	//Invariance:
	//    'inv' name=SimpleNameCS ':' ('{' ocl=OCLExpressionCS '}' |  ocl=OCLExpressionCS) (isForAssociation?='ASSOCINV')?
	//;
	public InvarianceElements getInvarianceAccess() {
		return pInvariance;
	}
	
	public ParserRule getInvarianceRule() {
		return getInvarianceAccess().getRule();
	}
	
	//EntityType:
	//    entity=[Entity]
	//;
	public EntityTypeElements getEntityTypeAccess() {
		return pEntityType;
	}
	
	public ParserRule getEntityTypeRule() {
		return getEntityTypeAccess().getRule();
	}
	
	//EnumEntity:
	//    name=SimpleNameCS '[' element+=EnumItem ('|' element+=EnumItem)* ']'
	//;
	public EnumEntityElements getEnumEntityAccess() {
		return pEnumEntity;
	}
	
	public ParserRule getEnumEntityRule() {
		return getEnumEntityAccess().getRule();
	}
	
	//EnumItem:
	////    name=ENUM
	//    name=ID
	//;
	public EnumItemElements getEnumItemAccess() {
		return pEnumItem;
	}
	
	public ParserRule getEnumItemRule() {
		return getEnumItemAccess().getRule();
	}
	
	//USECASE_RELATION :
	//    'include' | 'extend'
	//;
	public USECASE_RELATIONElements getUSECASE_RELATIONAccess() {
		return pUSECASE_RELATION;
	}
	
	public ParserRule getUSECASE_RELATIONRule() {
		return getUSECASE_RELATIONAccess().getRule();
	}
	
	///* ----------------- Contract ------------------- */
	//Contract returns Contract:
	//    'Contract' service=[Service]'::'op=Operation '{'
	//        def=Definition?
	//        pre=Precondition
	//        post=Postcondition
	//    '}'
	//;
	public ContractElements getContractAccess() {
		return pContract;
	}
	
	public ParserRule getContractRule() {
		return getContractAccess().getRule();
	}
	
	//Definition:
	//    'definition' ':' variable+=VariableDeclarationCS (',' variable+=VariableDeclarationCS)*
	//;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	//Precondition:
	//    'precondition' ':' (oclexp=OCLExpressionCS | '{' oclexp=OCLExpressionCS '}')
	//;
	public PreconditionElements getPreconditionAccess() {
		return pPrecondition;
	}
	
	public ParserRule getPreconditionRule() {
		return getPreconditionAccess().getRule();
	}
	
	//Postcondition:
	//    'postcondition' ':' (oclexp=OCLExpressionCS | '{' oclexp=OCLExpressionCS '}')
	//;
	public PostconditionElements getPostconditionAccess() {
		return pPostcondition;
	}
	
	public ParserRule getPostconditionRule() {
		return getPostconditionAccess().getRule();
	}
	
	///* ------------------ OCLExpressionCS -------------- */
	//OCLExpressionCS returns OCLExpressionCS:
	//      LiteralExpCS | LetExpCS | IfExpCS | LogicFormulaExpCS | NestedExpCS // | -> CallExpCS
	//;
	public OCLExpressionCSElements getOCLExpressionCSAccess() {
		return pOCLExpressionCS;
	}
	
	public ParserRule getOCLExpressionCSRule() {
		return getOCLExpressionCSAccess().getRule();
	}
	
	//NestedExpCS returns NestedExpCS:
	//    '(' nestedExpression=OCLExpressionCS ')';
	public NestedExpCSElements getNestedExpCSAccess() {
		return pNestedExpCS;
	}
	
	public ParserRule getNestedExpCSRule() {
		return getNestedExpCSAccess().getRule();
	}
	
	//LogicFormulaExpCS returns LogicFormulaExpCS:
	//     atomicexp+=(AtomicExpression) (-> connector+=('and' | 'or')  atomicexp+=(AtomicExpression | IfExpCS | NestedExpCS))*
	//;
	public LogicFormulaExpCSElements getLogicFormulaExpCSAccess() {
		return pLogicFormulaExpCS;
	}
	
	public ParserRule getLogicFormulaExpCSRule() {
		return getLogicFormulaExpCSAccess().getRule();
	}
	
	//AtomicExpression returns AtomicExpression:
	//        leftside=(LeftSubAtomicExpression) (infixop=InfixCompareOperatorName rightside=(RightSubAtomicExpression) (op=InfixOperatorName (num=PrimitiveLiteralExpCS | exp=AtomicExpression) )?)?
	//;
	public AtomicExpressionElements getAtomicExpressionAccess() {
		return pAtomicExpression;
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}
	
	////AtomicExpression returns AtomicExpression:
	////        leftside=(VariableExpCS | CallExpCS) (infixop=InfixCompareOperatorName rightside=(LiteralExpCS | VariableExpCS | CallExpCS) (op=InfixOperatorName (num=OCLExpressionCS) )?)?
	////;
	//LeftSubAtomicExpression :
	//    VariableExpCS |  CallExpCS
	//;
	public LeftSubAtomicExpressionElements getLeftSubAtomicExpressionAccess() {
		return pLeftSubAtomicExpression;
	}
	
	public ParserRule getLeftSubAtomicExpressionRule() {
		return getLeftSubAtomicExpressionAccess().getRule();
	}
	
	//RightSubAtomicExpression :
	//    LiteralExpCS | VariableExpCS | CallExpCS
	//;
	public RightSubAtomicExpressionElements getRightSubAtomicExpressionAccess() {
		return pRightSubAtomicExpression;
	}
	
	public ParserRule getRightSubAtomicExpressionRule() {
		return getRightSubAtomicExpressionAccess().getRule();
	}
	
	////RightExpression:
	////    LiteralExpCS | VariableExpCS | CallExpCS
	////;
	//InfixCompareOperatorName:
	//     '>' | '<' | '>=' | '<=' | '=' | '<>'
	//;
	public InfixCompareOperatorNameElements getInfixCompareOperatorNameAccess() {
		return pInfixCompareOperatorName;
	}
	
	public ParserRule getInfixCompareOperatorNameRule() {
		return getInfixCompareOperatorNameAccess().getRule();
	}
	
	//InfixOperatorName:
	//    '*' | '/' | '+' | '-'
	//;
	public InfixOperatorNameElements getInfixOperatorNameAccess() {
		return pInfixOperatorName;
	}
	
	public ParserRule getInfixOperatorNameRule() {
		return getInfixOperatorNameAccess().getRule();
	}
	
	//InfixlogicConjunctionOperatorName:
	//    'and' | 'or' | 'xor' | 'implies'
	//;
	public InfixlogicConjunctionOperatorNameElements getInfixlogicConjunctionOperatorNameAccess() {
		return pInfixlogicConjunctionOperatorName;
	}
	
	public ParserRule getInfixlogicConjunctionOperatorNameRule() {
		return getInfixlogicConjunctionOperatorNameAccess().getRule();
	}
	
	//EssentialOCLNavigationOperatorName:
	//    '.' | '->' | '?.' | '?->';
	public EssentialOCLNavigationOperatorNameElements getEssentialOCLNavigationOperatorNameAccess() {
		return pEssentialOCLNavigationOperatorName;
	}
	
	public ParserRule getEssentialOCLNavigationOperatorNameRule() {
		return getEssentialOCLNavigationOperatorNameAccess().getRule();
	}
	
	///* ------------------ CallExpCS ---------------- */
	//CallExpCS:
	//    FeatureCallExpCS |
	//    LoopExpCS
	//;
	public CallExpCSElements getCallExpCSAccess() {
		return pCallExpCS;
	}
	
	public ParserRule getCallExpCSRule() {
		return getCallExpCSAccess().getRule();
	}
	
	//LoopExpCS:
	//    IteratorExpCS //| IterateExpCS
	//;
	public LoopExpCSElements getLoopExpCSAccess() {
		return pLoopExpCS;
	}
	
	public ParserRule getLoopExpCSRule() {
		return getLoopExpCSAccess().getRule();
	}
	
	////IterateExpCS:
	////    SimpleNameCS '->' 'iterate'
	////    '('
	////        (first=VariableDeclarationCS ';')? next=VariableDeclarationCS '|' exp=OCLExpressionCS
	////    ')'
	////;
	////IteratorExpCS:
	////    (objectCall=FeatureCallExpCS | simpleCall=SimpleNameCS) '->' iterator=IteratorIdentifier '(' (varibles+=VariableDeclarationCS (',' varibles+=VariableDeclarationCS)? '|')? -> exp=(LogicFormulaExpCS | IfExpCS) ')'
	////;
	//IteratorExpCS:
	//    (objectCall=(ClassiferCallExpCS | PropertyCallExpCS) | simpleCall=SimpleNameCS) '->' iterator=IteratorIdentifier '(' (varibles+=VariableDeclarationCS (',' varibles+=VariableDeclarationCS)* '|')?  -> exp=(LogicFormulaExpCS | IfExpCS ) ')'
	//;
	public IteratorExpCSElements getIteratorExpCSAccess() {
		return pIteratorExpCS;
	}
	
	public ParserRule getIteratorExpCSRule() {
		return getIteratorExpCSAccess().getRule();
	}
	
	//EntityAttributeName:
	//    name=SimpleNameCS
	//;
	public EntityAttributeNameElements getEntityAttributeNameAccess() {
		return pEntityAttributeName;
	}
	
	public ParserRule getEntityAttributeNameRule() {
		return getEntityAttributeNameAccess().getRule();
	}
	
	//IteratorIdentifier:
	//    'one' | 'exists' | 'select' | 'any' | 'forAll' | 'collect' | 'isUnique'
	//;
	public IteratorIdentifierElements getIteratorIdentifierAccess() {
		return pIteratorIdentifier;
	}
	
	public ParserRule getIteratorIdentifierRule() {
		return getIteratorIdentifierAccess().getRule();
	}
	
	//ArgumentsCS:
	//    first=OCLExpressionCS (',' next=ArgumentsCS)?
	//;
	public ArgumentsCSElements getArgumentsCSAccess() {
		return pArgumentsCS;
	}
	
	public ParserRule getArgumentsCSRule() {
		return getArgumentsCSAccess().getRule();
	}
	
	//FeatureCallExpCS:
	//    PropertyCallExpCS |
	//    ClassiferCallExpCS |
	//    StandardOperationExpCS |
	//    StandardNavigationCallExpCS |
	//    OperationCallExpCS
	//;
	public FeatureCallExpCSElements getFeatureCallExpCSAccess() {
		return pFeatureCallExpCS;
	}
	
	public ParserRule getFeatureCallExpCSRule() {
		return getFeatureCallExpCSAccess().getRule();
	}
	
	//StandardNavigationCallExpCS:
	//    (classifercall=ClassiferCallExpCS | propertycall=PropertyCallExpCS | object=SimpleNameCS) navop='->' standardOP=StandardCollectionOperation
	//;
	public StandardNavigationCallExpCSElements getStandardNavigationCallExpCSAccess() {
		return pStandardNavigationCallExpCS;
	}
	
	public ParserRule getStandardNavigationCallExpCSRule() {
		return getStandardNavigationCallExpCSAccess().getRule();
	}
	
	//StandardOperationExpCS:
	//    object=VariableExpCS '.' (property=VariableExpCS premark=IsMarkedPreCS? '.')? predefinedop=(PredefineOp)
	//;
	public StandardOperationExpCSElements getStandardOperationExpCSAccess() {
		return pStandardOperationExpCS;
	}
	
	public ParserRule getStandardOperationExpCSRule() {
		return getStandardOperationExpCSAccess().getRule();
	}
	
	//PredefineOp:
	//    StandardNoneParameterOperation |  StandardParameterOperation  | StandardDateOperation
	//;
	public PredefineOpElements getPredefineOpAccess() {
		return pPredefineOp;
	}
	
	public ParserRule getPredefineOpRule() {
		return getPredefineOpAccess().getRule();
	}
	
	//StandardNoneParameterOperation:
	//    name=('oclIsNew()' | 'oclIsUndefined()' | 'isEmpty()' | 'notEmpty()' | 'oclIsInvaild()' | 'size()' | 'sum()')
	//;
	public StandardNoneParameterOperationElements getStandardNoneParameterOperationAccess() {
		return pStandardNoneParameterOperation;
	}
	
	public ParserRule getStandardNoneParameterOperationRule() {
		return getStandardNoneParameterOperationAccess().getRule();
	}
	
	//StandardParameterOperation:
	//    name='oclIsTypeOf' '(' type=(PrimitiveTypeCS | EntityType ) ')'
	//;
	public StandardParameterOperationElements getStandardParameterOperationAccess() {
		return pStandardParameterOperation;
	}
	
	public ParserRule getStandardParameterOperationRule() {
		return getStandardParameterOperationAccess().getRule();
	}
	
	//StandardCollectionOperation:
	//    name=("includes" | "excludes" | "includesAll" | "excludesAll") '(' object=SimpleNameCS ')'
	//;
	public StandardCollectionOperationElements getStandardCollectionOperationAccess() {
		return pStandardCollectionOperation;
	}
	
	public ParserRule getStandardCollectionOperationRule() {
		return getStandardCollectionOperationAccess().getRule();
	}
	
	//StandardDateOperation:
	//    name=("After" | "Before" | "isAfter" | "isBefore" | "isEqual" ) '(' (object=SimpleNameCS | datenum=NumberLiteralExpCS | procall=PropertyCallExpCS) ')' ('.' nested=StandardDateOperation)?
	//;
	public StandardDateOperationElements getStandardDateOperationAccess() {
		return pStandardDateOperation;
	}
	
	public ParserRule getStandardDateOperationRule() {
		return getStandardDateOperationAccess().getRule();
	}
	
	//ClassiferCallExpCS:
	//    entity=SimpleNameCS '.' op='allInstance()'
	//;
	public ClassiferCallExpCSElements getClassiferCallExpCSAccess() {
		return pClassiferCallExpCS;
	}
	
	public ParserRule getClassiferCallExpCSRule() {
		return getClassiferCallExpCSAccess().getRule();
	}
	
	//PropertyCallExpCS:
	//    name=VariableExpCS '.' (selfproperty=VariableExpCS '.')?  attribute=SimpleNameCS (premark=IsMarkedPreCS)?
	//;
	public PropertyCallExpCSElements getPropertyCallExpCSAccess() {
		return pPropertyCallExpCS;
	}
	
	public ParserRule getPropertyCallExpCSRule() {
		return getPropertyCallExpCSAccess().getRule();
	}
	
	//OperationCallExpCS:
	//    name=SimpleNameCS '(' parameters+=OperationParameters? (',' parameters+=OperationParameters)* ')'
	//;
	public OperationCallExpCSElements getOperationCallExpCSAccess() {
		return pOperationCallExpCS;
	}
	
	public ParserRule getOperationCallExpCSRule() {
		return getOperationCallExpCSAccess().getRule();
	}
	
	//OperationParameters:
	//    object=SimpleNameCS | objectproperty=PropertyCallExpCS | string=(SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING)
	//;
	public OperationParametersElements getOperationParametersAccess() {
		return pOperationParameters;
	}
	
	public ParserRule getOperationParametersRule() {
		return getOperationParametersAccess().getRule();
	}
	
	//IsMarkedPreCS:
	//    '@' 'pre'
	//;
	public IsMarkedPreCSElements getIsMarkedPreCSAccess() {
		return pIsMarkedPreCS;
	}
	
	public ParserRule getIsMarkedPreCSRule() {
		return getIsMarkedPreCSAccess().getRule();
	}
	
	///* ------------------ VariableExpCS -------------- */
	//VariableExpCS:
	//    symbol=('self' | 'result'| SimpleNameCS)
	//;
	public VariableExpCSElements getVariableExpCSAccess() {
		return pVariableExpCS;
	}
	
	public ParserRule getVariableExpCSRule() {
		return getVariableExpCSAccess().getRule();
	}
	
	//SimpleNameCS:
	//    ID
	//;
	public SimpleNameCSElements getSimpleNameCSAccess() {
		return pSimpleNameCS;
	}
	
	public ParserRule getSimpleNameCSRule() {
		return getSimpleNameCSAccess().getRule();
	}
	
	///* ------------------ IfExpCS -------------- */
	//IfExpCS:
	//    'if' condition=OCLExpressionCS
	//    'then' thenExpression=OCLExpressionCS
	//    ('else' elseExpression=OCLExpressionCS)?
	//    'endif'
	//;
	public IfExpCSElements getIfExpCSAccess() {
		return pIfExpCS;
	}
	
	public ParserRule getIfExpCSRule() {
		return getIfExpCSAccess().getRule();
	}
	
	///* ------------------ LetExpCS -------------- */
	//LetExpCS:
	//    'let' variable+=VariableDeclarationCS (',' variable+=VariableDeclarationCS)*
	//    'in' inExpression=OCLExpressionCS
	//;
	public LetExpCSElements getLetExpCSAccess() {
		return pLetExpCS;
	}
	
	public ParserRule getLetExpCSRule() {
		return getLetExpCSAccess().getRule();
	}
	
	//VariableDeclarationCS:
	//    name=SimpleNameCS (':' type=TypeCS)? ('=' initExpression=OCLExpressionCS)?
	//;
	public VariableDeclarationCSElements getVariableDeclarationCSAccess() {
		return pVariableDeclarationCS;
	}
	
	public ParserRule getVariableDeclarationCSRule() {
		return getVariableDeclarationCSAccess().getRule();
	}
	
	///* ------------------ LiteralExpCS -------------- */
	//LiteralExpCS:
	//    CollectionLiteralExpCS | TupleLiteralExpCS | PrimitiveLiteralExpCS | EnumLiteralExpCS //| TypeCS
	//;
	public LiteralExpCSElements getLiteralExpCSAccess() {
		return pLiteralExpCS;
	}
	
	public ParserRule getLiteralExpCSRule() {
		return getLiteralExpCSAccess().getRule();
	}
	
	////-----------EnumLiteralExpCS
	//EnumLiteralExpCS:
	////    enumname=SimpleNameCS '::' eunmitem=ENUM
	//    enumname=SimpleNameCS '::' eunmitem=ID
	//;
	public EnumLiteralExpCSElements getEnumLiteralExpCSAccess() {
		return pEnumLiteralExpCS;
	}
	
	public ParserRule getEnumLiteralExpCSRule() {
		return getEnumLiteralExpCSAccess().getRule();
	}
	
	////-----------TupleLiteralExpCS
	//TupleLiteralExpCS:
	//    name='Tuple' '{' variables+=VariableDeclarationCS? (',' variables+=VariableDeclarationCS)* '}'
	//;
	public TupleLiteralExpCSElements getTupleLiteralExpCSAccess() {
		return pTupleLiteralExpCS;
	}
	
	public ParserRule getTupleLiteralExpCSRule() {
		return getTupleLiteralExpCSAccess().getRule();
	}
	
	////TypeCS:
	////       Type // | CollectionTypeCS// | PathNameCS  CollectionTypeCS | TupleTypeCS | OclTypeCS  |
	////;
	//TupleTypeCS:
	//    name='Tuple' '(' variables+=VariableDeclarationCS? (',' variables+=VariableDeclarationCS)* ')'
	//;
	public TupleTypeCSElements getTupleTypeCSAccess() {
		return pTupleTypeCS;
	}
	
	public ParserRule getTupleTypeCSRule() {
		return getTupleTypeCSAccess().getRule();
	}
	
	//CollectionTypeCS:
	//    name=CollectionTypeIdentifierCS '(' type=TypeCS ')'
	//;
	public CollectionTypeCSElements getCollectionTypeCSAccess() {
		return pCollectionTypeCS;
	}
	
	public ParserRule getCollectionTypeCSRule() {
		return getCollectionTypeCSAccess().getRule();
	}
	
	////-----------CollectionLiteralExpCS
	//CollectionLiteralExpCS:
	//    kind=CollectionTypeIdentifierCS '{' part+=CollectionLiteralPartCS? (-> ',' part+=CollectionLiteralPartCS)* '}'
	//;
	public CollectionLiteralExpCSElements getCollectionLiteralExpCSAccess() {
		return pCollectionLiteralExpCS;
	}
	
	public ParserRule getCollectionLiteralExpCSRule() {
		return getCollectionLiteralExpCSAccess().getRule();
	}
	
	//CollectionLiteralPartCS:
	//    CollectionRangeCS | -> CollectionItem
	//;
	public CollectionLiteralPartCSElements getCollectionLiteralPartCSAccess() {
		return pCollectionLiteralPartCS;
	}
	
	public ParserRule getCollectionLiteralPartCSRule() {
		return getCollectionLiteralPartCSAccess().getRule();
	}
	
	//CollectionRangeCS:
	//    -> first=OCLExpressionCS '..' last=OCLExpressionCS
	//;
	public CollectionRangeCSElements getCollectionRangeCSAccess() {
		return pCollectionRangeCS;
	}
	
	public ParserRule getCollectionRangeCSRule() {
		return getCollectionRangeCSAccess().getRule();
	}
	
	//CollectionItem:
	//    item=OCLExpressionCS
	//;
	public CollectionItemElements getCollectionItemAccess() {
		return pCollectionItem;
	}
	
	public ParserRule getCollectionItemRule() {
		return getCollectionItemAccess().getRule();
	}
	
	////-----------PrimitiveLiteralExpCS
	//PrimitiveLiteralExpCS:
	//      NumberLiteralExpCS
	//    | StringLiteralExpCS
	//    | BooleanLiteralExpCS
	//    | InvalidLiteralExpCS
	//    | NullLiteralExpCS;
	public PrimitiveLiteralExpCSElements getPrimitiveLiteralExpCSAccess() {
		return pPrimitiveLiteralExpCS;
	}
	
	public ParserRule getPrimitiveLiteralExpCSRule() {
		return getPrimitiveLiteralExpCSAccess().getRule();
	}
	
	//NumberLiteralExpCS returns NumberLiteralExpCS:
	//    symbol=(IntegerLiteralExpCS | RealLiteralExpCS | UnlimitedNaturalLiteralExpCS)
	//;
	public NumberLiteralExpCSElements getNumberLiteralExpCSAccess() {
		return pNumberLiteralExpCS;
	}
	
	public ParserRule getNumberLiteralExpCSRule() {
		return getNumberLiteralExpCSAccess().getRule();
	}
	
	//IntegerLiteralExpCS :
	//    INT
	//;
	public IntegerLiteralExpCSElements getIntegerLiteralExpCSAccess() {
		return pIntegerLiteralExpCS;
	}
	
	public ParserRule getIntegerLiteralExpCSRule() {
		return getIntegerLiteralExpCSAccess().getRule();
	}
	
	//RealLiteralExpCS:
	//    Float
	//;
	public RealLiteralExpCSElements getRealLiteralExpCSAccess() {
		return pRealLiteralExpCS;
	}
	
	public ParserRule getRealLiteralExpCSRule() {
		return getRealLiteralExpCSAccess().getRule();
	}
	
	//UnlimitedNaturalLiteralExpCS:
	//    '*'
	//;
	public UnlimitedNaturalLiteralExpCSElements getUnlimitedNaturalLiteralExpCSAccess() {
		return pUnlimitedNaturalLiteralExpCS;
	}
	
	public ParserRule getUnlimitedNaturalLiteralExpCSRule() {
		return getUnlimitedNaturalLiteralExpCSAccess().getRule();
	}
	
	//BooleanLiteralExpCS:
	//    symbol=('true' | 'false')
	//;
	public BooleanLiteralExpCSElements getBooleanLiteralExpCSAccess() {
		return pBooleanLiteralExpCS;
	}
	
	public ParserRule getBooleanLiteralExpCSRule() {
		return getBooleanLiteralExpCSAccess().getRule();
	}
	
	//StringLiteralExpCS:
	//    symbol= (SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING)
	//;
	public StringLiteralExpCSElements getStringLiteralExpCSAccess() {
		return pStringLiteralExpCS;
	}
	
	public ParserRule getStringLiteralExpCSRule() {
		return getStringLiteralExpCSAccess().getRule();
	}
	
	//NullLiteralExpCS:
	//    symbol='null'
	//;
	public NullLiteralExpCSElements getNullLiteralExpCSAccess() {
		return pNullLiteralExpCS;
	}
	
	public ParserRule getNullLiteralExpCSRule() {
		return getNullLiteralExpCSAccess().getRule();
	}
	
	//InvalidLiteralExpCS:
	//    symbol='invalid'
	//;
	public InvalidLiteralExpCSElements getInvalidLiteralExpCSAccess() {
		return pInvalidLiteralExpCS;
	}
	
	public ParserRule getInvalidLiteralExpCSRule() {
		return getInvalidLiteralExpCSAccess().getRule();
	}
	
	//Float:
	//    INT '.' INT
	//;
	public FloatElements getFloatAccess() {
		return pFloat;
	}
	
	public ParserRule getFloatRule() {
		return getFloatAccess().getRule();
	}
	
	//terminal DOUBLE_QUOTED_STRING:
	//    '"' (ESCAPED_CHARACTER | !('\\' | '"' | '.'))* '"';
	public TerminalRule getDOUBLE_QUOTED_STRINGRule() {
		return tDOUBLE_QUOTED_STRING;
	}
	
	//terminal SINGLE_QUOTED_STRING:
	//    "'" (ESCAPED_CHARACTER | !('\\' | "'" | '.'))* "'";
	public TerminalRule getSINGLE_QUOTED_STRINGRule() {
		return tSINGLE_QUOTED_STRING;
	}
	
	//terminal fragment ESCAPED_CHARACTER:
	//    '\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\');
	public TerminalRule getESCAPED_CHARACTERRule() {
		return tESCAPED_CHARACTER;
	}
	
	//terminal ID:
	//    '^'?('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal INT:
	//  ('0'..'9')+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal ML_COMMENT  :
	//  '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT :
	//  '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS  :
	//  (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	////terminal ENUM :
	////    ('A'..'Z')+
	////;
	//ReservedKeywordCS:
	//    CollectionTypeIdentifierCS | PrimitiveTypeCS | OclTypeCS | 'Tuple'
	//;
	public ReservedKeywordCSElements getReservedKeywordCSAccess() {
		return pReservedKeywordCS;
	}
	
	public ParserRule getReservedKeywordCSRule() {
		return getReservedKeywordCSAccess().getRule();
	}
	
	//CollectionTypeIdentifierCS:
	//name=('Set' |
	//    'Bag' |
	//    'Sequence' |
	//    'Collection' |
	//    'OrderedSet')
	//;
	public CollectionTypeIdentifierCSElements getCollectionTypeIdentifierCSAccess() {
		return pCollectionTypeIdentifierCS;
	}
	
	public ParserRule getCollectionTypeIdentifierCSRule() {
		return getCollectionTypeIdentifierCSAccess().getRule();
	}
	
	//PrimitiveTypeCS:
	//name=('Boolean'
	//    | 'Integer'
	//    | 'Real'
	//    | 'String'
	//    | 'UnlimitedNatural'
	//    | 'Date')
	//;
	public PrimitiveTypeCSElements getPrimitiveTypeCSAccess() {
		return pPrimitiveTypeCS;
	}
	
	public ParserRule getPrimitiveTypeCSRule() {
		return getPrimitiveTypeCSAccess().getRule();
	}
	
	//OclTypeCS:
	//name=('OclAny'
	//    | 'OclInvalid'
	//    | 'OclVoid')
	//;
	public OclTypeCSElements getOclTypeCSAccess() {
		return pOclTypeCS;
	}
	
	public ParserRule getOclTypeCSRule() {
		return getOclTypeCSAccess().getRule();
	}
	
	//AssociationTypeCS:
	//      'Association'
	//    | 'Aggregation'
	//    | 'Composition'
	//;
	public AssociationTypeCSElements getAssociationTypeCSAccess() {
		return pAssociationTypeCS;
	}
	
	public ParserRule getAssociationTypeCSRule() {
		return getAssociationTypeCSAccess().getRule();
	}
}
