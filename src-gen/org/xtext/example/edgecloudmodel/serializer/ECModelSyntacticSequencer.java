/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.edgecloudmodel.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.edgecloudmodel.services.ECModelGrammarAccess;

@SuppressWarnings("all")
public class ECModelSyntacticSequencer extends AbstractSyntacticSequencer {

	protected ECModelGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Entity_INVKeyword_8_0_q;
	protected AbstractElementAlias match_Entity_ReferKeyword_7_0_q;
	protected AbstractElementAlias match_Service_INVKeyword_7_0_q;
	protected AbstractElementAlias match_Service_OperationKeyword_4_0_q;
	protected AbstractElementAlias match_Service_TempPropertyKeyword_5_0_q;
	protected AbstractElementAlias match_Service_WorkFlowKeyword_6_0_q;
	protected AbstractElementAlias match_UC_LeftParenthesisKeyword_3_q;
	protected AbstractElementAlias match_UC_RightParenthesisKeyword_5_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (ECModelGrammarAccess) access;
		match_Entity_INVKeyword_8_0_q = new TokenAlias(false, true, grammarAccess.getEntityAccess().getINVKeyword_8_0());
		match_Entity_ReferKeyword_7_0_q = new TokenAlias(false, true, grammarAccess.getEntityAccess().getReferKeyword_7_0());
		match_Service_INVKeyword_7_0_q = new TokenAlias(false, true, grammarAccess.getServiceAccess().getINVKeyword_7_0());
		match_Service_OperationKeyword_4_0_q = new TokenAlias(false, true, grammarAccess.getServiceAccess().getOperationKeyword_4_0());
		match_Service_TempPropertyKeyword_5_0_q = new TokenAlias(false, true, grammarAccess.getServiceAccess().getTempPropertyKeyword_5_0());
		match_Service_WorkFlowKeyword_6_0_q = new TokenAlias(false, true, grammarAccess.getServiceAccess().getWorkFlowKeyword_6_0());
		match_UC_LeftParenthesisKeyword_3_q = new TokenAlias(false, true, grammarAccess.getUCAccess().getLeftParenthesisKeyword_3());
		match_UC_RightParenthesisKeyword_5_q = new TokenAlias(false, true, grammarAccess.getUCAccess().getRightParenthesisKeyword_5());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Entity_INVKeyword_8_0_q.equals(syntax))
				emit_Entity_INVKeyword_8_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Entity_ReferKeyword_7_0_q.equals(syntax))
				emit_Entity_ReferKeyword_7_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Service_INVKeyword_7_0_q.equals(syntax))
				emit_Service_INVKeyword_7_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Service_OperationKeyword_4_0_q.equals(syntax))
				emit_Service_OperationKeyword_4_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Service_TempPropertyKeyword_5_0_q.equals(syntax))
				emit_Service_TempPropertyKeyword_5_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Service_WorkFlowKeyword_6_0_q.equals(syntax))
				emit_Service_WorkFlowKeyword_6_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_UC_LeftParenthesisKeyword_3_q.equals(syntax))
				emit_UC_LeftParenthesisKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_UC_RightParenthesisKeyword_5_q.equals(syntax))
				emit_UC_RightParenthesisKeyword_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '[INV]'?
	 *
	 * This ambiguous syntax occurs at:
	 *     attributes+=Attribute '[Refer]'? (ambiguity) '}' (rule end)
	 *     description=DOUBLE_QUOTED_STRING ')' '[Refer]'? (ambiguity) '}' (rule end)
	 *     name=SimpleNameCS '{' '[Refer]'? (ambiguity) '}' (rule end)
	 *     reference+=Reference (ambiguity) '}' (rule end)
	 *     superEntity=[Entity|ID] '{' '[Refer]'? (ambiguity) '}' (rule end)
	 */
	protected void emit_Entity_INVKeyword_8_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '[Refer]'?
	 *
	 * This ambiguous syntax occurs at:
	 *     attributes+=Attribute (ambiguity) '[INV]' invariance+=Invariance
	 *     attributes+=Attribute (ambiguity) '[INV]'? '}' (rule end)
	 *     description=DOUBLE_QUOTED_STRING ')' (ambiguity) '[INV]' invariance+=Invariance
	 *     description=DOUBLE_QUOTED_STRING ')' (ambiguity) '[INV]'? '}' (rule end)
	 *     name=SimpleNameCS '{' (ambiguity) '[INV]' invariance+=Invariance
	 *     name=SimpleNameCS '{' (ambiguity) '[INV]'? '}' (rule end)
	 *     superEntity=[Entity|ID] '{' (ambiguity) '[INV]' invariance+=Invariance
	 *     superEntity=[Entity|ID] '{' (ambiguity) '[INV]'? '}' (rule end)
	 */
	protected void emit_Entity_ReferKeyword_7_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '[INV]'?
	 *
	 * This ambiguous syntax occurs at:
	 *     description=DOUBLE_QUOTED_STRING ')' '[Operation]'? '[TempProperty]'? '[WorkFlow]'? (ambiguity) '}' (rule end)
	 *     name=SimpleNameCS '{' '[Operation]'? '[TempProperty]'? '[WorkFlow]'? (ambiguity) '}' (rule end)
	 *     operation+=Operation '[TempProperty]'? '[WorkFlow]'? (ambiguity) '}' (rule end)
	 *     temp_property+=Attribute '[WorkFlow]'? (ambiguity) '}' (rule end)
	 *     workflow+=[Workflow|ID] (ambiguity) '}' (rule end)
	 */
	protected void emit_Service_INVKeyword_7_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '[Operation]'?
	 *
	 * This ambiguous syntax occurs at:
	 *     description=DOUBLE_QUOTED_STRING ')' (ambiguity) '[TempProperty]' temp_property+=Attribute
	 *     description=DOUBLE_QUOTED_STRING ')' (ambiguity) '[TempProperty]'? '[WorkFlow]' workflow+=[Workflow|ID]
	 *     description=DOUBLE_QUOTED_STRING ')' (ambiguity) '[TempProperty]'? '[WorkFlow]'? '[INV]' invariance+=Invariance
	 *     description=DOUBLE_QUOTED_STRING ')' (ambiguity) '[TempProperty]'? '[WorkFlow]'? '[INV]'? '}' (rule end)
	 *     name=SimpleNameCS '{' (ambiguity) '[TempProperty]' temp_property+=Attribute
	 *     name=SimpleNameCS '{' (ambiguity) '[TempProperty]'? '[WorkFlow]' workflow+=[Workflow|ID]
	 *     name=SimpleNameCS '{' (ambiguity) '[TempProperty]'? '[WorkFlow]'? '[INV]' invariance+=Invariance
	 *     name=SimpleNameCS '{' (ambiguity) '[TempProperty]'? '[WorkFlow]'? '[INV]'? '}' (rule end)
	 */
	protected void emit_Service_OperationKeyword_4_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '[TempProperty]'?
	 *
	 * This ambiguous syntax occurs at:
	 *     description=DOUBLE_QUOTED_STRING ')' '[Operation]'? (ambiguity) '[WorkFlow]' workflow+=[Workflow|ID]
	 *     description=DOUBLE_QUOTED_STRING ')' '[Operation]'? (ambiguity) '[WorkFlow]'? '[INV]' invariance+=Invariance
	 *     description=DOUBLE_QUOTED_STRING ')' '[Operation]'? (ambiguity) '[WorkFlow]'? '[INV]'? '}' (rule end)
	 *     name=SimpleNameCS '{' '[Operation]'? (ambiguity) '[WorkFlow]' workflow+=[Workflow|ID]
	 *     name=SimpleNameCS '{' '[Operation]'? (ambiguity) '[WorkFlow]'? '[INV]' invariance+=Invariance
	 *     name=SimpleNameCS '{' '[Operation]'? (ambiguity) '[WorkFlow]'? '[INV]'? '}' (rule end)
	 *     operation+=Operation (ambiguity) '[WorkFlow]' workflow+=[Workflow|ID]
	 *     operation+=Operation (ambiguity) '[WorkFlow]'? '[INV]' invariance+=Invariance
	 *     operation+=Operation (ambiguity) '[WorkFlow]'? '[INV]'? '}' (rule end)
	 */
	protected void emit_Service_TempPropertyKeyword_5_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '[WorkFlow]'?
	 *
	 * This ambiguous syntax occurs at:
	 *     description=DOUBLE_QUOTED_STRING ')' '[Operation]'? '[TempProperty]'? (ambiguity) '[INV]' invariance+=Invariance
	 *     description=DOUBLE_QUOTED_STRING ')' '[Operation]'? '[TempProperty]'? (ambiguity) '[INV]'? '}' (rule end)
	 *     name=SimpleNameCS '{' '[Operation]'? '[TempProperty]'? (ambiguity) '[INV]' invariance+=Invariance
	 *     name=SimpleNameCS '{' '[Operation]'? '[TempProperty]'? (ambiguity) '[INV]'? '}' (rule end)
	 *     operation+=Operation '[TempProperty]'? (ambiguity) '[INV]' invariance+=Invariance
	 *     operation+=Operation '[TempProperty]'? (ambiguity) '[INV]'? '}' (rule end)
	 *     temp_property+=Attribute (ambiguity) '[INV]' invariance+=Invariance
	 *     temp_property+=Attribute (ambiguity) '[INV]'? '}' (rule end)
	 */
	protected void emit_Service_WorkFlowKeyword_6_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=SimpleNameCS (ambiguity) ')'? '@Description(' description=DOUBLE_QUOTED_STRING
	 *     name=SimpleNameCS (ambiguity) ')'? 'definedBySSD' '(' ssd+=[Interaction|ID]
	 *     name=SimpleNameCS (ambiguity) ')'? 'relatedService' '(' service+=[Service|ID]
	 *     name=SimpleNameCS (ambiguity) ')'? (rule end)
	 *     name=SimpleNameCS (ambiguity) ')'? UCRelation=USECASE_RELATION
	 *     name=SimpleNameCS (ambiguity) label=DOUBLE_QUOTED_STRING
	 */
	protected void emit_UC_LeftParenthesisKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ')'?
	 *
	 * This ambiguous syntax occurs at:
	 *     label=DOUBLE_QUOTED_STRING (ambiguity) '@Description(' description=DOUBLE_QUOTED_STRING
	 *     label=DOUBLE_QUOTED_STRING (ambiguity) 'definedBySSD' '(' ssd+=[Interaction|ID]
	 *     label=DOUBLE_QUOTED_STRING (ambiguity) 'relatedService' '(' service+=[Service|ID]
	 *     label=DOUBLE_QUOTED_STRING (ambiguity) (rule end)
	 *     label=DOUBLE_QUOTED_STRING (ambiguity) UCRelation=USECASE_RELATION
	 *     name=SimpleNameCS '('? (ambiguity) '@Description(' description=DOUBLE_QUOTED_STRING
	 *     name=SimpleNameCS '('? (ambiguity) 'definedBySSD' '(' ssd+=[Interaction|ID]
	 *     name=SimpleNameCS '('? (ambiguity) 'relatedService' '(' service+=[Service|ID]
	 *     name=SimpleNameCS '('? (ambiguity) (rule end)
	 *     name=SimpleNameCS '('? (ambiguity) UCRelation=USECASE_RELATION
	 */
	protected void emit_UC_RightParenthesisKeyword_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
