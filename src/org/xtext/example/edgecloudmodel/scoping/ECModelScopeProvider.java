/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.edgecloudmodel.scoping;

import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.xtext.example.edgecloudmodel.eCModel.*;


/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class ECModelScopeProvider extends AbstractECModelScopeProvider {
	
	private boolean containOperation(Statement statement, Statement source) {
		if(statement instanceof IfStatement) {
			var ss = (IfStatement)statement;
			return Stream.concat(
					ss.getIfStatements().stream(),
					ss.getElseStatements().stream())
					.anyMatch(s -> containOperation(s, source));
		}else if(statement instanceof WhileStatement) {
			var ss = (WhileStatement)statement;
			return ss.getStatements().stream()
					.anyMatch(s -> containOperation(s, source));
		}else {
			return statement == source;
		}
	}
	
	@Override
	public IScope getScope(EObject context, EReference reference) {
	    // We want to define the Scope for the Element's superElement cross-reference
	    if (context instanceof OperandEnd
	            && reference == ECModelPackage.Literals.OPERAND_END__OWNER) {
	        // Collect a list of candidates by going through the model
	        // EcoreUtil2 provides useful functionality to do that
	        // For example searching for all elements within the root Object's tree
	        EObject rootElement = EcoreUtil2.getRootContainer(context);
	        List<Operand> candidates = EcoreUtil2.getAllContentsOfType(rootElement, Operand.class);
	        // Create IEObjectDescriptions and puts them into an IScope instance
	        return Scopes.scopeFor(candidates);
	    } 
	    else if(context instanceof OperationStatement || context instanceof NoticeStatement) {
	    	EObject rootElement = EcoreUtil2.getRootContainer(context);
	    	var collaboration = EcoreUtil2.getAllContentsOfType(rootElement, Collaboration.class)
	        		.stream().filter(c -> {
	        			return Stream.concat(c.getCallBlock().getStatements().stream(),
	        					c.getCollaborateBlock().getStatements().stream())
	        					.anyMatch(s -> containOperation(s, (Statement)context));
	        		}).findFirst().get();
	    	List<EObject> candidates;
	    	if(context instanceof OperationStatement) {
	    		candidates = Stream.concat(
		        		collaboration.getCallee().getOperation().stream(), 
		        		collaboration.getCollaborator().getOperation().stream()
		        		).collect(Collectors.toList());
		       
    	 	}else if(context instanceof NoticeStatement) {
    	 		if(reference == ECModelPackage.Literals.NOTICE_STATEMENT__EVENT) {
    	 			candidates = Stream.concat(
    		        		collaboration.getCallee().getEvent().stream(), 
    		        		collaboration.getCollaborator().getEvent().stream()
    		        		).collect(Collectors.toList());
    	 		}else {
		        	candidates = collaboration.getNotifies().stream().collect(Collectors.toList());
    	 		}
    	 	}else if(context instanceof CallStatement){
    	 		candidates = Stream.of(
		        		collaboration.getCallee(), 
		        		collaboration.getCollaborator()
		        		).collect(Collectors.toList());
    	 	}else{
    	 		candidates = Collections.emptyList();
    	 	}
	    	return Scopes.scopeFor(candidates);
	    }else if(context instanceof Contract) {
	    	return Scopes.scopeFor(
	    			Stream.concat(
	    					EcoreUtil2.getAllContentsOfType(
	    	    					EcoreUtil2.getRootContainer(context),
	    	    					Collaboration.class)
	    					.stream().flatMap(c -> Stream.of(c.getCallee(), c.getCollaborator())),
	    	    			EcoreUtil2.getAllContentsOfType(
	    	    					EcoreUtil2.getRootContainer(context),
	    	    					UseCaseModel.class)
	    	    			.get(0).getService().stream())
	    			.collect(Collectors.toList()));
	    }
//    	else if ((context instanceof OperationBegin || context instanceof OperationEnd) 
//    			&& reference != ECModelPackage.Literals.STATEMENT__PARTICIPANT) {
//	        
//    		EObject rootElement = EcoreUtil2.getRootContainer(context);
//	        
//	        Collaboration collaboration = EcoreUtil2.getAllContentsOfType(rootElement, Collaboration.class)
//	        		.stream().filter(c -> c.getWorkflow().getStatements().contains(context)).findAny().get();
//	        var candidates = Stream.concat(
//	        		collaboration.getCloudService().getOperation().stream(), 
//	        		collaboration.getEdgeService().getOperation().stream()).collect(Collectors.toList());
//	        return Scopes.scopeFor(candidates);
//	    }
//    	else if ((context instanceof EventBegin || context instanceof EventEnd) 
//    			&& reference != ECModelPackage.Literals.STATEMENT__PARTICIPANT) {
//	        
//    		EObject rootElement = EcoreUtil2.getRootContainer(context);
//	        
//	        Collaboration collaboration = EcoreUtil2.getAllContentsOfType(rootElement, Collaboration.class)
//	        		.stream().filter(c -> c.getWorkflow().getStatements().contains(context)).findAny().get();
//	        var candidates = Stream.concat(
//	        		collaboration.getCloudService().getEvent().stream(), 
//	        		collaboration.getEdgeService().getEvent().stream()).collect(Collectors.toList());
//	        return Scopes.scopeFor(candidates);
//	    }
//    	else if ((context instanceof CallBegin || context instanceof CallEnd) 
//    			&& reference != ECModelPackage.Literals.STATEMENT__PARTICIPANT) {
//	        
//    		EObject rootElement = EcoreUtil2.getRootContainer(context);
//	        
//	        Collaboration collaboration = EcoreUtil2.getAllContentsOfType(rootElement, Collaboration.class)
//	        		.stream().filter(c -> c.getWorkflow().getStatements().contains(context)).findAny().get();
//	        var candidates = Stream.concat(
//	        		collaboration.getCloudService().getCall().stream(), 
//	        		collaboration.getEdgeService().getCall().stream()).collect(Collectors.toList());
//	        return Scopes.scopeFor(candidates);
//	    }
	    return super.getScope(context, reference);
	}
}
